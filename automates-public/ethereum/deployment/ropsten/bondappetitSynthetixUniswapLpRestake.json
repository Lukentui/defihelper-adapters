{
  "address": "0x77cE9ede56284c0Fe21C0Ff84a3989ed6865CA89",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_info",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "deadline",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "info",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_slippage",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_deadline",
          "type": "uint16"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gasFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256[2]",
          "name": "_outMin",
          "type": "uint256[2]"
        }
      ],
      "name": "run",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippage",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract IStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x95e7a4c7fa8bdc617645792f11915622ee8138fb3a42143c5f57504065608036",
  "receipt": {
    "to": null,
    "from": "0x9403932015576D13Fb26B135ed7a35d5d95C18d4",
    "contractAddress": "0x77cE9ede56284c0Fe21C0Ff84a3989ed6865CA89",
    "transactionIndex": 28,
    "gasUsed": "2030950",
    "logsBloom": "0x
    "blockHash": "0xb03c12ff238f557000b6e5f58596526100b8f7ec9e9ae290bf830ab19f27e874",
    "transactionHash": "0x95e7a4c7fa8bdc617645792f11915622ee8138fb3a42143c5f57504065608036",
    "logs": [],
    "blockNumber": 11046493,
    "cumulativeGasUsed": "3948788",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD6CECEa36218A9A7b2f0c7371cDFcB0e09617Dd0"
  ],
  "solcInputHash": "cdd435eaa3a67cc3ef41309471655d1e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_info\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"info\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_slippage\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_deadline\",\"type\":\"uint16\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"_outMin\",\"type\":\"uint256[2]\"}],\"name\":\"run\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"transfer(address,address,uint256)\":{\"params\":{\"amount\":\"Transferred amount of tokens.\",\"recipient\":\"Token recipient address.\",\"token\":\"The address of the token to be transferred.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"info()\":{\"notice\":\"Returns address of Storage contract.\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"pause()\":{\"notice\":\"Pause contract.\"},\"paused()\":{\"notice\":\"Returns true if the contract is paused, and false otherwise.\"},\"transfer(address,address,uint256)\":{\"notice\":\"Transfer ERC20 token to recipient.\"},\"unpause()\":{\"notice\":\"Unpause contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"automates/bondappetit/SynthetixUniswapLpRestake.automate.sol\":\"SynthetixUniswapLpRestake\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"automates/bondappetit/SynthetixUniswapLpRestake.automate.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../utils/DFH/Automate.sol\\\";\\nimport \\\"../utils/DFH/IStorage.sol\\\";\\nimport \\\"../utils/Uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"../utils/Uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"../utils/Synthetix/IStaking.sol\\\";\\nimport {ERC20Tools} from \\\"../utils/ERC20Tools.sol\\\";\\n\\n// solhint-disable not-rely-on-time\\ncontract SynthetixUniswapLpRestake is Automate {\\n  using ERC20Tools for IERC20;\\n\\n  IStaking public staking;\\n\\n  uint16 public slippage;\\n\\n  uint16 public deadline;\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor(address _info) Automate(_info) {}\\n\\n  function init(\\n    address _staking,\\n    uint16 _slippage,\\n    uint16 _deadline\\n  ) external initializer {\\n    staking = IStaking(_staking);\\n    slippage = _slippage;\\n    deadline = _deadline;\\n  }\\n\\n  function deposit() external onlyOwner {\\n    IStaking _staking = staking; // gas optimisation\\n    address stakingToken = _staking.stakingToken();\\n    IERC20(stakingToken).safeApproveAll(address(_staking));\\n    _staking.stake(IERC20(stakingToken).balanceOf(address(this)));\\n  }\\n\\n  function refund() external onlyOwner {\\n    IStaking _staking = staking; // gas optimisation\\n    _staking.exit();\\n\\n    address __owner = owner(); // gas optimisation\\n    IERC20 stakingToken = IERC20(_staking.stakingToken());\\n    stakingToken.transfer(__owner, stakingToken.balanceOf(address(this)));\\n\\n    IERC20 rewardToken = IERC20(_staking.rewardsToken());\\n    rewardToken.transfer(__owner, rewardToken.balanceOf(address(this)));\\n  }\\n\\n  function _swap(\\n    address[3] memory path,\\n    uint256[2] memory amount,\\n    uint256 _deadline\\n  ) internal returns (uint256) {\\n    if (path[1] == path[2]) return amount[0];\\n\\n    address[] memory _path = new address[](2);\\n    _path[0] = path[1];\\n    _path[1] = path[2];\\n\\n    IERC20(path[2]).safeApproveAll(path[0]); // For add liquidity call\\n    return\\n      IUniswapV2Router02(path[0]).swapExactTokensForTokens(amount[0], amount[1], _path, address(this), _deadline)[1];\\n  }\\n\\n  function _addLiquidity(\\n    address[3] memory path,\\n    uint256[4] memory amount,\\n    uint256 _deadline\\n  ) internal {\\n    IUniswapV2Router02(path[0]).addLiquidity(\\n      path[1],\\n      path[2],\\n      amount[0],\\n      amount[1],\\n      amount[2],\\n      amount[3],\\n      address(this),\\n      _deadline\\n    );\\n  }\\n\\n  function run(\\n    uint256 gasFee,\\n    uint256 _deadline,\\n    uint256[2] memory _outMin\\n  ) external bill(gasFee, \\\"BondappetitSynthetixLPRestake\\\") {\\n    IStaking _staking = staking; // gas optimization\\n    require(_staking.earned(address(this)) > 0, \\\"SynthetixUniswapLpRestake::run: no earned\\\");\\n    address router = IStorage(info()).getAddress(keccak256(\\\"UniswapV2:Contract:Router2\\\"));\\n    require(router != address(0), \\\"SynthetixUniswapLpRestake::run: uniswap router contract not found\\\");\\n\\n    _staking.getReward();\\n    address rewardToken = _staking.rewardsToken();\\n    uint256 rewardAmount = IERC20(rewardToken).balanceOf(address(this));\\n    IERC20(rewardToken).safeApproveAll(router);\\n\\n    IUniswapV2Pair stakingToken = IUniswapV2Pair(_staking.stakingToken());\\n    address[2] memory tokens = [stakingToken.token0(), stakingToken.token1()];\\n    uint256[4] memory amount = [\\n      _swap([router, rewardToken, tokens[0]], [rewardAmount / 2, _outMin[0]], _deadline),\\n      _swap([router, rewardToken, tokens[1]], [rewardAmount - rewardAmount / 2, _outMin[1]], _deadline),\\n      0,\\n      0\\n    ];\\n\\n    _addLiquidity([router, tokens[0], tokens[1]], amount, _deadline);\\n    IERC20(stakingToken).safeApproveAll(address(_staking));\\n    _staking.stake(IERC20(stakingToken).balanceOf(address(this)));\\n  }\\n}\\n\",\"keccak256\":\"0x330cb90903cbf1c538cf96e4e52fcce166dbb0fdc8e88bcb2cff7101381f2032\",\"license\":\"BSD-3-Clause\"},\"automates/utils/DFH/Automate.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./proxy/ERC1167.sol\\\";\\nimport \\\"./IStorage.sol\\\";\\nimport \\\"./IBalance.sol\\\";\\n\\n// solhint-disable avoid-tx-origin\\nabstract contract Automate {\\n  using ERC1167 for address;\\n\\n  /// @notice Storage contract address.\\n  address internal _info;\\n\\n  /// @notice Contract owner.\\n  address internal _owner;\\n\\n  /// @notice Is contract paused.\\n  bool internal _paused;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  constructor(address __info) {\\n    _info = __info;\\n    _owner = tx.origin;\\n  }\\n\\n  /**\\n   * @notice Returns address of Storage contract.\\n   */\\n  function info() public view returns (address) {\\n    address impl = address(this).implementation();\\n    if (impl == address(this)) return _info;\\n\\n    return Automate(impl).info();\\n  }\\n\\n  /// @dev Modifier to protect an initializer function from being invoked twice.\\n  modifier initializer() {\\n    if (_owner == address(0)) {\\n      _owner = tx.origin;\\n    } else {\\n      require(_owner == msg.sender, \\\"Automate: caller is not the owner\\\");\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(_owner == msg.sender, \\\"Automate: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external onlyOwner {\\n    require(address(this).implementation() == address(this), \\\"Automate: change the owner failed\\\");\\n\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the pauser.\\n   */\\n  modifier onlyPauser() {\\n    if (address(this).implementation() == address(this)) {\\n      address pauser = IStorage(info()).getAddress(keccak256(\\\"DFH:Pauser\\\"));\\n      require(msg.sender == _owner || msg.sender == pauser, \\\"Automate: caller is not the pauser\\\");\\n    } else {\\n      require(msg.sender == _owner, \\\"Automate: caller is not the pauser\\\");\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Returns true if the contract is paused, and false otherwise.\\n   */\\n  function paused() public view returns (bool) {\\n    address impl = address(this).implementation();\\n    if (impl == address(this)) return _paused;\\n\\n    return _paused || Automate(impl).paused();\\n  }\\n\\n  /**\\n   * @dev Throws if contract paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused(), \\\"Automate: not paused\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Throws if contract unpaused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused(), \\\"Automate: paused\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Pause contract.\\n   */\\n  function pause() external onlyPauser whenNotPaused {\\n    _paused = true;\\n  }\\n\\n  /**\\n   * @notice Unpause contract.\\n   */\\n  function unpause() external onlyPauser whenPaused {\\n    _paused = false;\\n  }\\n\\n  /**\\n   * @dev Claim fees from owner.\\n   * @param gasFee Claim gas fee.\\n   * @param operation Claim description.\\n   */\\n  function _bill(uint256 gasFee, string memory operation) internal whenNotPaused returns (uint256) {\\n    address account = owner(); // gas optimisation\\n    if (tx.origin == account) return 0; // free if called by the owner\\n\\n    IStorage __info = IStorage(info());\\n\\n    address balance = __info.getAddress(keccak256(\\\"DFH:Contract:Balance\\\"));\\n    require(balance != address(0), \\\"Automate::_bill: balance contract not found\\\");\\n\\n    uint256 protocolFee = __info.getUint(keccak256(\\\"DFH:Fee:Automate\\\"));\\n    return IBalance(balance).claim(account, gasFee, protocolFee, operation);\\n  }\\n\\n  /**\\n   * @dev Claim fees from owner.\\n   * @param gasFee Claim gas fee.\\n   * @param operation Claim description.\\n   */\\n  modifier bill(uint256 gasFee, string memory operation) {\\n    _bill(gasFee, operation);\\n    _;\\n  }\\n\\n  /**\\n   * @notice Transfer ERC20 token to recipient.\\n   * @param token The address of the token to be transferred.\\n   * @param recipient Token recipient address.\\n   * @param amount Transferred amount of tokens.\\n   */\\n  function transfer(\\n    address token,\\n    address recipient,\\n    uint256 amount\\n  ) external onlyOwner {\\n    IERC20(token).transfer(recipient, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x5ffe08ee00e12fb9c477d3cdec4cc8528debb7af941719fd63986988f14e6d6d\",\"license\":\"BSD-3-Clause\"},\"automates/utils/DFH/IBalance.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IBalance {\\n  function claim(\\n    address account,\\n    uint256 gasFee,\\n    uint256 protocolFee,\\n    string memory description\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xaa996ebfd96fa304ff8c51b240819815ea9cb1b27a250319c57cac7b597be6cc\",\"license\":\"BSD-3-Clause\"},\"automates/utils/DFH/IStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IStorage {\\n  function getBytes(bytes32 key) external view returns (bytes memory);\\n\\n  function getBool(bytes32 key) external view returns (bool);\\n\\n  function getUint(bytes32 key) external view returns (uint256);\\n\\n  function getInt(bytes32 key) external view returns (int256);\\n\\n  function getAddress(bytes32 key) external view returns (address);\\n\\n  function getString(bytes32 key) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xc3f6f2d80c27a1d5abbf6f6df55c96a315cdf7887b589c9ef5d45d036c56aa76\",\"license\":\"BSD-3-Clause\"},\"automates/utils/DFH/proxy/ERC1167.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable no-inline-assembly\\nlibrary ERC1167 {\\n  bytes public constant CLONE =\\n    hex\\\"363d3d373d3d3d363d73bebebebebebebebebebebebebebebebebebebebe5af43d82803e903d91602b57fd5bf3\\\";\\n\\n  /**\\n   * @notice Make new proxy contract.\\n   * @param impl Address prototype contract.\\n   * @return proxy Address new proxy contract.\\n   */\\n  function clone(address impl) external returns (address proxy) {\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(ptr, 0x14), shl(0x60, impl))\\n      mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      proxy := create(0, ptr, 0x37)\\n    }\\n    require(proxy != address(0), \\\"ERC1167: create failed\\\");\\n  }\\n\\n  /**\\n   * @notice Returns address of prototype contract for proxy.\\n   * @param proxy Address proxy contract.\\n   * @return impl Address prototype contract (current contract address if not proxy).\\n   */\\n  function implementation(address proxy) external view returns (address impl) {\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(proxy)\\n    }\\n\\n    impl = proxy;\\n    if (size <= 45 && size >= 41) {\\n      bool matches = true;\\n      uint256 i;\\n\\n      bytes memory code;\\n      assembly {\\n        code := mload(0x40)\\n        mstore(0x40, add(code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n        mstore(code, size)\\n        extcodecopy(proxy, add(code, 0x20), 0, size)\\n      }\\n      for (i = 0; matches && i < 9; i++) {\\n        matches = code[i] == CLONE[i];\\n      }\\n      for (i = 0; matches && i < 15; i++) {\\n        if (i == 4) {\\n          matches = code[code.length - i - 1] == bytes1(uint8(CLONE[45 - i - 1]) - uint8(45 - size));\\n        } else {\\n          matches = code[code.length - i - 1] == CLONE[45 - i - 1];\\n        }\\n      }\\n      if (code[9] != bytes1(0x73 - uint8(45 - size))) {\\n        matches = false;\\n      }\\n      uint256 forwardedToBuffer;\\n      if (matches) {\\n        assembly {\\n          forwardedToBuffer := mload(add(code, 30))\\n        }\\n        forwardedToBuffer &= (0x1 << (20 * 8)) - 1;\\n        impl = address(uint160(forwardedToBuffer >> ((45 - size) * 8)));\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x766f43e1832068a2a230f9bc19db0b190f638c4b0acb2dc689da07d43a45675f\",\"license\":\"BSD-3-Clause\"},\"automates/utils/ERC20Tools.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary ERC20Tools {\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 allowance = token.allowance(address(this), spender);\\n    if (allowance != 0 && allowance < value) {\\n      token.approve(spender, 0);\\n    }\\n    if (allowance != value) {\\n      token.approve(spender, value);\\n    }\\n  }\\n\\n  function safeApproveAll(IERC20 token, address spender) internal {\\n    safeApprove(token, spender, 2**256 - 1);\\n  }\\n}\\n\",\"keccak256\":\"0x099bc27ecc2cbc3474fca81003c55eac408130fb911f21364d9f3dec9afc0620\",\"license\":\"BSD-3-Clause\"},\"automates/utils/Synthetix/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IStaking {\\n  function rewardsToken() external view returns (address);\\n\\n  function stakingToken() external view returns (address);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function rewardsDuration() external view returns (uint256);\\n\\n  function periodFinish() external view returns (uint256);\\n\\n  function rewardRate() external view returns (uint256);\\n\\n  function balanceOf(address) external view returns (uint256);\\n\\n  function earned(address) external view returns (uint256);\\n\\n  function stake(uint256) external;\\n\\n  function getReward() external;\\n\\n  function withdraw(uint256) external;\\n\\n  function exit() external;\\n\\n  function notifyRewardAmount(uint256) external;\\n}\\n\",\"keccak256\":\"0x4cc0de8308a3a1669a7834d2d2f17329f9e046293945fdae377729d7882bb2b1\",\"license\":\"BSD-3-Clause\"},\"automates/utils/Uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\ninterface IUniswapV2Pair is IERC20 {\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function price0CumulativeLast() external view returns (uint256);\\n\\n  function price1CumulativeLast() external view returns (uint256);\\n\\n  function kLast() external view returns (uint256);\\n\\n  function mint(address to) external returns (uint256 liquidity);\\n\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n  function swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external;\\n}\\n\",\"keccak256\":\"0x562becce443b899cba13f76266d689bda17a0a1d457af045762848aa552037ac\",\"license\":\"BSD-3-Clause\"},\"automates/utils/Uniswap/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IUniswapV2Router02 {\\n  function factory() external view returns (address);\\n\\n  function WETH() external view returns (address);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 amountADesired,\\n    uint256 amountBDesired,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (\\n      uint256 amountA,\\n      uint256 amountB,\\n      uint256 liquidity\\n    );\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint256 amountTokenDesired,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    payable\\n    returns (\\n      uint256 amountToken,\\n      uint256 amountETH,\\n      uint256 liquidity\\n    );\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function swapExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactTokens(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactETHForTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactETH(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactTokensForETH(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapETHForExactTokens(\\n    uint256 amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) external pure returns (uint256 amountB);\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountOut);\\n\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountIn);\\n\\n  function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n  function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountETH);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountETH);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n}\\n\",\"keccak256\":\"0xf12b9639d5053651c2416527a638fd3168276feb207265374d87574a9a312f75\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516200238e3803806200238e8339810160408190526100319161005f565b600080546001600160a01b039092166001600160a01b0319928316179055600180549091163217905561008f565b60006020828403121561007157600080fd5b81516001600160a01b038116811461008857600080fd5b9392505050565b6122ef806200009f6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80635c975abb1161008c578063beabacc811610066578063beabacc8146101ba578063d0e30db0146101cd578063dd925551146101d5578063f2fde38b146101e857600080fd5b80635c975abb146101895780638456cb59146101a15780638da5cb5b146101a957600080fd5b80633e032a3b116100c85780633e032a3b146101515780633f4ba83a146101665780634cf088d91461016e578063590e1ae31461018157600080fd5b806307748e42146100ef57806329dcb0cf14610104578063370158ea14610131575b600080fd5b6101026100fd366004611e9f565b6101fb565b005b60025461011990600160b01b900461ffff1681565b60405161ffff90911681526020015b60405180910390f35b610139610299565b6040516001600160a01b039091168152602001610128565b60025461011990600160a01b900461ffff1681565b6101026103bb565b600254610139906001600160a01b031681565b6101026105bc565b61019161094e565b6040519015158152602001610128565b610102610a7e565b6001546001600160a01b0316610139565b6101026101c8366004611e5e565b610c82565b610102610d34565b6101026101e3366004611fcc565b610eca565b6101026101f6366004611e24565b61164a565b6001546001600160a01b031661022257600180546001600160a01b03191632179055610255565b6001546001600160a01b031633146102555760405162461bcd60e51b815260040161024c90612109565b60405180910390fd5b600280546001600160a01b03949094166001600160b01b031990941693909317600160a01b61ffff938416021761ffff60b01b1916600160b01b9190921602179055565b604051630d7100e360e31b8152306004820152600090819073892c0FdcE4D48E59e34Ed0bEe611BeCf988dF6a990636b8807189060240160206040518083038186803b1580156102e857600080fd5b505af41580156102fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103209190611e41565b90506001600160a01b0381163014156103445750506000546001600160a01b031690565b806001600160a01b031663370158ea6040518163ffffffff1660e01b815260040160206040518083038186803b15801561037d57600080fd5b505afa158015610391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b59190611e41565b91505090565b604051630d7100e360e31b815230600482018190529073892c0FdcE4D48E59e34Ed0bEe611BeCf988dF6a990636b8807189060240160206040518083038186803b15801561040857600080fd5b505af415801561041c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104409190611e41565b6001600160a01b03161415610538576000610459610299565b6040516321f8a72160e01b81527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf17597439560048201526001600160a01b0391909116906321f8a7219060240160206040518083038186803b1580156104ba57600080fd5b505afa1580156104ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f29190611e41565b6001549091506001600160a01b03163314806105165750336001600160a01b038216145b6105325760405162461bcd60e51b815260040161024c9061214a565b50610562565b6001546001600160a01b031633146105625760405162461bcd60e51b815260040161024c9061214a565b61056a61094e565b6105ad5760405162461bcd60e51b8152602060048201526014602482015273105d5d1bdb585d194e881b9bdd081c185d5cd95960621b604482015260640161024c565b6001805460ff60a01b19169055565b6001546001600160a01b031633146105e65760405162461bcd60e51b815260040161024c90612109565b600254604080516374fd6c7760e11b815290516001600160a01b0390921691829163e9fad8ee91600480830192600092919082900301818387803b15801561062d57600080fd5b505af1158015610641573d6000803e3d6000fd5b5050505060006106596001546001600160a01b031690565b90506000826001600160a01b03166372f702f36040518163ffffffff1660e01b815260040160206040518083038186803b15801561069657600080fd5b505afa1580156106aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ce9190611e41565b6040516370a0823160e01b81523060048201529091506001600160a01b0382169063a9059cbb90849083906370a082319060240160206040518083038186803b15801561071a57600080fd5b505afa15801561072e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107529190611fb3565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561079857600080fd5b505af11580156107ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d09190611f91565b506000836001600160a01b031663d1af0c7d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561080c57600080fd5b505afa158015610820573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108449190611e41565b6040516370a0823160e01b81523060048201529091506001600160a01b0382169063a9059cbb90859083906370a082319060240160206040518083038186803b15801561089057600080fd5b505afa1580156108a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c89190611fb3565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044015b602060405180830381600087803b15801561090f57600080fd5b505af1158015610923573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109479190611f91565b5050505050565b604051630d7100e360e31b8152306004820152600090819073892c0FdcE4D48E59e34Ed0bEe611BeCf988dF6a990636b8807189060240160206040518083038186803b15801561099d57600080fd5b505af41580156109b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d59190611e41565b90506001600160a01b0381163014156109fa575050600154600160a01b900460ff1690565b600154600160a01b900460ff16806103b55750806001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a4657600080fd5b505afa158015610a5a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b59190611f91565b604051630d7100e360e31b815230600482018190529073892c0FdcE4D48E59e34Ed0bEe611BeCf988dF6a990636b8807189060240160206040518083038186803b158015610acb57600080fd5b505af4158015610adf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b039190611e41565b6001600160a01b03161415610bfb576000610b1c610299565b6040516321f8a72160e01b81527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf17597439560048201526001600160a01b0391909116906321f8a7219060240160206040518083038186803b158015610b7d57600080fd5b505afa158015610b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb59190611e41565b6001549091506001600160a01b0316331480610bd95750336001600160a01b038216145b610bf55760405162461bcd60e51b815260040161024c9061214a565b50610c25565b6001546001600160a01b03163314610c255760405162461bcd60e51b815260040161024c9061214a565b610c2d61094e565b15610c6d5760405162461bcd60e51b815260206004820152601060248201526f105d5d1bdb585d194e881c185d5cd95960821b604482015260640161024c565b6001805460ff60a01b1916600160a01b179055565b6001546001600160a01b03163314610cac5760405162461bcd60e51b815260040161024c90612109565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b158015610cf657600080fd5b505af1158015610d0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2e9190611f91565b50505050565b6001546001600160a01b03163314610d5e5760405162461bcd60e51b815260040161024c90612109565b600254604080516372f702f360e01b815290516001600160a01b039092169160009183916372f702f391600480820192602092909190829003018186803b158015610da857600080fd5b505afa158015610dbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de09190611e41565b9050610df56001600160a01b038216836117ab565b6040516370a0823160e01b81523060048201526001600160a01b038084169163a694fc3a918416906370a082319060240160206040518083038186803b158015610e3e57600080fd5b505afa158015610e52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e769190611fb3565b6040518263ffffffff1660e01b8152600401610e9491815260200190565b600060405180830381600087803b158015610eae57600080fd5b505af1158015610ec2573d6000803e3d6000fd5b505050505050565b826040518060400160405280601d81526020017f426f6e646170706574697453796e7468657469784c5052657374616b65000000815250610f0b82826117bc565b506002546040516246613160e11b81523060048201526001600160a01b03909116906000908290628cc2629060240160206040518083038186803b158015610f5257600080fd5b505afa158015610f66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8a9190611fb3565b11610fe95760405162461bcd60e51b815260206004820152602960248201527f53796e746865746978556e69737761704c7052657374616b653a3a72756e3a206044820152681b9bc819585c9b995960ba1b606482015260840161024c565b6000610ff3610299565b6040516321f8a72160e01b81527fa446c21f636a27494eaafaffc073cc3325d32c4efaa774c3f2a297ebef86980360048201526001600160a01b0391909116906321f8a7219060240160206040518083038186803b15801561105457600080fd5b505afa158015611068573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108c9190611e41565b90506001600160a01b0381166111145760405162461bcd60e51b815260206004820152604160248201527f53796e746865746978556e69737761704c7052657374616b653a3a72756e3a2060448201527f756e697377617020726f7574657220636f6e7472616374206e6f7420666f756e6064820152601960fa1b608482015260a40161024c565b816001600160a01b0316633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561114f57600080fd5b505af1158015611163573d6000803e3d6000fd5b505050506000826001600160a01b031663d1af0c7d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111a257600080fd5b505afa1580156111b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111da9190611e41565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b15801561121f57600080fd5b505afa158015611233573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112579190611fb3565b905061126c6001600160a01b038316846117ab565b6000846001600160a01b03166372f702f36040518163ffffffff1660e01b815260040160206040518083038186803b1580156112a757600080fd5b505afa1580156112bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112df9190611e41565b905060006040518060400160405280836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561132757600080fd5b505afa15801561133b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135f9190611e41565b6001600160a01b03166001600160a01b03168152602001836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156113af57600080fd5b505afa1580156113c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e79190611e41565b6001600160a01b039081169091526040805160e0810182528883166080820190815288841660a0830152845190931660c0820152815180830190925292935060009291829161145391908061143d60028b61222e565b81526020018f60005b602002015190528f611a78565b81526020016114e660405180606001604052808a6001600160a01b03166001600160a01b03168152602001896001600160a01b03166001600160a01b03168152602001866001600281106114a9576114a9612275565b60200201516001600160a01b0316905260408051808201909152806114cf60028b61222e565b6114d9908b612250565b81526020018f6001611446565b815260200160008152602001600081525090506115586040518060600160405280886001600160a01b03166001600160a01b031681526020018460006002811061153257611532612275565b602090810291909101516001600160a01b0390811683528682015116910152828d611bee565b61156b6001600160a01b038416886117ab565b6040516370a0823160e01b81523060048201526001600160a01b038089169163a694fc3a918616906370a082319060240160206040518083038186803b1580156115b457600080fd5b505afa1580156115c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ec9190611fb3565b6040518263ffffffff1660e01b815260040161160a91815260200190565b600060405180830381600087803b15801561162457600080fd5b505af1158015611638573d6000803e3d6000fd5b50505050505050505050505050505050565b6001546001600160a01b031633146116745760405162461bcd60e51b815260040161024c90612109565b604051630d7100e360e31b815230600482018190529073892c0FdcE4D48E59e34Ed0bEe611BeCf988dF6a990636b8807189060240160206040518083038186803b1580156116c157600080fd5b505af41580156116d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f99190611e41565b6001600160a01b0316146117595760405162461bcd60e51b815260206004820152602160248201527f4175746f6d6174653a206368616e676520746865206f776e6572206661696c656044820152601960fa1b606482015260840161024c565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6117b88282600019611cb5565b5050565b60006117c661094e565b156118065760405162461bcd60e51b815260206004820152601060248201526f105d5d1bdb585d194e881c185d5cd95960821b604482015260640161024c565b600061181a6001546001600160a01b031690565b9050326001600160a01b0382161415611837576000915050611a72565b6000611841610299565b6040516321f8a72160e01b81527fe78c16c6d839536d3155985aab4e9c6013c8c3d446054bcebc48612f359d81f560048201529091506000906001600160a01b038316906321f8a7219060240160206040518083038186803b1580156118a657600080fd5b505afa1580156118ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118de9190611e41565b90506001600160a01b03811661194a5760405162461bcd60e51b815260206004820152602b60248201527f4175746f6d6174653a3a5f62696c6c3a2062616c616e636520636f6e7472616360448201526a1d081b9bdd08199bdd5b9960aa1b606482015260840161024c565b60405163bd02d0f560e01b81527fa93d95f96a5de25d7a41ddf1f5e8d45cfc929c4838163cf011dab4043a4a40d560048201526000906001600160a01b0384169063bd02d0f59060240160206040518083038186803b1580156119ac57600080fd5b505afa1580156119c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e49190611fb3565b60405163e578a22560e01b81529091506001600160a01b0383169063e578a22590611a199087908b9086908c90600401612096565b602060405180830381600087803b158015611a3357600080fd5b505af1158015611a47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6b9190611fb3565b9450505050505b92915050565b604083015160208401516000916001600160a01b0391821691161415611aa057508151611be7565b604080516002808252606082018352600092602083019080368337019050509050846001602002015181600081518110611adc57611adc612275565b6001600160a01b0390921660209283029190910190910152846002602002015181600181518110611b0f57611b0f612275565b6001600160a01b03928316602091820292909201015285516040870151611b379216906117ab565b8451845160208601516040516338ed173960e01b81526001600160a01b03909316926338ed173992611b73929091869030908a9060040161218c565b600060405180830381600087803b158015611b8d57600080fd5b505af1158015611ba1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611bc99190810190611ee4565b600181518110611bdb57611bdb612275565b60200260200101519150505b9392505050565b8251602080850151604080870151865193870151878301516060890151935162e8e33760e81b81526001600160a01b039586166004820152928516602484015260448301959095526064820152608481019390935260a48301523060c483015260e482018490529091169063e8e337009061010401606060405180830381600087803b158015611c7d57600080fd5b505af1158015611c91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec29190612068565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e9060440160206040518083038186803b158015611d0057600080fd5b505afa158015611d14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d389190611fb3565b90508015801590611d4857508181105b15611dd15760405163095ea7b360e01b81526001600160a01b0384811660048301526000602483015285169063095ea7b390604401602060405180830381600087803b158015611d9757600080fd5b505af1158015611dab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dcf9190611f91565b505b818114610d2e5760405163095ea7b360e01b81526001600160a01b0384811660048301526024820184905285169063095ea7b3906044016108f5565b803561ffff81168114611e1f57600080fd5b919050565b600060208284031215611e3657600080fd5b8135611be7816122a1565b600060208284031215611e5357600080fd5b8151611be7816122a1565b600080600060608486031215611e7357600080fd5b8335611e7e816122a1565b92506020840135611e8e816122a1565b929592945050506040919091013590565b600080600060608486031215611eb457600080fd5b8335611ebf816122a1565b9250611ecd60208501611e0d565b9150611edb60408501611e0d565b90509250925092565b60006020808385031215611ef757600080fd5b825167ffffffffffffffff80821115611f0f57600080fd5b818501915085601f830112611f2357600080fd5b815181811115611f3557611f3561228b565b8060051b9150611f468483016121fd565b8181528481019084860184860187018a1015611f6157600080fd5b600095505b83861015611f84578051835260019590950194918601918601611f66565b5098975050505050505050565b600060208284031215611fa357600080fd5b81518015158114611be757600080fd5b600060208284031215611fc557600080fd5b5051919050565b600080600060808486031215611fe157600080fd5b83359250602080850135925085605f860112611ffc57600080fd5b6040516040810181811067ffffffffffffffff8211171561201f5761201f61228b565b806040525080604087018860808901111561203957600080fd5b60005b60028110156120595781358352918401919084019060010161203c565b50505080925050509250925092565b60008060006060848603121561207d57600080fd5b8351925060208401519150604084015190509250925092565b60018060a01b038516815260006020858184015284604084015260806060840152835180608085015260005b818110156120de5785810183015185820160a0015282016120c2565b818111156120f057600060a083870101525b50601f01601f19169290920160a0019695505050505050565b60208082526021908201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e656040820152603960f91b606082015260800190565b60208082526022908201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360408201526132b960f11b606082015260800190565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156121dc5784516001600160a01b0316835293830193918301916001016121b7565b50506001600160a01b03969096166060850152505050608001529392505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156122265761222661228b565b604052919050565b60008261224b57634e487b7160e01b600052601260045260246000fd5b500490565b60008282101561227057634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146122b657600080fd5b5056fea2646970667358221220aa4db43a381702fa517e2520c7175cdb45778da426445d7e70a6a64424db654164736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80635c975abb1161008c578063beabacc811610066578063beabacc8146101ba578063d0e30db0146101cd578063dd925551146101d5578063f2fde38b146101e857600080fd5b80635c975abb146101895780638456cb59146101a15780638da5cb5b146101a957600080fd5b80633e032a3b116100c85780633e032a3b146101515780633f4ba83a146101665780634cf088d91461016e578063590e1ae31461018157600080fd5b806307748e42146100ef57806329dcb0cf14610104578063370158ea14610131575b600080fd5b6101026100fd366004611e9f565b6101fb565b005b60025461011990600160b01b900461ffff1681565b60405161ffff90911681526020015b60405180910390f35b610139610299565b6040516001600160a01b039091168152602001610128565b60025461011990600160a01b900461ffff1681565b6101026103bb565b600254610139906001600160a01b031681565b6101026105bc565b61019161094e565b6040519015158152602001610128565b610102610a7e565b6001546001600160a01b0316610139565b6101026101c8366004611e5e565b610c82565b610102610d34565b6101026101e3366004611fcc565b610eca565b6101026101f6366004611e24565b61164a565b6001546001600160a01b031661022257600180546001600160a01b03191632179055610255565b6001546001600160a01b031633146102555760405162461bcd60e51b815260040161024c90612109565b60405180910390fd5b600280546001600160a01b03949094166001600160b01b031990941693909317600160a01b61ffff938416021761ffff60b01b1916600160b01b9190921602179055565b604051630d7100e360e31b8152306004820152600090819073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b1580156102e857600080fd5b505af41580156102fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103209190611e41565b90506001600160a01b0381163014156103445750506000546001600160a01b031690565b806001600160a01b031663370158ea6040518163ffffffff1660e01b815260040160206040518083038186803b15801561037d57600080fd5b505afa158015610391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b59190611e41565b91505090565b604051630d7100e360e31b815230600482018190529073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b15801561040857600080fd5b505af415801561041c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104409190611e41565b6001600160a01b03161415610538576000610459610299565b6040516321f8a72160e01b81527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf17597439560048201526001600160a01b0391909116906321f8a7219060240160206040518083038186803b1580156104ba57600080fd5b505afa1580156104ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f29190611e41565b6001549091506001600160a01b03163314806105165750336001600160a01b038216145b6105325760405162461bcd60e51b815260040161024c9061214a565b50610562565b6001546001600160a01b031633146105625760405162461bcd60e51b815260040161024c9061214a565b61056a61094e565b6105ad5760405162461bcd60e51b8152602060048201526014602482015273105d5d1bdb585d194e881b9bdd081c185d5cd95960621b604482015260640161024c565b6001805460ff60a01b19169055565b6001546001600160a01b031633146105e65760405162461bcd60e51b815260040161024c90612109565b600254604080516374fd6c7760e11b815290516001600160a01b0390921691829163e9fad8ee91600480830192600092919082900301818387803b15801561062d57600080fd5b505af1158015610641573d6000803e3d6000fd5b5050505060006106596001546001600160a01b031690565b90506000826001600160a01b03166372f702f36040518163ffffffff1660e01b815260040160206040518083038186803b15801561069657600080fd5b505afa1580156106aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ce9190611e41565b6040516370a0823160e01b81523060048201529091506001600160a01b0382169063a9059cbb90849083906370a082319060240160206040518083038186803b15801561071a57600080fd5b505afa15801561072e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107529190611fb3565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561079857600080fd5b505af11580156107ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d09190611f91565b506000836001600160a01b031663d1af0c7d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561080c57600080fd5b505afa158015610820573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108449190611e41565b6040516370a0823160e01b81523060048201529091506001600160a01b0382169063a9059cbb90859083906370a082319060240160206040518083038186803b15801561089057600080fd5b505afa1580156108a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c89190611fb3565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044015b602060405180830381600087803b15801561090f57600080fd5b505af1158015610923573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109479190611f91565b5050505050565b604051630d7100e360e31b8152306004820152600090819073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b15801561099d57600080fd5b505af41580156109b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d59190611e41565b90506001600160a01b0381163014156109fa575050600154600160a01b900460ff1690565b600154600160a01b900460ff16806103b55750806001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a4657600080fd5b505afa158015610a5a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b59190611f91565b604051630d7100e360e31b815230600482018190529073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b158015610acb57600080fd5b505af4158015610adf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b039190611e41565b6001600160a01b03161415610bfb576000610b1c610299565b6040516321f8a72160e01b81527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf17597439560048201526001600160a01b0391909116906321f8a7219060240160206040518083038186803b158015610b7d57600080fd5b505afa158015610b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb59190611e41565b6001549091506001600160a01b0316331480610bd95750336001600160a01b038216145b610bf55760405162461bcd60e51b815260040161024c9061214a565b50610c25565b6001546001600160a01b03163314610c255760405162461bcd60e51b815260040161024c9061214a565b610c2d61094e565b15610c6d5760405162461bcd60e51b815260206004820152601060248201526f105d5d1bdb585d194e881c185d5cd95960821b604482015260640161024c565b6001805460ff60a01b1916600160a01b179055565b6001546001600160a01b03163314610cac5760405162461bcd60e51b815260040161024c90612109565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b158015610cf657600080fd5b505af1158015610d0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2e9190611f91565b50505050565b6001546001600160a01b03163314610d5e5760405162461bcd60e51b815260040161024c90612109565b600254604080516372f702f360e01b815290516001600160a01b039092169160009183916372f702f391600480820192602092909190829003018186803b158015610da857600080fd5b505afa158015610dbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de09190611e41565b9050610df56001600160a01b038216836117ab565b6040516370a0823160e01b81523060048201526001600160a01b038084169163a694fc3a918416906370a082319060240160206040518083038186803b158015610e3e57600080fd5b505afa158015610e52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e769190611fb3565b6040518263ffffffff1660e01b8152600401610e9491815260200190565b600060405180830381600087803b158015610eae57600080fd5b505af1158015610ec2573d6000803e3d6000fd5b505050505050565b826040518060400160405280601d81526020017f426f6e646170706574697453796e7468657469784c5052657374616b65000000815250610f0b82826117bc565b506002546040516246613160e11b81523060048201526001600160a01b03909116906000908290628cc2629060240160206040518083038186803b158015610f5257600080fd5b505afa158015610f66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8a9190611fb3565b11610fe95760405162461bcd60e51b815260206004820152602960248201527f53796e746865746978556e69737761704c7052657374616b653a3a72756e3a206044820152681b9bc819585c9b995960ba1b606482015260840161024c565b6000610ff3610299565b6040516321f8a72160e01b81527fa446c21f636a27494eaafaffc073cc3325d32c4efaa774c3f2a297ebef86980360048201526001600160a01b0391909116906321f8a7219060240160206040518083038186803b15801561105457600080fd5b505afa158015611068573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108c9190611e41565b90506001600160a01b0381166111145760405162461bcd60e51b815260206004820152604160248201527f53796e746865746978556e69737761704c7052657374616b653a3a72756e3a2060448201527f756e697377617020726f7574657220636f6e7472616374206e6f7420666f756e6064820152601960fa1b608482015260a40161024c565b816001600160a01b0316633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561114f57600080fd5b505af1158015611163573d6000803e3d6000fd5b505050506000826001600160a01b031663d1af0c7d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111a257600080fd5b505afa1580156111b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111da9190611e41565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b15801561121f57600080fd5b505afa158015611233573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112579190611fb3565b905061126c6001600160a01b038316846117ab565b6000846001600160a01b03166372f702f36040518163ffffffff1660e01b815260040160206040518083038186803b1580156112a757600080fd5b505afa1580156112bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112df9190611e41565b905060006040518060400160405280836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561132757600080fd5b505afa15801561133b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135f9190611e41565b6001600160a01b03166001600160a01b03168152602001836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156113af57600080fd5b505afa1580156113c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e79190611e41565b6001600160a01b039081169091526040805160e0810182528883166080820190815288841660a0830152845190931660c0820152815180830190925292935060009291829161145391908061143d60028b61222e565b81526020018f60005b602002015190528f611a78565b81526020016114e660405180606001604052808a6001600160a01b03166001600160a01b03168152602001896001600160a01b03166001600160a01b03168152602001866001600281106114a9576114a9612275565b60200201516001600160a01b0316905260408051808201909152806114cf60028b61222e565b6114d9908b612250565b81526020018f6001611446565b815260200160008152602001600081525090506115586040518060600160405280886001600160a01b03166001600160a01b031681526020018460006002811061153257611532612275565b602090810291909101516001600160a01b0390811683528682015116910152828d611bee565b61156b6001600160a01b038416886117ab565b6040516370a0823160e01b81523060048201526001600160a01b038089169163a694fc3a918616906370a082319060240160206040518083038186803b1580156115b457600080fd5b505afa1580156115c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ec9190611fb3565b6040518263ffffffff1660e01b815260040161160a91815260200190565b600060405180830381600087803b15801561162457600080fd5b505af1158015611638573d6000803e3d6000fd5b50505050505050505050505050505050565b6001546001600160a01b031633146116745760405162461bcd60e51b815260040161024c90612109565b604051630d7100e360e31b815230600482018190529073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b1580156116c157600080fd5b505af41580156116d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f99190611e41565b6001600160a01b0316146117595760405162461bcd60e51b815260206004820152602160248201527f4175746f6d6174653a206368616e676520746865206f776e6572206661696c656044820152601960fa1b606482015260840161024c565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6117b88282600019611cb5565b5050565b60006117c661094e565b156118065760405162461bcd60e51b815260206004820152601060248201526f105d5d1bdb585d194e881c185d5cd95960821b604482015260640161024c565b600061181a6001546001600160a01b031690565b9050326001600160a01b0382161415611837576000915050611a72565b6000611841610299565b6040516321f8a72160e01b81527fe78c16c6d839536d3155985aab4e9c6013c8c3d446054bcebc48612f359d81f560048201529091506000906001600160a01b038316906321f8a7219060240160206040518083038186803b1580156118a657600080fd5b505afa1580156118ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118de9190611e41565b90506001600160a01b03811661194a5760405162461bcd60e51b815260206004820152602b60248201527f4175746f6d6174653a3a5f62696c6c3a2062616c616e636520636f6e7472616360448201526a1d081b9bdd08199bdd5b9960aa1b606482015260840161024c565b60405163bd02d0f560e01b81527fa93d95f96a5de25d7a41ddf1f5e8d45cfc929c4838163cf011dab4043a4a40d560048201526000906001600160a01b0384169063bd02d0f59060240160206040518083038186803b1580156119ac57600080fd5b505afa1580156119c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e49190611fb3565b60405163e578a22560e01b81529091506001600160a01b0383169063e578a22590611a199087908b9086908c90600401612096565b602060405180830381600087803b158015611a3357600080fd5b505af1158015611a47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6b9190611fb3565b9450505050505b92915050565b604083015160208401516000916001600160a01b0391821691161415611aa057508151611be7565b604080516002808252606082018352600092602083019080368337019050509050846001602002015181600081518110611adc57611adc612275565b6001600160a01b0390921660209283029190910190910152846002602002015181600181518110611b0f57611b0f612275565b6001600160a01b03928316602091820292909201015285516040870151611b379216906117ab565b8451845160208601516040516338ed173960e01b81526001600160a01b03909316926338ed173992611b73929091869030908a9060040161218c565b600060405180830381600087803b158015611b8d57600080fd5b505af1158015611ba1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611bc99190810190611ee4565b600181518110611bdb57611bdb612275565b60200260200101519150505b9392505050565b8251602080850151604080870151865193870151878301516060890151935162e8e33760e81b81526001600160a01b039586166004820152928516602484015260448301959095526064820152608481019390935260a48301523060c483015260e482018490529091169063e8e337009061010401606060405180830381600087803b158015611c7d57600080fd5b505af1158015611c91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec29190612068565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e9060440160206040518083038186803b158015611d0057600080fd5b505afa158015611d14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d389190611fb3565b90508015801590611d4857508181105b15611dd15760405163095ea7b360e01b81526001600160a01b0384811660048301526000602483015285169063095ea7b390604401602060405180830381600087803b158015611d9757600080fd5b505af1158015611dab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dcf9190611f91565b505b818114610d2e5760405163095ea7b360e01b81526001600160a01b0384811660048301526024820184905285169063095ea7b3906044016108f5565b803561ffff81168114611e1f57600080fd5b919050565b600060208284031215611e3657600080fd5b8135611be7816122a1565b600060208284031215611e5357600080fd5b8151611be7816122a1565b600080600060608486031215611e7357600080fd5b8335611e7e816122a1565b92506020840135611e8e816122a1565b929592945050506040919091013590565b600080600060608486031215611eb457600080fd5b8335611ebf816122a1565b9250611ecd60208501611e0d565b9150611edb60408501611e0d565b90509250925092565b60006020808385031215611ef757600080fd5b825167ffffffffffffffff80821115611f0f57600080fd5b818501915085601f830112611f2357600080fd5b815181811115611f3557611f3561228b565b8060051b9150611f468483016121fd565b8181528481019084860184860187018a1015611f6157600080fd5b600095505b83861015611f84578051835260019590950194918601918601611f66565b5098975050505050505050565b600060208284031215611fa357600080fd5b81518015158114611be757600080fd5b600060208284031215611fc557600080fd5b5051919050565b600080600060808486031215611fe157600080fd5b83359250602080850135925085605f860112611ffc57600080fd5b6040516040810181811067ffffffffffffffff8211171561201f5761201f61228b565b806040525080604087018860808901111561203957600080fd5b60005b60028110156120595781358352918401919084019060010161203c565b50505080925050509250925092565b60008060006060848603121561207d57600080fd5b8351925060208401519150604084015190509250925092565b60018060a01b038516815260006020858184015284604084015260806060840152835180608085015260005b818110156120de5785810183015185820160a0015282016120c2565b818111156120f057600060a083870101525b50601f01601f19169290920160a0019695505050505050565b60208082526021908201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e656040820152603960f91b606082015260800190565b60208082526022908201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360408201526132b960f11b606082015260800190565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156121dc5784516001600160a01b0316835293830193918301916001016121b7565b50506001600160a01b03969096166060850152505050608001529392505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156122265761222661228b565b604052919050565b60008261224b57634e487b7160e01b600052601260045260246000fd5b500490565b60008282101561227057634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146122b657600080fd5b5056fea2646970667358221220aa4db43a381702fa517e2520c7175cdb45778da426445d7e70a6a64424db654164736f6c63430008060033",
  "libraries": {
    "ERC1167": "0x892c0FdcE4D48E59e34Ed0bEe611BeCf988dF6a9"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "transfer(address,address,uint256)": {
        "params": {
          "amount": "Transferred amount of tokens.",
          "recipient": "Token recipient address.",
          "token": "The address of the token to be transferred."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "info()": {
        "notice": "Returns address of Storage contract."
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "pause()": {
        "notice": "Pause contract."
      },
      "paused()": {
        "notice": "Returns true if the contract is paused, and false otherwise."
      },
      "transfer(address,address,uint256)": {
        "notice": "Transfer ERC20 token to recipient."
      },
      "unpause()": {
        "notice": "Unpause contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1739,
        "contract": "automates/bondappetit/SynthetixUniswapLpRestake.automate.sol:SynthetixUniswapLpRestake",
        "label": "_info",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1742,
        "contract": "automates/bondappetit/SynthetixUniswapLpRestake.automate.sol:SynthetixUniswapLpRestake",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1745,
        "contract": "automates/bondappetit/SynthetixUniswapLpRestake.automate.sol:SynthetixUniswapLpRestake",
        "label": "_paused",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 777,
        "contract": "automates/bondappetit/SynthetixUniswapLpRestake.automate.sol:SynthetixUniswapLpRestake",
        "label": "staking",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IStaking)2700"
      },
      {
        "astId": 779,
        "contract": "automates/bondappetit/SynthetixUniswapLpRestake.automate.sol:SynthetixUniswapLpRestake",
        "label": "slippage",
        "offset": 20,
        "slot": "2",
        "type": "t_uint16"
      },
      {
        "astId": 781,
        "contract": "automates/bondappetit/SynthetixUniswapLpRestake.automate.sol:SynthetixUniswapLpRestake",
        "label": "deadline",
        "offset": 22,
        "slot": "2",
        "type": "t_uint16"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IStaking)2700": {
        "encoding": "inplace",
        "label": "contract IStaking",
        "numberOfBytes": "20"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      }
    }
  }
}
{
  "address": "0x15089FAD4e5a8332c3219Aa81DA4a4089B3C21bD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_info",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "protocolFee",
          "type": "int256"
        }
      ],
      "name": "ProtocolFeeChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "__protocolFee",
          "type": "int256"
        }
      ],
      "name": "changeProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deadline",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "info",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_slippage",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_deadline",
          "type": "uint16"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gasFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256[2]",
          "name": "_outMin",
          "type": "uint256[2]"
        }
      ],
      "name": "run",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippage",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract IStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdf7027c62f1145147b0ff015285dfafb40a2d42b79a17f5302ce02d29bcd9f2b",
  "receipt": {
    "to": null,
    "from": "0x9403932015576D13Fb26B135ed7a35d5d95C18d4",
    "contractAddress": "0x15089FAD4e5a8332c3219Aa81DA4a4089B3C21bD",
    "transactionIndex": 1,
    "gasUsed": "2360918",
    "logsBloom": "0x
    "blockHash": "0xc299aafd4ed48b585101ad1173018ad39280f0ef3a2f68675219dcdbf397c8e3",
    "transactionHash": "0xdf7027c62f1145147b0ff015285dfafb40a2d42b79a17f5302ce02d29bcd9f2b",
    "logs": [],
    "blockNumber": 11168325,
    "cumulativeGasUsed": "2381918",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4346c51F818B776116Ae39c857DdD07269a5CaD"
  ],
  "solcInputHash": "fe7f78fe34bf8e76c63d8aa702a6568f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_info\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"protocolFee\",\"type\":\"int256\"}],\"name\":\"ProtocolFeeChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"__protocolFee\",\"type\":\"int256\"}],\"name\":\"changeProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"info\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_slippage\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_deadline\",\"type\":\"uint16\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"_outMin\",\"type\":\"uint256[2]\"}],\"name\":\"run\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"changeProtocolFee(int256)\":{\"params\":{\"__protocolFee\":\"New protocol fee.\"}},\"protocolFee()\":{\"returns\":{\"_0\":\"Current protocol fee.\"}},\"transfer(address,address,uint256)\":{\"params\":{\"amount\":\"Transferred amount of tokens.\",\"recipient\":\"Token recipient address.\",\"token\":\"The address of the token to be transferred.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeProtocolFee(int256)\":{\"notice\":\"Change protocol fee.\"},\"info()\":{\"notice\":\"Returns address of Storage contract.\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"pause()\":{\"notice\":\"Pause contract.\"},\"paused()\":{\"notice\":\"Returns true if the contract is paused, and false otherwise.\"},\"transfer(address,address,uint256)\":{\"notice\":\"Transfer ERC20 token to recipient.\"},\"unpause()\":{\"notice\":\"Unpause contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"automates/bondappetit/SynthetixUniswapLpRestake.automate.sol\":\"SynthetixUniswapLpRestake\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"automates/bondappetit/SynthetixUniswapLpRestake.automate.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../utils/DFH/Automate.sol\\\";\\nimport \\\"../utils/DFH/IStorage.sol\\\";\\nimport \\\"../utils/Uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"../utils/Uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"../utils/Synthetix/IStaking.sol\\\";\\nimport {ERC20Tools} from \\\"../utils/ERC20Tools.sol\\\";\\n\\n// solhint-disable not-rely-on-time\\ncontract SynthetixUniswapLpRestake is Automate {\\n  using ERC20Tools for IERC20;\\n\\n  IStaking public staking;\\n\\n  uint16 public slippage;\\n\\n  uint16 public deadline;\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor(address _info) Automate(_info) {}\\n\\n  function init(\\n    address _staking,\\n    uint16 _slippage,\\n    uint16 _deadline\\n  ) external initializer {\\n    staking = IStaking(_staking);\\n    slippage = _slippage;\\n    deadline = _deadline;\\n  }\\n\\n  function deposit() external onlyOwner {\\n    IStaking _staking = staking; // gas optimisation\\n    address stakingToken = _staking.stakingToken();\\n    IERC20(stakingToken).safeApproveAll(address(_staking));\\n    _staking.stake(IERC20(stakingToken).balanceOf(address(this)));\\n  }\\n\\n  function refund() external onlyOwner {\\n    IStaking _staking = staking; // gas optimisation\\n    _staking.exit();\\n\\n    address __owner = owner(); // gas optimisation\\n    IERC20 stakingToken = IERC20(_staking.stakingToken());\\n    stakingToken.transfer(__owner, stakingToken.balanceOf(address(this)));\\n\\n    IERC20 rewardToken = IERC20(_staking.rewardsToken());\\n    rewardToken.transfer(__owner, rewardToken.balanceOf(address(this)));\\n  }\\n\\n  function _swap(\\n    address[3] memory path,\\n    uint256[2] memory amount,\\n    uint256 _deadline\\n  ) internal returns (uint256) {\\n    if (path[1] == path[2]) return amount[0];\\n\\n    address[] memory _path = new address[](2);\\n    _path[0] = path[1];\\n    _path[1] = path[2];\\n\\n    IERC20(path[2]).safeApproveAll(path[0]); // For add liquidity call\\n    return\\n      IUniswapV2Router02(path[0]).swapExactTokensForTokens(amount[0], amount[1], _path, address(this), _deadline)[1];\\n  }\\n\\n  function _addLiquidity(\\n    address[3] memory path,\\n    uint256[4] memory amount,\\n    uint256 _deadline\\n  ) internal {\\n    IUniswapV2Router02(path[0]).addLiquidity(\\n      path[1],\\n      path[2],\\n      amount[0],\\n      amount[1],\\n      amount[2],\\n      amount[3],\\n      address(this),\\n      _deadline\\n    );\\n  }\\n\\n  function run(\\n    uint256 gasFee,\\n    uint256 _deadline,\\n    uint256[2] memory _outMin\\n  ) external bill(gasFee, \\\"BondappetitSynthetixLPRestake\\\") {\\n    IStaking _staking = staking; // gas optimization\\n    require(_staking.earned(address(this)) > 0, \\\"SynthetixUniswapLpRestake::run: no earned\\\");\\n    address router = IStorage(info()).getAddress(keccak256(\\\"UniswapV2:Contract:Router2\\\"));\\n    require(router != address(0), \\\"SynthetixUniswapLpRestake::run: uniswap router contract not found\\\");\\n\\n    _staking.getReward();\\n    address rewardToken = _staking.rewardsToken();\\n    uint256 rewardAmount = IERC20(rewardToken).balanceOf(address(this));\\n    IERC20(rewardToken).safeApproveAll(router);\\n\\n    IUniswapV2Pair stakingToken = IUniswapV2Pair(_staking.stakingToken());\\n    address[2] memory tokens = [stakingToken.token0(), stakingToken.token1()];\\n    uint256[4] memory amount = [\\n      _swap([router, rewardToken, tokens[0]], [rewardAmount / 2, _outMin[0]], _deadline),\\n      _swap([router, rewardToken, tokens[1]], [rewardAmount - rewardAmount / 2, _outMin[1]], _deadline),\\n      0,\\n      0\\n    ];\\n\\n    _addLiquidity([router, tokens[0], tokens[1]], amount, _deadline);\\n    IERC20(stakingToken).safeApproveAll(address(_staking));\\n    _staking.stake(IERC20(stakingToken).balanceOf(address(this)));\\n  }\\n}\\n\",\"keccak256\":\"0x330cb90903cbf1c538cf96e4e52fcce166dbb0fdc8e88bcb2cff7101381f2032\",\"license\":\"BSD-3-Clause\"},\"automates/utils/DFH/Automate.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./proxy/ERC1167.sol\\\";\\nimport \\\"./IStorage.sol\\\";\\nimport \\\"./IBalance.sol\\\";\\n\\n// solhint-disable avoid-tx-origin\\nabstract contract Automate {\\n  using ERC1167 for address;\\n\\n  /// @notice Storage contract address.\\n  address internal _info;\\n\\n  /// @notice Contract owner.\\n  address internal _owner;\\n\\n  /// @notice Is contract paused.\\n  bool internal _paused;\\n\\n  /// @notice Protocol fee in USD (-1 if value in global storage).\\n  int256 internal _protocolFee;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  event ProtocolFeeChanged(int256 protocolFee);\\n\\n  constructor(address __info) {\\n    _info = __info;\\n    _owner = tx.origin;\\n    _protocolFee = -1;\\n  }\\n\\n  /**\\n   * @notice Returns address of Storage contract.\\n   */\\n  function info() public view returns (address) {\\n    address impl = address(this).implementation();\\n    if (impl == address(this)) return _info;\\n\\n    return Automate(impl).info();\\n  }\\n\\n  /// @dev Modifier to protect an initializer function from being invoked twice.\\n  modifier initializer() {\\n    if (_owner == address(0)) {\\n      _owner = tx.origin;\\n      _protocolFee = -1;\\n    } else {\\n      require(_owner == msg.sender, \\\"Automate: caller is not the owner\\\");\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(_owner == msg.sender, \\\"Automate: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external onlyOwner {\\n    require(address(this).implementation() == address(this), \\\"Automate: change the owner failed\\\");\\n\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the pauser.\\n   */\\n  modifier onlyPauser() {\\n    if (address(this).implementation() == address(this)) {\\n      address pauser = IStorage(info()).getAddress(keccak256(\\\"DFH:Pauser\\\"));\\n      require(msg.sender == _owner || msg.sender == pauser, \\\"Automate: caller is not the pauser\\\");\\n    } else {\\n      require(msg.sender == _owner, \\\"Automate: caller is not the pauser\\\");\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Returns true if the contract is paused, and false otherwise.\\n   */\\n  function paused() public view returns (bool) {\\n    address impl = address(this).implementation();\\n    if (impl == address(this)) return _paused;\\n\\n    return _paused || Automate(impl).paused();\\n  }\\n\\n  /**\\n   * @dev Throws if contract paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused(), \\\"Automate: not paused\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Throws if contract unpaused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused(), \\\"Automate: paused\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Pause contract.\\n   */\\n  function pause() external onlyPauser whenNotPaused {\\n    _paused = true;\\n  }\\n\\n  /**\\n   * @notice Unpause contract.\\n   */\\n  function unpause() external onlyPauser whenPaused {\\n    _paused = false;\\n  }\\n\\n  /**\\n   * @return Current protocol fee.\\n   */\\n  function protocolFee() public view returns (uint256) {\\n    address impl = address(this).implementation();\\n    if (impl != address(this) && _protocolFee < 0) {\\n      return Automate(impl).protocolFee();\\n    }\\n\\n    IStorage __info = IStorage(info());\\n    uint256 feeOnUSD = _protocolFee < 0 ? __info.getUint(keccak256(\\\"DFH:Fee:Automate\\\")) : uint256(_protocolFee);\\n    if (feeOnUSD == 0) return 0;\\n\\n    (, int256 price, , , ) = AggregatorV3Interface(__info.getAddress(keccak256(\\\"DFH:Fee:PriceFeed\\\"))).latestRoundData();\\n    require(price > 0, \\\"Automate: invalid price\\\");\\n\\n    return (feeOnUSD * 1e18) / uint256(price);\\n  }\\n\\n  /**\\n   * @notice Change protocol fee.\\n   * @param __protocolFee New protocol fee.\\n   */\\n  function changeProtocolFee(int256 __protocolFee) external {\\n    address impl = address(this).implementation();\\n    require(\\n      (impl == address(this) ? _owner : Automate(impl).owner()) == msg.sender,\\n      \\\"Automate::changeProtocolFee: caller is not the protocol owner\\\"\\n    );\\n\\n    _protocolFee = __protocolFee;\\n    emit ProtocolFeeChanged(__protocolFee);\\n  }\\n\\n  /**\\n   * @dev Claim fees from owner.\\n   * @param gasFee Claim gas fee.\\n   * @param operation Claim description.\\n   */\\n  function _bill(uint256 gasFee, string memory operation) internal whenNotPaused returns (uint256) {\\n    address account = owner(); // gas optimisation\\n    if (tx.origin == account) return 0; // free if called by the owner\\n\\n    IStorage __info = IStorage(info());\\n\\n    address balance = __info.getAddress(keccak256(\\\"DFH:Contract:Balance\\\"));\\n    require(balance != address(0), \\\"Automate::_bill: balance contract not found\\\");\\n\\n    return IBalance(balance).claim(account, gasFee, protocolFee(), operation);\\n  }\\n\\n  /**\\n   * @dev Claim fees from owner.\\n   * @param gasFee Claim gas fee.\\n   * @param operation Claim description.\\n   */\\n  modifier bill(uint256 gasFee, string memory operation) {\\n    _bill(gasFee, operation);\\n    _;\\n  }\\n\\n  /**\\n   * @notice Transfer ERC20 token to recipient.\\n   * @param token The address of the token to be transferred.\\n   * @param recipient Token recipient address.\\n   * @param amount Transferred amount of tokens.\\n   */\\n  function transfer(\\n    address token,\\n    address recipient,\\n    uint256 amount\\n  ) external onlyOwner {\\n    IERC20(token).transfer(recipient, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x10279ab2a8c124a24f924c1dbfd9e218c471cd9f87e33b318768c94c4c6262c9\",\"license\":\"BSD-3-Clause\"},\"automates/utils/DFH/IBalance.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IBalance {\\n  function claim(\\n    address account,\\n    uint256 gasFee,\\n    uint256 protocolFee,\\n    string memory description\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xaa996ebfd96fa304ff8c51b240819815ea9cb1b27a250319c57cac7b597be6cc\",\"license\":\"BSD-3-Clause\"},\"automates/utils/DFH/IStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IStorage {\\n  function getBytes(bytes32 key) external view returns (bytes memory);\\n\\n  function getBool(bytes32 key) external view returns (bool);\\n\\n  function getUint(bytes32 key) external view returns (uint256);\\n\\n  function getInt(bytes32 key) external view returns (int256);\\n\\n  function getAddress(bytes32 key) external view returns (address);\\n\\n  function getString(bytes32 key) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xc3f6f2d80c27a1d5abbf6f6df55c96a315cdf7887b589c9ef5d45d036c56aa76\",\"license\":\"BSD-3-Clause\"},\"automates/utils/DFH/proxy/ERC1167.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable no-inline-assembly\\nlibrary ERC1167 {\\n  bytes public constant CLONE =\\n    hex\\\"363d3d373d3d3d363d73bebebebebebebebebebebebebebebebebebebebe5af43d82803e903d91602b57fd5bf3\\\";\\n\\n  /**\\n   * @notice Make new proxy contract.\\n   * @param impl Address prototype contract.\\n   * @return proxy Address new proxy contract.\\n   */\\n  function clone(address impl) external returns (address proxy) {\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(ptr, 0x14), shl(0x60, impl))\\n      mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      proxy := create(0, ptr, 0x37)\\n    }\\n    require(proxy != address(0), \\\"ERC1167: create failed\\\");\\n  }\\n\\n  /**\\n   * @notice Returns address of prototype contract for proxy.\\n   * @param proxy Address proxy contract.\\n   * @return impl Address prototype contract (current contract address if not proxy).\\n   */\\n  function implementation(address proxy) external view returns (address impl) {\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(proxy)\\n    }\\n\\n    impl = proxy;\\n    if (size <= 45 && size >= 41) {\\n      bool matches = true;\\n      uint256 i;\\n\\n      bytes memory code;\\n      assembly {\\n        code := mload(0x40)\\n        mstore(0x40, add(code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n        mstore(code, size)\\n        extcodecopy(proxy, add(code, 0x20), 0, size)\\n      }\\n      for (i = 0; matches && i < 9; i++) {\\n        matches = code[i] == CLONE[i];\\n      }\\n      for (i = 0; matches && i < 15; i++) {\\n        if (i == 4) {\\n          matches = code[code.length - i - 1] == bytes1(uint8(CLONE[45 - i - 1]) - uint8(45 - size));\\n        } else {\\n          matches = code[code.length - i - 1] == CLONE[45 - i - 1];\\n        }\\n      }\\n      if (code[9] != bytes1(0x73 - uint8(45 - size))) {\\n        matches = false;\\n      }\\n      uint256 forwardedToBuffer;\\n      if (matches) {\\n        assembly {\\n          forwardedToBuffer := mload(add(code, 30))\\n        }\\n        forwardedToBuffer &= (0x1 << (20 * 8)) - 1;\\n        impl = address(uint160(forwardedToBuffer >> ((45 - size) * 8)));\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x766f43e1832068a2a230f9bc19db0b190f638c4b0acb2dc689da07d43a45675f\",\"license\":\"BSD-3-Clause\"},\"automates/utils/ERC20Tools.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary ERC20Tools {\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 allowance = token.allowance(address(this), spender);\\n    if (allowance != 0 && allowance < value) {\\n      token.approve(spender, 0);\\n    }\\n    if (allowance != value) {\\n      token.approve(spender, value);\\n    }\\n  }\\n\\n  function safeApproveAll(IERC20 token, address spender) internal {\\n    safeApprove(token, spender, 2**256 - 1);\\n  }\\n}\\n\",\"keccak256\":\"0x099bc27ecc2cbc3474fca81003c55eac408130fb911f21364d9f3dec9afc0620\",\"license\":\"BSD-3-Clause\"},\"automates/utils/Synthetix/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IStaking {\\n  function rewardsToken() external view returns (address);\\n\\n  function stakingToken() external view returns (address);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function rewardsDuration() external view returns (uint256);\\n\\n  function periodFinish() external view returns (uint256);\\n\\n  function rewardRate() external view returns (uint256);\\n\\n  function balanceOf(address) external view returns (uint256);\\n\\n  function earned(address) external view returns (uint256);\\n\\n  function stake(uint256) external;\\n\\n  function getReward() external;\\n\\n  function withdraw(uint256) external;\\n\\n  function exit() external;\\n\\n  function notifyRewardAmount(uint256) external;\\n}\\n\",\"keccak256\":\"0x4cc0de8308a3a1669a7834d2d2f17329f9e046293945fdae377729d7882bb2b1\",\"license\":\"BSD-3-Clause\"},\"automates/utils/Uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\ninterface IUniswapV2Pair is IERC20 {\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function price0CumulativeLast() external view returns (uint256);\\n\\n  function price1CumulativeLast() external view returns (uint256);\\n\\n  function kLast() external view returns (uint256);\\n\\n  function mint(address to) external returns (uint256 liquidity);\\n\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n  function swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external;\\n}\\n\",\"keccak256\":\"0x562becce443b899cba13f76266d689bda17a0a1d457af045762848aa552037ac\",\"license\":\"BSD-3-Clause\"},\"automates/utils/Uniswap/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IUniswapV2Router02 {\\n  function factory() external view returns (address);\\n\\n  function WETH() external view returns (address);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 amountADesired,\\n    uint256 amountBDesired,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (\\n      uint256 amountA,\\n      uint256 amountB,\\n      uint256 liquidity\\n    );\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint256 amountTokenDesired,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    payable\\n    returns (\\n      uint256 amountToken,\\n      uint256 amountETH,\\n      uint256 liquidity\\n    );\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function swapExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactTokens(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactETHForTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactETH(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactTokensForETH(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapETHForExactTokens(\\n    uint256 amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) external pure returns (uint256 amountB);\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountOut);\\n\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountIn);\\n\\n  function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n  function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountETH);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountETH);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n}\\n\",\"keccak256\":\"0xf12b9639d5053651c2416527a638fd3168276feb207265374d87574a9a312f75\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80638456cb5911610097578063beabacc811610066578063beabacc8146101f9578063d0e30db01461020c578063dd92555114610214578063f2fde38b1461022757600080fd5b80638456cb59146101b75780638da5cb5b146101bf5780639742b5c3146101d0578063b0e21e8a146101e357600080fd5b80633f4ba83a116100d35780633f4ba83a1461017c5780634cf088d914610184578063590e1ae3146101975780635c975abb1461019f57600080fd5b806307748e421461010557806329dcb0cf1461011a578063370158ea146101475780633e032a3b14610167575b600080fd5b6101186101133660046123a1565b61023a565b005b60035461012f90600160b01b900461ffff1681565b60405161ffff90911681526020015b60405180910390f35b61014f6102de565b6040516001600160a01b03909116815260200161013e565b60035461012f90600160a01b900461ffff1681565b610118610400565b60035461014f906001600160a01b031681565b610118610601565b6101a7610993565b604051901515815260200161013e565b610118610ac3565b6001546001600160a01b031661014f565b6101186101de3660046124b5565b610cc7565b6101eb610e9a565b60405190815260200161013e565b610118610207366004612360565b611201565b6101186112b3565b6101186102223660046124e7565b611449565b610118610235366004612326565b611bc9565b6001546001600160a01b031661026757600180546001600160a01b0319163217905560001960025561029a565b6001546001600160a01b0316331461029a5760405162461bcd60e51b815260040161029190612674565b60405180910390fd5b600380546001600160a01b03949094166001600160b01b031990941693909317600160a01b61ffff938416021761ffff60b01b1916600160b01b9190921602179055565b604051630d7100e360e31b8152306004820152600090819073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b15801561032d57600080fd5b505af4158015610341573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103659190612343565b90506001600160a01b0381163014156103895750506000546001600160a01b031690565b806001600160a01b031663370158ea6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103c257600080fd5b505afa1580156103d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fa9190612343565b91505090565b604051630d7100e360e31b815230600482018190529073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b15801561044d57600080fd5b505af4158015610461573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104859190612343565b6001600160a01b0316141561057d57600061049e6102de565b6040516321f8a72160e01b81527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf17597439560048201526001600160a01b0391909116906321f8a7219060240160206040518083038186803b1580156104ff57600080fd5b505afa158015610513573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105379190612343565b6001549091506001600160a01b031633148061055b5750336001600160a01b038216145b6105775760405162461bcd60e51b8152600401610291906126b5565b506105a7565b6001546001600160a01b031633146105a75760405162461bcd60e51b8152600401610291906126b5565b6105af610993565b6105f25760405162461bcd60e51b8152602060048201526014602482015273105d5d1bdb585d194e881b9bdd081c185d5cd95960621b6044820152606401610291565b6001805460ff60a01b19169055565b6001546001600160a01b0316331461062b5760405162461bcd60e51b815260040161029190612674565b600354604080516374fd6c7760e11b815290516001600160a01b0390921691829163e9fad8ee91600480830192600092919082900301818387803b15801561067257600080fd5b505af1158015610686573d6000803e3d6000fd5b50505050600061069e6001546001600160a01b031690565b90506000826001600160a01b03166372f702f36040518163ffffffff1660e01b815260040160206040518083038186803b1580156106db57600080fd5b505afa1580156106ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107139190612343565b6040516370a0823160e01b81523060048201529091506001600160a01b0382169063a9059cbb90849083906370a082319060240160206040518083038186803b15801561075f57600080fd5b505afa158015610773573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079791906124ce565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156107dd57600080fd5b505af11580156107f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108159190612493565b506000836001600160a01b031663d1af0c7d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561085157600080fd5b505afa158015610865573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108899190612343565b6040516370a0823160e01b81523060048201529091506001600160a01b0382169063a9059cbb90859083906370a082319060240160206040518083038186803b1580156108d557600080fd5b505afa1580156108e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090d91906124ce565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044015b602060405180830381600087803b15801561095457600080fd5b505af1158015610968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098c9190612493565b5050505050565b604051630d7100e360e31b8152306004820152600090819073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b1580156109e257600080fd5b505af41580156109f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1a9190612343565b90506001600160a01b038116301415610a3f575050600154600160a01b900460ff1690565b600154600160a01b900460ff16806103fa5750806001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a8b57600080fd5b505afa158015610a9f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fa9190612493565b604051630d7100e360e31b815230600482018190529073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b158015610b1057600080fd5b505af4158015610b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b489190612343565b6001600160a01b03161415610c40576000610b616102de565b6040516321f8a72160e01b81527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf17597439560048201526001600160a01b0391909116906321f8a7219060240160206040518083038186803b158015610bc257600080fd5b505afa158015610bd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfa9190612343565b6001549091506001600160a01b0316331480610c1e5750336001600160a01b038216145b610c3a5760405162461bcd60e51b8152600401610291906126b5565b50610c6a565b6001546001600160a01b03163314610c6a5760405162461bcd60e51b8152600401610291906126b5565b610c72610993565b15610cb25760405162461bcd60e51b815260206004820152601060248201526f105d5d1bdb585d194e881c185d5cd95960821b6044820152606401610291565b6001805460ff60a01b1916600160a01b179055565b604051630d7100e360e31b815230600482015260009073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b158015610d1457600080fd5b505af4158015610d28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4c9190612343565b9050336001600160a01b0382163014610dd557816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d9857600080fd5b505afa158015610dac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd09190612343565b610de2565b6001546001600160a01b03165b6001600160a01b031614610e5e5760405162461bcd60e51b815260206004820152603d60248201527f4175746f6d6174653a3a6368616e676550726f746f636f6c4665653a2063616c60448201527f6c6572206973206e6f74207468652070726f746f636f6c206f776e65720000006064820152608401610291565b60028290556040518281527f3c1d43943224e49d951ce8295a5c8332b517083b3f89bed50feae2cb39caebb59060200160405180910390a15050565b604051630d7100e360e31b8152306004820152600090819073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b158015610ee957600080fd5b505af4158015610efd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f219190612343565b90506001600160a01b0381163014801590610f3e57506000600254125b15610fb457806001600160a01b031663b0e21e8a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f7c57600080fd5b505afa158015610f90573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fa91906124ce565b6000610fbe6102de565b905060008060025412610fd35760025461106a565b60405163bd02d0f560e01b81527fa93d95f96a5de25d7a41ddf1f5e8d45cfc929c4838163cf011dab4043a4a40d560048201526001600160a01b0383169063bd02d0f59060240160206040518083038186803b15801561103257600080fd5b505afa158015611046573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106a91906124ce565b90508061107b576000935050505090565b6040516321f8a72160e01b81527f65c90423fe7c880476633a7e36521740f87199d233dc56eb4ca6643eb76f605f60048201526000906001600160a01b038416906321f8a7219060240160206040518083038186803b1580156110dd57600080fd5b505afa1580156110f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111159190612343565b6001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561114d57600080fd5b505afa158015611161573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118591906125b1565b505050915050600081136111db5760405162461bcd60e51b815260206004820152601760248201527f4175746f6d6174653a20696e76616c69642070726963650000000000000000006044820152606401610291565b806111ee83670de0b6b3a76400006127bb565b6111f89190612799565b94505050505090565b6001546001600160a01b0316331461122b5760405162461bcd60e51b815260040161029190612674565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b15801561127557600080fd5b505af1158015611289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ad9190612493565b50505050565b6001546001600160a01b031633146112dd5760405162461bcd60e51b815260040161029190612674565b600354604080516372f702f360e01b815290516001600160a01b039092169160009183916372f702f391600480820192602092909190829003018186803b15801561132757600080fd5b505afa15801561133b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135f9190612343565b90506113746001600160a01b03821683611d2a565b6040516370a0823160e01b81523060048201526001600160a01b038084169163a694fc3a918416906370a082319060240160206040518083038186803b1580156113bd57600080fd5b505afa1580156113d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f591906124ce565b6040518263ffffffff1660e01b815260040161141391815260200190565b600060405180830381600087803b15801561142d57600080fd5b505af1158015611441573d6000803e3d6000fd5b505050505050565b826040518060400160405280601d81526020017f426f6e646170706574697453796e7468657469784c5052657374616b6500000081525061148a8282611d3b565b506003546040516246613160e11b81523060048201526001600160a01b03909116906000908290628cc2629060240160206040518083038186803b1580156114d157600080fd5b505afa1580156114e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150991906124ce565b116115685760405162461bcd60e51b815260206004820152602960248201527f53796e746865746978556e69737761704c7052657374616b653a3a72756e3a206044820152681b9bc819585c9b995960ba1b6064820152608401610291565b60006115726102de565b6040516321f8a72160e01b81527fa446c21f636a27494eaafaffc073cc3325d32c4efaa774c3f2a297ebef86980360048201526001600160a01b0391909116906321f8a7219060240160206040518083038186803b1580156115d357600080fd5b505afa1580156115e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160b9190612343565b90506001600160a01b0381166116935760405162461bcd60e51b815260206004820152604160248201527f53796e746865746978556e69737761704c7052657374616b653a3a72756e3a2060448201527f756e697377617020726f7574657220636f6e7472616374206e6f7420666f756e6064820152601960fa1b608482015260a401610291565b816001600160a01b0316633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156116ce57600080fd5b505af11580156116e2573d6000803e3d6000fd5b505050506000826001600160a01b031663d1af0c7d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561172157600080fd5b505afa158015611735573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117599190612343565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b15801561179e57600080fd5b505afa1580156117b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d691906124ce565b90506117eb6001600160a01b03831684611d2a565b6000846001600160a01b03166372f702f36040518163ffffffff1660e01b815260040160206040518083038186803b15801561182657600080fd5b505afa15801561183a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185e9190612343565b905060006040518060400160405280836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156118a657600080fd5b505afa1580156118ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118de9190612343565b6001600160a01b03166001600160a01b03168152602001836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561192e57600080fd5b505afa158015611942573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119669190612343565b6001600160a01b039081169091526040805160e0810182528883166080820190815288841660a0830152845190931660c082015281518083019092529293506000929182916119d29190806119bc60028b612799565b81526020018f60005b602002015190528f611f60565b8152602001611a6560405180606001604052808a6001600160a01b03166001600160a01b03168152602001896001600160a01b03166001600160a01b0316815260200186600160028110611a2857611a28612807565b60200201516001600160a01b031690526040805180820190915280611a4e60028b612799565b611a58908b6127da565b81526020018f60016119c5565b81526020016000815260200160008152509050611ad76040518060600160405280886001600160a01b03166001600160a01b0316815260200184600060028110611ab157611ab1612807565b602090810291909101516001600160a01b0390811683528682015116910152828d6120d6565b611aea6001600160a01b03841688611d2a565b6040516370a0823160e01b81523060048201526001600160a01b038089169163a694fc3a918616906370a082319060240160206040518083038186803b158015611b3357600080fd5b505afa158015611b47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6b91906124ce565b6040518263ffffffff1660e01b8152600401611b8991815260200190565b600060405180830381600087803b158015611ba357600080fd5b505af1158015611bb7573d6000803e3d6000fd5b50505050505050505050505050505050565b6001546001600160a01b03163314611bf35760405162461bcd60e51b815260040161029190612674565b604051630d7100e360e31b815230600482018190529073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b158015611c4057600080fd5b505af4158015611c54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c789190612343565b6001600160a01b031614611cd85760405162461bcd60e51b815260206004820152602160248201527f4175746f6d6174653a206368616e676520746865206f776e6572206661696c656044820152601960fa1b6064820152608401610291565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611d37828260001961219d565b5050565b6000611d45610993565b15611d855760405162461bcd60e51b815260206004820152601060248201526f105d5d1bdb585d194e881c185d5cd95960821b6044820152606401610291565b6000611d996001546001600160a01b031690565b9050326001600160a01b0382161415611db6576000915050611f5a565b6000611dc06102de565b6040516321f8a72160e01b81527fe78c16c6d839536d3155985aab4e9c6013c8c3d446054bcebc48612f359d81f560048201529091506000906001600160a01b038316906321f8a7219060240160206040518083038186803b158015611e2557600080fd5b505afa158015611e39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5d9190612343565b90506001600160a01b038116611ec95760405162461bcd60e51b815260206004820152602b60248201527f4175746f6d6174653a3a5f62696c6c3a2062616c616e636520636f6e7472616360448201526a1d081b9bdd08199bdd5b9960aa1b6064820152608401610291565b806001600160a01b031663e578a2258488611ee2610e9a565b896040518563ffffffff1660e01b8152600401611f029493929190612601565b602060405180830381600087803b158015611f1c57600080fd5b505af1158015611f30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5491906124ce565b93505050505b92915050565b604083015160208401516000916001600160a01b0391821691161415611f88575081516120cf565b604080516002808252606082018352600092602083019080368337019050509050846001602002015181600081518110611fc457611fc4612807565b6001600160a01b0390921660209283029190910190910152846002602002015181600181518110611ff757611ff7612807565b6001600160a01b0392831660209182029290920101528551604087015161201f921690611d2a565b8451845160208601516040516338ed173960e01b81526001600160a01b03909316926338ed17399261205b929091869030908a906004016126f7565b600060405180830381600087803b15801561207557600080fd5b505af1158015612089573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120b191908101906123e6565b6001815181106120c3576120c3612807565b60200260200101519150505b9392505050565b8251602080850151604080870151865193870151878301516060890151935162e8e33760e81b81526001600160a01b039586166004820152928516602484015260448301959095526064820152608481019390935260a48301523060c483015260e482018490529091169063e8e337009061010401606060405180830381600087803b15801561216557600080fd5b505af1158015612179573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114419190612583565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e9060440160206040518083038186803b1580156121e857600080fd5b505afa1580156121fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222091906124ce565b9050801580159061223057508181105b156122b95760405163095ea7b360e01b81526001600160a01b0384811660048301526000602483015285169063095ea7b390604401602060405180830381600087803b15801561227f57600080fd5b505af1158015612293573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b79190612493565b505b8181146112ad5760405163095ea7b360e01b81526001600160a01b0384811660048301526024820184905285169063095ea7b39060440161093a565b803561ffff8116811461230757600080fd5b919050565b805169ffffffffffffffffffff8116811461230757600080fd5b60006020828403121561233857600080fd5b81356120cf81612833565b60006020828403121561235557600080fd5b81516120cf81612833565b60008060006060848603121561237557600080fd5b833561238081612833565b9250602084013561239081612833565b929592945050506040919091013590565b6000806000606084860312156123b657600080fd5b83356123c181612833565b92506123cf602085016122f5565b91506123dd604085016122f5565b90509250925092565b600060208083850312156123f957600080fd5b825167ffffffffffffffff8082111561241157600080fd5b818501915085601f83011261242557600080fd5b8151818111156124375761243761281d565b8060051b9150612448848301612768565b8181528481019084860184860187018a101561246357600080fd5b600095505b83861015612486578051835260019590950194918601918601612468565b5098975050505050505050565b6000602082840312156124a557600080fd5b815180151581146120cf57600080fd5b6000602082840312156124c757600080fd5b5035919050565b6000602082840312156124e057600080fd5b5051919050565b6000806000608084860312156124fc57600080fd5b83359250602080850135925085605f86011261251757600080fd5b6040516040810181811067ffffffffffffffff8211171561253a5761253a61281d565b806040525080604087018860808901111561255457600080fd5b60005b600281101561257457813583529184019190840190600101612557565b50505080925050509250925092565b60008060006060848603121561259857600080fd5b8351925060208401519150604084015190509250925092565b600080600080600060a086880312156125c957600080fd5b6125d28661230c565b94506020860151935060408601519250606086015191506125f56080870161230c565b90509295509295909350565b60018060a01b038516815260006020858184015284604084015260806060840152835180608085015260005b818110156126495785810183015185820160a00152820161262d565b8181111561265b57600060a083870101525b50601f01601f19169290920160a0019695505050505050565b60208082526021908201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e656040820152603960f91b606082015260800190565b60208082526022908201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360408201526132b960f11b606082015260800190565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156127475784516001600160a01b031683529383019391830191600101612722565b50506001600160a01b03969096166060850152505050608001529392505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156127915761279161281d565b604052919050565b6000826127b657634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156127d5576127d56127f1565b500290565b6000828210156127ec576127ec6127f1565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461284857600080fd5b5056fea2646970667358221220a1f24b481d1dcba663b4bf22692d5b1db3bdae1242cef5879fa2714487d288a564736f6c63430008060033",
  "libraries": {
    "ERC1167": "0x26902B32F1AE6B130c0287B4b8E86F3a62df6051"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "changeProtocolFee(int256)": {
        "params": {
          "__protocolFee": "New protocol fee."
        }
      },
      "protocolFee()": {
        "returns": {
          "_0": "Current protocol fee."
        }
      },
      "transfer(address,address,uint256)": {
        "params": {
          "amount": "Transferred amount of tokens.",
          "recipient": "Token recipient address.",
          "token": "The address of the token to be transferred."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeProtocolFee(int256)": {
        "notice": "Change protocol fee."
      },
      "info()": {
        "notice": "Returns address of Storage contract."
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "pause()": {
        "notice": "Pause contract."
      },
      "paused()": {
        "notice": "Returns true if the contract is paused, and false otherwise."
      },
      "transfer(address,address,uint256)": {
        "notice": "Transfer ERC20 token to recipient."
      },
      "unpause()": {
        "notice": "Unpause contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1786,
        "contract": "automates/bondappetit/SynthetixUniswapLpRestake.automate.sol:SynthetixUniswapLpRestake",
        "label": "_info",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1789,
        "contract": "automates/bondappetit/SynthetixUniswapLpRestake.automate.sol:SynthetixUniswapLpRestake",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1792,
        "contract": "automates/bondappetit/SynthetixUniswapLpRestake.automate.sol:SynthetixUniswapLpRestake",
        "label": "_paused",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 1795,
        "contract": "automates/bondappetit/SynthetixUniswapLpRestake.automate.sol:SynthetixUniswapLpRestake",
        "label": "_protocolFee",
        "offset": 0,
        "slot": "2",
        "type": "t_int256"
      },
      {
        "astId": 823,
        "contract": "automates/bondappetit/SynthetixUniswapLpRestake.automate.sol:SynthetixUniswapLpRestake",
        "label": "staking",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IStaking)2896"
      },
      {
        "astId": 825,
        "contract": "automates/bondappetit/SynthetixUniswapLpRestake.automate.sol:SynthetixUniswapLpRestake",
        "label": "slippage",
        "offset": 20,
        "slot": "3",
        "type": "t_uint16"
      },
      {
        "astId": 827,
        "contract": "automates/bondappetit/SynthetixUniswapLpRestake.automate.sol:SynthetixUniswapLpRestake",
        "label": "deadline",
        "offset": 22,
        "slot": "3",
        "type": "t_uint16"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IStaking)2896": {
        "encoding": "inplace",
        "label": "contract IStaking",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      }
    }
  }
}
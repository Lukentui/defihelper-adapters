{
  "address": "0xf0aC0A67EE650e64fE19fCd77376cAd748601303",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_info",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "info",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staking",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gasFee",
          "type": "uint256"
        }
      ],
      "name": "run",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract IStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0cf21cb880fa8f907a89167813e32cf1395adb030655fb105fb2a4f4b6d5e0b8",
  "receipt": {
    "to": null,
    "from": "0x9403932015576D13Fb26B135ed7a35d5d95C18d4",
    "contractAddress": "0xf0aC0A67EE650e64fE19fCd77376cAd748601303",
    "transactionIndex": 40,
    "gasUsed": "2098522",
    "logsBloom": "0x
    "blockHash": "0x6849bf1ab95bfd96a1ef2c234a7a4beab5c6c724d5eaa9a25c9e718b02782d37",
    "transactionHash": "0x0cf21cb880fa8f907a89167813e32cf1395adb030655fb105fb2a4f4b6d5e0b8",
    "logs": [],
    "blockNumber": 10932880,
    "cumulativeGasUsed": "7056496",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD6CECEa36218A9A7b2f0c7371cDFcB0e09617Dd0"
  ],
  "solcInputHash": "b6288b1dc172ce980370c9e9fcaba318",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_info\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"info\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"}],\"name\":\"run\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"transfer(address,address,uint256)\":{\"params\":{\"amount\":\"Transferred amount of tokens.\",\"recipient\":\"Token recipient address.\",\"token\":\"The address of the token to be transferred.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"info()\":{\"notice\":\"Returns address of Storage contract.\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"pause()\":{\"notice\":\"Pause contract.\"},\"paused()\":{\"notice\":\"Returns true if the contract is paused, and false otherwise.\"},\"transfer(address,address,uint256)\":{\"notice\":\"Transfer ERC20 token to recipient.\"},\"unpause()\":{\"notice\":\"Unpause contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"automates/bondappetit/SynthetixUniswapLpRestake.automate.sol\":\"SynthetixUniswapLpRestake\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"automates/bondappetit/SynthetixUniswapLpRestake.automate.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../utils/DFH/Automate.sol\\\";\\nimport \\\"../utils/DFH/IStorage.sol\\\";\\nimport \\\"../utils/Uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"../utils/Uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"../utils/Synthetix/IStaking.sol\\\";\\nimport {ERC20Tools} from \\\"../utils/ERC20Tools.sol\\\";\\n\\n// solhint-disable not-rely-on-time\\ncontract SynthetixUniswapLpRestake is Automate {\\n  using ERC20Tools for IERC20;\\n\\n  IStaking public staking;\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor(address _info) Automate(_info) {}\\n\\n  function init(address _staking) public initializer {\\n    staking = IStaking(_staking);\\n    // solhint-disable-next-line avoid-tx-origin\\n    _owner = tx.origin;\\n  }\\n\\n  function deposit() external onlyOwner {\\n    IStaking _staking = staking; // gas optimisation\\n    address stakingToken = _staking.stakingToken();\\n    IERC20(stakingToken).safeApproveAll(address(_staking));\\n    _staking.stake(IERC20(stakingToken).balanceOf(address(this)));\\n  }\\n\\n  function refund() external onlyOwner {\\n    IStaking _staking = staking; // gas optimisation\\n    _staking.exit();\\n\\n    address __owner = owner(); // gas optimisation\\n    IERC20 stakingToken = IERC20(_staking.stakingToken());\\n    stakingToken.transfer(__owner, stakingToken.balanceOf(address(this)));\\n\\n    IERC20 rewardToken = IERC20(_staking.rewardsToken());\\n    rewardToken.transfer(__owner, rewardToken.balanceOf(address(this)));\\n  }\\n\\n  function run(uint256 gasFee) external bill(gasFee, \\\"BondappetitSynthetixLPRestake\\\") {\\n    require(staking.earned(address(this)) > 0, \\\"SynthetixUniswapLpRestake::run: no earned\\\");\\n    address router = IStorage(info()).getAddress(keccak256(\\\"UniswapV2:Contract:Router2\\\"));\\n    require(router != address(0), \\\"SynthetixUniswapLpRestake::run: uniswap router contract not found\\\");\\n\\n    staking.getReward();\\n    address rewardToken = staking.rewardsToken();\\n    uint256 rewardAmount = IERC20(rewardToken).balanceOf(address(this));\\n    uint256 half0 = rewardAmount / 2;\\n    uint256 half1 = rewardAmount - half0;\\n    IERC20(rewardToken).safeApproveAll(router);\\n\\n    IUniswapV2Pair stakingToken = IUniswapV2Pair(staking.stakingToken());\\n    address token0 = stakingToken.token0();\\n    uint256 token0Amount;\\n    if (token0 != rewardToken) {\\n      address[] memory path = new address[](2);\\n      path[0] = rewardToken;\\n      path[1] = token0;\\n      uint256 amountOut = IUniswapV2Router02(router).getAmountsOut(half0, path)[path.length - 1];\\n      require(amountOut > 0, \\\"SynthetixUniswapLpRestake::run: empty liquidity for token0 swap\\\");\\n\\n      token0Amount = IUniswapV2Router02(router).swapExactTokensForTokens(\\n        half0,\\n        amountOut,\\n        path,\\n        address(this),\\n        block.timestamp\\n      )[path.length - 1];\\n      IERC20(token0).safeApproveAll(router);\\n    } else {\\n      token0Amount = half0;\\n    }\\n    address token1 = stakingToken.token1();\\n    uint256 token1Amount;\\n    if (token1 != rewardToken) {\\n      address[] memory path = new address[](2);\\n      path[0] = rewardToken;\\n      path[1] = token1;\\n      uint256 amountOut = IUniswapV2Router02(router).getAmountsOut(half1, path)[path.length - 1];\\n      require(amountOut > 0, \\\"SynthetixUniswapLpRestake::run: empty liquidity for token1 swap\\\");\\n\\n      token1Amount = IUniswapV2Router02(router).swapExactTokensForTokens(\\n        half1,\\n        amountOut,\\n        path,\\n        address(this),\\n        block.timestamp\\n      )[path.length - 1];\\n      IERC20(token1).safeApproveAll(router);\\n    } else {\\n      token1Amount = half1;\\n    }\\n\\n    IUniswapV2Router02(router).addLiquidity(\\n      token0,\\n      token1,\\n      token0Amount,\\n      token1Amount,\\n      0,\\n      0,\\n      address(this),\\n      block.timestamp\\n    );\\n    IERC20(stakingToken).safeApproveAll(address(staking));\\n    staking.stake(IERC20(stakingToken).balanceOf(address(this)));\\n  }\\n}\\n\",\"keccak256\":\"0x51b1b62349035efd3605fececb8e92296deabd2c7d60e79e7edbdb959fa34979\",\"license\":\"BSD-3-Clause\"},\"automates/utils/DFH/Automate.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"./proxy/ERC1167.sol\\\";\\nimport \\\"./IStorage.sol\\\";\\nimport \\\"./IBalance.sol\\\";\\n\\n// solhint-disable avoid-tx-origin\\nabstract contract Automate is Initializable {\\n  using ERC1167 for address;\\n\\n  /// @notice Storage contract address.\\n  address internal _info;\\n\\n  /// @notice Contract owner.\\n  address internal _owner;\\n\\n  /// @notice Is contract paused.\\n  bool internal _paused;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  constructor(address __info) {\\n    _info = __info;\\n    _owner = tx.origin;\\n  }\\n\\n  /**\\n   * @notice Returns address of Storage contract.\\n   */\\n  function info() public view returns (address) {\\n    address impl = address(this).implementation();\\n    if (impl == address(this)) return _info;\\n\\n    return Automate(impl).info();\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(_owner == msg.sender, \\\"Automate: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external onlyOwner {\\n    require(address(this).implementation() == address(this), \\\"Automate: change the owner failed\\\");\\n\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the pauser.\\n   */\\n  modifier onlyPauser() {\\n    if (address(this).implementation() == address(this)) {\\n      address pauser = IStorage(info()).getAddress(keccak256(\\\"DFH:Pauser\\\"));\\n      require(msg.sender == _owner || msg.sender == pauser, \\\"Automate: caller is not the pauser\\\");\\n    } else {\\n      require(msg.sender == _owner, \\\"Automate: caller is not the pauser\\\");\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Returns true if the contract is paused, and false otherwise.\\n   */\\n  function paused() public view returns (bool) {\\n    address impl = address(this).implementation();\\n    if (impl == address(this)) return _paused;\\n\\n    return _paused || Automate(impl).paused();\\n  }\\n\\n  /**\\n   * @dev Throws if contract paused.\\n   */\\n  modifier whenPaused() {\\n    require(paused(), \\\"Automate: not paused\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Throws if contract unpaused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused(), \\\"Automate: paused\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Pause contract.\\n   */\\n  function pause() external onlyPauser whenNotPaused {\\n    _paused = true;\\n  }\\n\\n  /**\\n   * @notice Unpause contract.\\n   */\\n  function unpause() external onlyPauser whenPaused {\\n    _paused = false;\\n  }\\n\\n  /**\\n   * @dev Claim fees from owner.\\n   * @param gasFee Claim gas fee.\\n   * @param operation Claim description.\\n   */\\n  function _bill(uint256 gasFee, string memory operation) internal whenNotPaused returns (uint256) {\\n    address account = owner(); // gas optimisation\\n    if (tx.origin == account) return 0; // free if called by the owner\\n\\n    IStorage __info = IStorage(info());\\n\\n    address balance = __info.getAddress(keccak256(\\\"DFH:Contract:Balance\\\"));\\n    require(balance != address(0), \\\"Automate::_bill: balance contract not found\\\");\\n\\n    uint256 protocolFee = __info.getUint(keccak256(\\\"DFH:Fee:Automate\\\"));\\n    return IBalance(balance).claim(account, gasFee, protocolFee, operation);\\n  }\\n\\n  /**\\n   * @dev Claim fees from owner.\\n   * @param gasFee Claim gas fee.\\n   * @param operation Claim description.\\n   */\\n  modifier bill(uint256 gasFee, string memory operation) {\\n    _bill(gasFee, operation);\\n    _;\\n  }\\n\\n  /**\\n   * @notice Transfer ERC20 token to recipient.\\n   * @param token The address of the token to be transferred.\\n   * @param recipient Token recipient address.\\n   * @param amount Transferred amount of tokens.\\n   */\\n  function transfer(\\n    address token,\\n    address recipient,\\n    uint256 amount\\n  ) external onlyOwner {\\n    IERC20(token).transfer(recipient, amount);\\n  }\\n}\\n\",\"keccak256\":\"0xa1436b7370cd4cf38220d47a5f8747d0b80a817de869f5ce2220156436494a8b\",\"license\":\"BSD-3-Clause\"},\"automates/utils/DFH/IBalance.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IBalance {\\n  function claim(\\n    address account,\\n    uint256 gasFee,\\n    uint256 protocolFee,\\n    string memory description\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xaa996ebfd96fa304ff8c51b240819815ea9cb1b27a250319c57cac7b597be6cc\",\"license\":\"BSD-3-Clause\"},\"automates/utils/DFH/IStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IStorage {\\n  function getBytes(bytes32 key) external view returns (bytes memory);\\n\\n  function getBool(bytes32 key) external view returns (bool);\\n\\n  function getUint(bytes32 key) external view returns (uint256);\\n\\n  function getInt(bytes32 key) external view returns (int256);\\n\\n  function getAddress(bytes32 key) external view returns (address);\\n\\n  function getString(bytes32 key) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xc3f6f2d80c27a1d5abbf6f6df55c96a315cdf7887b589c9ef5d45d036c56aa76\",\"license\":\"BSD-3-Clause\"},\"automates/utils/DFH/proxy/ERC1167.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable no-inline-assembly\\nlibrary ERC1167 {\\n  bytes public constant CLONE =\\n    hex\\\"363d3d373d3d3d363d73bebebebebebebebebebebebebebebebebebebebe5af43d82803e903d91602b57fd5bf3\\\";\\n\\n  /**\\n   * @notice Make new proxy contract.\\n   * @param impl Address prototype contract.\\n   * @return proxy Address new proxy contract.\\n   */\\n  function clone(address impl) external returns (address proxy) {\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(ptr, 0x14), shl(0x60, impl))\\n      mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      proxy := create(0, ptr, 0x37)\\n    }\\n    require(proxy != address(0), \\\"ERC1167: create failed\\\");\\n  }\\n\\n  /**\\n   * @notice Returns address of prototype contract for proxy.\\n   * @param proxy Address proxy contract.\\n   * @return impl Address prototype contract (current contract address if not proxy).\\n   */\\n  function implementation(address proxy) external view returns (address impl) {\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(proxy)\\n    }\\n\\n    impl = proxy;\\n    if (size <= 45 && size >= 41) {\\n      bool matches = true;\\n      uint256 i;\\n\\n      bytes memory code;\\n      assembly {\\n        code := mload(0x40)\\n        mstore(0x40, add(code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n        mstore(code, size)\\n        extcodecopy(proxy, add(code, 0x20), 0, size)\\n      }\\n      for (i = 0; matches && i < 9; i++) {\\n        matches = code[i] == CLONE[i];\\n      }\\n      for (i = 0; matches && i < 15; i++) {\\n        if (i == 4) {\\n          matches = code[code.length - i - 1] == bytes1(uint8(CLONE[45 - i - 1]) - uint8(45 - size));\\n        } else {\\n          matches = code[code.length - i - 1] == CLONE[45 - i - 1];\\n        }\\n      }\\n      if (code[9] != bytes1(0x73 - uint8(45 - size))) {\\n        matches = false;\\n      }\\n      uint256 forwardedToBuffer;\\n      if (matches) {\\n        assembly {\\n          forwardedToBuffer := mload(add(code, 30))\\n        }\\n        forwardedToBuffer &= (0x1 << (20 * 8)) - 1;\\n        impl = address(uint160(forwardedToBuffer >> ((45 - size) * 8)));\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x766f43e1832068a2a230f9bc19db0b190f638c4b0acb2dc689da07d43a45675f\",\"license\":\"BSD-3-Clause\"},\"automates/utils/ERC20Tools.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary ERC20Tools {\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 allowance = token.allowance(address(this), spender);\\n    if (allowance != 0 && allowance < value) {\\n      token.approve(spender, 0);\\n    }\\n    if (allowance != value) {\\n      token.approve(spender, value);\\n    }\\n  }\\n\\n  function safeApproveAll(IERC20 token, address spender) internal {\\n    safeApprove(token, spender, 2**256 - 1);\\n  }\\n}\\n\",\"keccak256\":\"0x099bc27ecc2cbc3474fca81003c55eac408130fb911f21364d9f3dec9afc0620\",\"license\":\"BSD-3-Clause\"},\"automates/utils/Synthetix/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IStaking {\\n  function rewardsToken() external view returns (address);\\n\\n  function stakingToken() external view returns (address);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function rewardsDuration() external view returns (uint256);\\n\\n  function periodFinish() external view returns (uint256);\\n\\n  function rewardRate() external view returns (uint256);\\n\\n  function balanceOf(address) external view returns (uint256);\\n\\n  function earned(address) external view returns (uint256);\\n\\n  function stake(uint256) external;\\n\\n  function getReward() external;\\n\\n  function withdraw(uint256) external;\\n\\n  function exit() external;\\n\\n  function notifyRewardAmount(uint256) external;\\n}\\n\",\"keccak256\":\"0x4cc0de8308a3a1669a7834d2d2f17329f9e046293945fdae377729d7882bb2b1\",\"license\":\"BSD-3-Clause\"},\"automates/utils/Uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\ninterface IUniswapV2Pair is IERC20 {\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function price0CumulativeLast() external view returns (uint256);\\n\\n  function price1CumulativeLast() external view returns (uint256);\\n\\n  function kLast() external view returns (uint256);\\n\\n  function mint(address to) external returns (uint256 liquidity);\\n\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n  function swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external;\\n}\\n\",\"keccak256\":\"0x562becce443b899cba13f76266d689bda17a0a1d457af045762848aa552037ac\",\"license\":\"BSD-3-Clause\"},\"automates/utils/Uniswap/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IUniswapV2Router02 {\\n  function factory() external view returns (address);\\n\\n  function WETH() external view returns (address);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 amountADesired,\\n    uint256 amountBDesired,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (\\n      uint256 amountA,\\n      uint256 amountB,\\n      uint256 liquidity\\n    );\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint256 amountTokenDesired,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    payable\\n    returns (\\n      uint256 amountToken,\\n      uint256 amountETH,\\n      uint256 liquidity\\n    );\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function swapExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactTokens(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactETHForTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactETH(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactTokensForETH(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapETHForExactTokens(\\n    uint256 amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) external pure returns (uint256 amountB);\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountOut);\\n\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountIn);\\n\\n  function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n  function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountETH);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountETH);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n}\\n\",\"keccak256\":\"0xf12b9639d5053651c2416527a638fd3168276feb207265374d87574a9a312f75\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051620024da380380620024da83398101604081905261003191610070565b600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055600180546001600160a01b031916321790556100a0565b60006020828403121561008257600080fd5b81516001600160a01b038116811461009957600080fd5b9392505050565b61242a80620000b06000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80638456cb59116100715780638456cb591461012e5780638da5cb5b14610136578063a444f5e914610147578063beabacc81461015a578063d0e30db01461016d578063f2fde38b1461017557600080fd5b806319ab453c146100b9578063370158ea146100ce5780633f4ba83a146100f35780634cf088d9146100fb578063590e1ae31461010e5780635c975abb14610116575b600080fd5b6100cc6100c7366004611fe9565b610188565b005b6100d661026a565b6040516001600160a01b0390911681526020015b60405180910390f35b6100cc610392565b6002546100d6906001600160a01b031681565b6100cc610593565b61011e610925565b60405190151581526020016100ea565b6100cc610a55565b6001546001600160a01b03166100d6565b6100cc610155366004612152565b610c59565b6100cc61016836600461202a565b611824565b6100cc6118d6565b6100cc610183366004611fe9565b611a6c565b600054610100900460ff16806101a1575060005460ff16155b6102095760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff1615801561022b576000805461ffff19166101011790555b600280546001600160a01b0384166001600160a01b03199182161790915560018054909116321790558015610266576000805461ff00191690555b5050565b604051630d7100e360e31b8152306004820152600090819073892c0FdcE4D48E59e34Ed0bEe611BeCf988dF6a990636b8807189060240160206040518083038186803b1580156102b957600080fd5b505af41580156102cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f1919061200d565b90506001600160a01b03811630141561031b5750506000546201000090046001600160a01b031690565b806001600160a01b031663370158ea6040518163ffffffff1660e01b815260040160206040518083038186803b15801561035457600080fd5b505afa158015610368573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038c919061200d565b91505090565b604051630d7100e360e31b815230600482018190529073892c0FdcE4D48E59e34Ed0bEe611BeCf988dF6a990636b8807189060240160206040518083038186803b1580156103df57600080fd5b505af41580156103f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610417919061200d565b6001600160a01b0316141561050f57600061043061026a565b6040516321f8a72160e01b81527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf17597439560048201526001600160a01b0391909116906321f8a7219060240160206040518083038186803b15801561049157600080fd5b505afa1580156104a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c9919061200d565b6001549091506001600160a01b03163314806104ed5750336001600160a01b038216145b6105095760405162461bcd60e51b8152600401610200906122aa565b50610539565b6001546001600160a01b031633146105395760405162461bcd60e51b8152600401610200906122aa565b610541610925565b6105845760405162461bcd60e51b8152602060048201526014602482015273105d5d1bdb585d194e881b9bdd081c185d5cd95960621b6044820152606401610200565b6001805460ff60a01b19169055565b6001546001600160a01b031633146105bd5760405162461bcd60e51b815260040161020090612269565b600254604080516374fd6c7760e11b815290516001600160a01b0390921691829163e9fad8ee91600480830192600092919082900301818387803b15801561060457600080fd5b505af1158015610618573d6000803e3d6000fd5b5050505060006106306001546001600160a01b031690565b90506000826001600160a01b03166372f702f36040518163ffffffff1660e01b815260040160206040518083038186803b15801561066d57600080fd5b505afa158015610681573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a5919061200d565b6040516370a0823160e01b81523060048201529091506001600160a01b0382169063a9059cbb90849083906370a082319060240160206040518083038186803b1580156106f157600080fd5b505afa158015610705573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610729919061216b565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561076f57600080fd5b505af1158015610783573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a79190612130565b506000836001600160a01b031663d1af0c7d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107e357600080fd5b505afa1580156107f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081b919061200d565b6040516370a0823160e01b81523060048201529091506001600160a01b0382169063a9059cbb90859083906370a082319060240160206040518083038186803b15801561086757600080fd5b505afa15801561087b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089f919061216b565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044015b602060405180830381600087803b1580156108e657600080fd5b505af11580156108fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091e9190612130565b5050505050565b604051630d7100e360e31b8152306004820152600090819073892c0FdcE4D48E59e34Ed0bEe611BeCf988dF6a990636b8807189060240160206040518083038186803b15801561097457600080fd5b505af4158015610988573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ac919061200d565b90506001600160a01b0381163014156109d1575050600154600160a01b900460ff1690565b600154600160a01b900460ff168061038c5750806001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a1d57600080fd5b505afa158015610a31573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038c9190612130565b604051630d7100e360e31b815230600482018190529073892c0FdcE4D48E59e34Ed0bEe611BeCf988dF6a990636b8807189060240160206040518083038186803b158015610aa257600080fd5b505af4158015610ab6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ada919061200d565b6001600160a01b03161415610bd2576000610af361026a565b6040516321f8a72160e01b81527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf17597439560048201526001600160a01b0391909116906321f8a7219060240160206040518083038186803b158015610b5457600080fd5b505afa158015610b68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8c919061200d565b6001549091506001600160a01b0316331480610bb05750336001600160a01b038216145b610bcc5760405162461bcd60e51b8152600401610200906122aa565b50610bfc565b6001546001600160a01b03163314610bfc5760405162461bcd60e51b8152600401610200906122aa565b610c04610925565b15610c445760405162461bcd60e51b815260206004820152601060248201526f105d5d1bdb585d194e881c185d5cd95960821b6044820152606401610200565b6001805460ff60a01b1916600160a01b179055565b806040518060400160405280601d81526020017f426f6e646170706574697453796e7468657469784c5052657374616b65000000815250610c9a8282611bcd565b506002546040516246613160e11b81523060048201526000916001600160a01b031690628cc2629060240160206040518083038186803b158015610cdd57600080fd5b505afa158015610cf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d15919061216b565b11610d625760405162461bcd60e51b815260206004820152602960248201526000805160206123d58339815191526044820152681b9bc819585c9b995960ba1b6064820152608401610200565b6000610d6c61026a565b6040516321f8a72160e01b81527fa446c21f636a27494eaafaffc073cc3325d32c4efaa774c3f2a297ebef86980360048201526001600160a01b0391909116906321f8a7219060240160206040518083038186803b158015610dcd57600080fd5b505afa158015610de1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e05919061200d565b90506001600160a01b038116610e7b5760405162461bcd60e51b815260206004820152604160248201526000805160206123d583398151915260448201527f756e697377617020726f7574657220636f6e7472616374206e6f7420666f756e6064820152601960fa1b608482015260a401610200565b600260009054906101000a90046001600160a01b03166001600160a01b0316633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610ecb57600080fd5b505af1158015610edf573d6000803e3d6000fd5b505050506000600260009054906101000a90046001600160a01b03166001600160a01b031663d1af0c7d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f3357600080fd5b505afa158015610f47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6b919061200d565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b158015610fb057600080fd5b505afa158015610fc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe8919061216b565b90506000610ff7600283612349565b90506000611005828461236b565b905061101a6001600160a01b03851686611e89565b600254604080516372f702f360e01b815290516000926001600160a01b0316916372f702f3916004808301926020929190829003018186803b15801561105f57600080fd5b505afa158015611073573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611097919061200d565b90506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156110d457600080fd5b505afa1580156110e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110c919061200d565b90506000866001600160a01b0316826001600160a01b03161461138657604080516002808252606082018352600092602083019080368337019050509050878160008151811061115e5761115e612390565b60200260200101906001600160a01b031690816001600160a01b031681525050828160018151811061119257611192612390565b6001600160a01b03928316602091820292909201015260405163d06ca61f60e01b81526000918b169063d06ca61f906111d1908a9086906004016122ec565b60006040518083038186803b1580156111e957600080fd5b505afa1580156111fd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611225919081019061206b565b60018351611233919061236b565b8151811061124357611243612390565b60200260200101519050600081116112b15760405162461bcd60e51b815260206004820152603f60248201526000805160206123d583398151915260448201527f656d707479206c697175696469747920666f7220746f6b656e302073776170006064820152608401610200565b6040516338ed173960e01b81526001600160a01b038b16906338ed1739906112e5908a90859087903090429060040161230d565b600060405180830381600087803b1580156112ff57600080fd5b505af1158015611313573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261133b919081019061206b565b60018351611349919061236b565b8151811061135957611359612390565b6020026020010151925061137f8a856001600160a01b0316611e8990919063ffffffff16565b5050611389565b50835b6000836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156113c457600080fd5b505afa1580156113d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fc919061200d565b90506000886001600160a01b0316826001600160a01b03161461167657604080516002808252606082018352600092602083019080368337019050509050898160008151811061144e5761144e612390565b60200260200101906001600160a01b031690816001600160a01b031681525050828160018151811061148257611482612390565b6001600160a01b03928316602091820292909201015260405163d06ca61f60e01b81526000918d169063d06ca61f906114c1908b9086906004016122ec565b60006040518083038186803b1580156114d957600080fd5b505afa1580156114ed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611515919081019061206b565b60018351611523919061236b565b8151811061153357611533612390565b60200260200101519050600081116115a15760405162461bcd60e51b815260206004820152603f60248201526000805160206123d583398151915260448201527f656d707479206c697175696469747920666f7220746f6b656e312073776170006064820152608401610200565b6040516338ed173960e01b81526001600160a01b038d16906338ed1739906115d5908b90859087903090429060040161230d565b600060405180830381600087803b1580156115ef57600080fd5b505af1158015611603573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261162b919081019061206b565b60018351611639919061236b565b8151811061164957611649612390565b6020026020010151925061166f8c856001600160a01b0316611e8990919063ffffffff16565b5050611679565b50845b60405162e8e33760e81b81526001600160a01b0385811660048301528381166024830152604482018590526064820183905260006084830181905260a48301523060c48301524260e48301528b169063e8e337009061010401606060405180830381600087803b1580156116ec57600080fd5b505af1158015611700573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117249190612184565b505060025461174091506001600160a01b038781169116611e89565b6002546040516370a0823160e01b81523060048201526001600160a01b039182169163a694fc3a91908816906370a082319060240160206040518083038186803b15801561178d57600080fd5b505afa1580156117a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c5919061216b565b6040518263ffffffff1660e01b81526004016117e391815260200190565b600060405180830381600087803b1580156117fd57600080fd5b505af1158015611811573d6000803e3d6000fd5b5050505050505050505050505050505050565b6001546001600160a01b0316331461184e5760405162461bcd60e51b815260040161020090612269565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b15801561189857600080fd5b505af11580156118ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d09190612130565b50505050565b6001546001600160a01b031633146119005760405162461bcd60e51b815260040161020090612269565b600254604080516372f702f360e01b815290516001600160a01b039092169160009183916372f702f391600480820192602092909190829003018186803b15801561194a57600080fd5b505afa15801561195e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611982919061200d565b90506119976001600160a01b03821683611e89565b6040516370a0823160e01b81523060048201526001600160a01b038084169163a694fc3a918416906370a082319060240160206040518083038186803b1580156119e057600080fd5b505afa1580156119f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a18919061216b565b6040518263ffffffff1660e01b8152600401611a3691815260200190565b600060405180830381600087803b158015611a5057600080fd5b505af1158015611a64573d6000803e3d6000fd5b505050505050565b6001546001600160a01b03163314611a965760405162461bcd60e51b815260040161020090612269565b604051630d7100e360e31b815230600482018190529073892c0FdcE4D48E59e34Ed0bEe611BeCf988dF6a990636b8807189060240160206040518083038186803b158015611ae357600080fd5b505af4158015611af7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1b919061200d565b6001600160a01b031614611b7b5760405162461bcd60e51b815260206004820152602160248201527f4175746f6d6174653a206368616e676520746865206f776e6572206661696c656044820152601960fa1b6064820152608401610200565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000611bd7610925565b15611c175760405162461bcd60e51b815260206004820152601060248201526f105d5d1bdb585d194e881c185d5cd95960821b6044820152606401610200565b6000611c2b6001546001600160a01b031690565b9050326001600160a01b0382161415611c48576000915050611e83565b6000611c5261026a565b6040516321f8a72160e01b81527fe78c16c6d839536d3155985aab4e9c6013c8c3d446054bcebc48612f359d81f560048201529091506000906001600160a01b038316906321f8a7219060240160206040518083038186803b158015611cb757600080fd5b505afa158015611ccb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cef919061200d565b90506001600160a01b038116611d5b5760405162461bcd60e51b815260206004820152602b60248201527f4175746f6d6174653a3a5f62696c6c3a2062616c616e636520636f6e7472616360448201526a1d081b9bdd08199bdd5b9960aa1b6064820152608401610200565b60405163bd02d0f560e01b81527fa93d95f96a5de25d7a41ddf1f5e8d45cfc929c4838163cf011dab4043a4a40d560048201526000906001600160a01b0384169063bd02d0f59060240160206040518083038186803b158015611dbd57600080fd5b505afa158015611dd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df5919061216b565b60405163e578a22560e01b81529091506001600160a01b0383169063e578a22590611e2a9087908b9086908c906004016121f6565b602060405180830381600087803b158015611e4457600080fd5b505af1158015611e58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7c919061216b565b9450505050505b92915050565b6102668282600019604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e9060440160206040518083038186803b158015611edc57600080fd5b505afa158015611ef0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f14919061216b565b90508015801590611f2457508181105b15611fad5760405163095ea7b360e01b81526001600160a01b0384811660048301526000602483015285169063095ea7b390604401602060405180830381600087803b158015611f7357600080fd5b505af1158015611f87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fab9190612130565b505b8181146118d05760405163095ea7b360e01b81526001600160a01b0384811660048301526024820184905285169063095ea7b3906044016108cc565b600060208284031215611ffb57600080fd5b8135612006816123bc565b9392505050565b60006020828403121561201f57600080fd5b8151612006816123bc565b60008060006060848603121561203f57600080fd5b833561204a816123bc565b9250602084013561205a816123bc565b929592945050506040919091013590565b6000602080838503121561207e57600080fd5b825167ffffffffffffffff8082111561209657600080fd5b818501915085601f8301126120aa57600080fd5b8151818111156120bc576120bc6123a6565b8060051b604051601f19603f830116810181811085821117156120e1576120e16123a6565b604052828152858101935084860182860187018a101561210057600080fd5b600095505b83861015612123578051855260019590950194938601938601612105565b5098975050505050505050565b60006020828403121561214257600080fd5b8151801515811461200657600080fd5b60006020828403121561216457600080fd5b5035919050565b60006020828403121561217d57600080fd5b5051919050565b60008060006060848603121561219957600080fd5b8351925060208401519150604084015190509250925092565b600081518084526020808501945080840160005b838110156121eb5781516001600160a01b0316875295820195908201906001016121c6565b509495945050505050565b60018060a01b038516815260006020858184015284604084015260806060840152835180608085015260005b8181101561223e5785810183015185820160a001528201612222565b8181111561225057600060a083870101525b50601f01601f19169290920160a0019695505050505050565b60208082526021908201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e656040820152603960f91b606082015260800190565b60208082526022908201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360408201526132b960f11b606082015260800190565b82815260406020820152600061230560408301846121b2565b949350505050565b85815284602082015260a06040820152600061232c60a08301866121b2565b6001600160a01b0394909416606083015250608001529392505050565b60008261236657634e487b7160e01b600052601260045260246000fd5b500490565b60008282101561238b57634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146123d157600080fd5b5056fe53796e746865746978556e69737761704c7052657374616b653a3a72756e3a20a2646970667358221220f0ec9bc36d4d82f3b4b5615ea45887c0616a980aedb9046043ff68b993aae2fc64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80638456cb59116100715780638456cb591461012e5780638da5cb5b14610136578063a444f5e914610147578063beabacc81461015a578063d0e30db01461016d578063f2fde38b1461017557600080fd5b806319ab453c146100b9578063370158ea146100ce5780633f4ba83a146100f35780634cf088d9146100fb578063590e1ae31461010e5780635c975abb14610116575b600080fd5b6100cc6100c7366004611fe9565b610188565b005b6100d661026a565b6040516001600160a01b0390911681526020015b60405180910390f35b6100cc610392565b6002546100d6906001600160a01b031681565b6100cc610593565b61011e610925565b60405190151581526020016100ea565b6100cc610a55565b6001546001600160a01b03166100d6565b6100cc610155366004612152565b610c59565b6100cc61016836600461202a565b611824565b6100cc6118d6565b6100cc610183366004611fe9565b611a6c565b600054610100900460ff16806101a1575060005460ff16155b6102095760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff1615801561022b576000805461ffff19166101011790555b600280546001600160a01b0384166001600160a01b03199182161790915560018054909116321790558015610266576000805461ff00191690555b5050565b604051630d7100e360e31b8152306004820152600090819073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b1580156102b957600080fd5b505af41580156102cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f1919061200d565b90506001600160a01b03811630141561031b5750506000546201000090046001600160a01b031690565b806001600160a01b031663370158ea6040518163ffffffff1660e01b815260040160206040518083038186803b15801561035457600080fd5b505afa158015610368573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038c919061200d565b91505090565b604051630d7100e360e31b815230600482018190529073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b1580156103df57600080fd5b505af41580156103f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610417919061200d565b6001600160a01b0316141561050f57600061043061026a565b6040516321f8a72160e01b81527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf17597439560048201526001600160a01b0391909116906321f8a7219060240160206040518083038186803b15801561049157600080fd5b505afa1580156104a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c9919061200d565b6001549091506001600160a01b03163314806104ed5750336001600160a01b038216145b6105095760405162461bcd60e51b8152600401610200906122aa565b50610539565b6001546001600160a01b031633146105395760405162461bcd60e51b8152600401610200906122aa565b610541610925565b6105845760405162461bcd60e51b8152602060048201526014602482015273105d5d1bdb585d194e881b9bdd081c185d5cd95960621b6044820152606401610200565b6001805460ff60a01b19169055565b6001546001600160a01b031633146105bd5760405162461bcd60e51b815260040161020090612269565b600254604080516374fd6c7760e11b815290516001600160a01b0390921691829163e9fad8ee91600480830192600092919082900301818387803b15801561060457600080fd5b505af1158015610618573d6000803e3d6000fd5b5050505060006106306001546001600160a01b031690565b90506000826001600160a01b03166372f702f36040518163ffffffff1660e01b815260040160206040518083038186803b15801561066d57600080fd5b505afa158015610681573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a5919061200d565b6040516370a0823160e01b81523060048201529091506001600160a01b0382169063a9059cbb90849083906370a082319060240160206040518083038186803b1580156106f157600080fd5b505afa158015610705573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610729919061216b565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561076f57600080fd5b505af1158015610783573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a79190612130565b506000836001600160a01b031663d1af0c7d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107e357600080fd5b505afa1580156107f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081b919061200d565b6040516370a0823160e01b81523060048201529091506001600160a01b0382169063a9059cbb90859083906370a082319060240160206040518083038186803b15801561086757600080fd5b505afa15801561087b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089f919061216b565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044015b602060405180830381600087803b1580156108e657600080fd5b505af11580156108fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091e9190612130565b5050505050565b604051630d7100e360e31b8152306004820152600090819073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b15801561097457600080fd5b505af4158015610988573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ac919061200d565b90506001600160a01b0381163014156109d1575050600154600160a01b900460ff1690565b600154600160a01b900460ff168061038c5750806001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a1d57600080fd5b505afa158015610a31573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038c9190612130565b604051630d7100e360e31b815230600482018190529073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b158015610aa257600080fd5b505af4158015610ab6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ada919061200d565b6001600160a01b03161415610bd2576000610af361026a565b6040516321f8a72160e01b81527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf17597439560048201526001600160a01b0391909116906321f8a7219060240160206040518083038186803b158015610b5457600080fd5b505afa158015610b68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8c919061200d565b6001549091506001600160a01b0316331480610bb05750336001600160a01b038216145b610bcc5760405162461bcd60e51b8152600401610200906122aa565b50610bfc565b6001546001600160a01b03163314610bfc5760405162461bcd60e51b8152600401610200906122aa565b610c04610925565b15610c445760405162461bcd60e51b815260206004820152601060248201526f105d5d1bdb585d194e881c185d5cd95960821b6044820152606401610200565b6001805460ff60a01b1916600160a01b179055565b806040518060400160405280601d81526020017f426f6e646170706574697453796e7468657469784c5052657374616b65000000815250610c9a8282611bcd565b506002546040516246613160e11b81523060048201526000916001600160a01b031690628cc2629060240160206040518083038186803b158015610cdd57600080fd5b505afa158015610cf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d15919061216b565b11610d625760405162461bcd60e51b815260206004820152602960248201526000805160206123d58339815191526044820152681b9bc819585c9b995960ba1b6064820152608401610200565b6000610d6c61026a565b6040516321f8a72160e01b81527fa446c21f636a27494eaafaffc073cc3325d32c4efaa774c3f2a297ebef86980360048201526001600160a01b0391909116906321f8a7219060240160206040518083038186803b158015610dcd57600080fd5b505afa158015610de1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e05919061200d565b90506001600160a01b038116610e7b5760405162461bcd60e51b815260206004820152604160248201526000805160206123d583398151915260448201527f756e697377617020726f7574657220636f6e7472616374206e6f7420666f756e6064820152601960fa1b608482015260a401610200565b600260009054906101000a90046001600160a01b03166001600160a01b0316633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610ecb57600080fd5b505af1158015610edf573d6000803e3d6000fd5b505050506000600260009054906101000a90046001600160a01b03166001600160a01b031663d1af0c7d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f3357600080fd5b505afa158015610f47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6b919061200d565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b158015610fb057600080fd5b505afa158015610fc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe8919061216b565b90506000610ff7600283612349565b90506000611005828461236b565b905061101a6001600160a01b03851686611e89565b600254604080516372f702f360e01b815290516000926001600160a01b0316916372f702f3916004808301926020929190829003018186803b15801561105f57600080fd5b505afa158015611073573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611097919061200d565b90506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156110d457600080fd5b505afa1580156110e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110c919061200d565b90506000866001600160a01b0316826001600160a01b03161461138657604080516002808252606082018352600092602083019080368337019050509050878160008151811061115e5761115e612390565b60200260200101906001600160a01b031690816001600160a01b031681525050828160018151811061119257611192612390565b6001600160a01b03928316602091820292909201015260405163d06ca61f60e01b81526000918b169063d06ca61f906111d1908a9086906004016122ec565b60006040518083038186803b1580156111e957600080fd5b505afa1580156111fd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611225919081019061206b565b60018351611233919061236b565b8151811061124357611243612390565b60200260200101519050600081116112b15760405162461bcd60e51b815260206004820152603f60248201526000805160206123d583398151915260448201527f656d707479206c697175696469747920666f7220746f6b656e302073776170006064820152608401610200565b6040516338ed173960e01b81526001600160a01b038b16906338ed1739906112e5908a90859087903090429060040161230d565b600060405180830381600087803b1580156112ff57600080fd5b505af1158015611313573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261133b919081019061206b565b60018351611349919061236b565b8151811061135957611359612390565b6020026020010151925061137f8a856001600160a01b0316611e8990919063ffffffff16565b5050611389565b50835b6000836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156113c457600080fd5b505afa1580156113d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fc919061200d565b90506000886001600160a01b0316826001600160a01b03161461167657604080516002808252606082018352600092602083019080368337019050509050898160008151811061144e5761144e612390565b60200260200101906001600160a01b031690816001600160a01b031681525050828160018151811061148257611482612390565b6001600160a01b03928316602091820292909201015260405163d06ca61f60e01b81526000918d169063d06ca61f906114c1908b9086906004016122ec565b60006040518083038186803b1580156114d957600080fd5b505afa1580156114ed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611515919081019061206b565b60018351611523919061236b565b8151811061153357611533612390565b60200260200101519050600081116115a15760405162461bcd60e51b815260206004820152603f60248201526000805160206123d583398151915260448201527f656d707479206c697175696469747920666f7220746f6b656e312073776170006064820152608401610200565b6040516338ed173960e01b81526001600160a01b038d16906338ed1739906115d5908b90859087903090429060040161230d565b600060405180830381600087803b1580156115ef57600080fd5b505af1158015611603573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261162b919081019061206b565b60018351611639919061236b565b8151811061164957611649612390565b6020026020010151925061166f8c856001600160a01b0316611e8990919063ffffffff16565b5050611679565b50845b60405162e8e33760e81b81526001600160a01b0385811660048301528381166024830152604482018590526064820183905260006084830181905260a48301523060c48301524260e48301528b169063e8e337009061010401606060405180830381600087803b1580156116ec57600080fd5b505af1158015611700573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117249190612184565b505060025461174091506001600160a01b038781169116611e89565b6002546040516370a0823160e01b81523060048201526001600160a01b039182169163a694fc3a91908816906370a082319060240160206040518083038186803b15801561178d57600080fd5b505afa1580156117a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c5919061216b565b6040518263ffffffff1660e01b81526004016117e391815260200190565b600060405180830381600087803b1580156117fd57600080fd5b505af1158015611811573d6000803e3d6000fd5b5050505050505050505050505050505050565b6001546001600160a01b0316331461184e5760405162461bcd60e51b815260040161020090612269565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b15801561189857600080fd5b505af11580156118ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d09190612130565b50505050565b6001546001600160a01b031633146119005760405162461bcd60e51b815260040161020090612269565b600254604080516372f702f360e01b815290516001600160a01b039092169160009183916372f702f391600480820192602092909190829003018186803b15801561194a57600080fd5b505afa15801561195e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611982919061200d565b90506119976001600160a01b03821683611e89565b6040516370a0823160e01b81523060048201526001600160a01b038084169163a694fc3a918416906370a082319060240160206040518083038186803b1580156119e057600080fd5b505afa1580156119f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a18919061216b565b6040518263ffffffff1660e01b8152600401611a3691815260200190565b600060405180830381600087803b158015611a5057600080fd5b505af1158015611a64573d6000803e3d6000fd5b505050505050565b6001546001600160a01b03163314611a965760405162461bcd60e51b815260040161020090612269565b604051630d7100e360e31b815230600482018190529073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b158015611ae357600080fd5b505af4158015611af7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1b919061200d565b6001600160a01b031614611b7b5760405162461bcd60e51b815260206004820152602160248201527f4175746f6d6174653a206368616e676520746865206f776e6572206661696c656044820152601960fa1b6064820152608401610200565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000611bd7610925565b15611c175760405162461bcd60e51b815260206004820152601060248201526f105d5d1bdb585d194e881c185d5cd95960821b6044820152606401610200565b6000611c2b6001546001600160a01b031690565b9050326001600160a01b0382161415611c48576000915050611e83565b6000611c5261026a565b6040516321f8a72160e01b81527fe78c16c6d839536d3155985aab4e9c6013c8c3d446054bcebc48612f359d81f560048201529091506000906001600160a01b038316906321f8a7219060240160206040518083038186803b158015611cb757600080fd5b505afa158015611ccb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cef919061200d565b90506001600160a01b038116611d5b5760405162461bcd60e51b815260206004820152602b60248201527f4175746f6d6174653a3a5f62696c6c3a2062616c616e636520636f6e7472616360448201526a1d081b9bdd08199bdd5b9960aa1b6064820152608401610200565b60405163bd02d0f560e01b81527fa93d95f96a5de25d7a41ddf1f5e8d45cfc929c4838163cf011dab4043a4a40d560048201526000906001600160a01b0384169063bd02d0f59060240160206040518083038186803b158015611dbd57600080fd5b505afa158015611dd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df5919061216b565b60405163e578a22560e01b81529091506001600160a01b0383169063e578a22590611e2a9087908b9086908c906004016121f6565b602060405180830381600087803b158015611e4457600080fd5b505af1158015611e58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7c919061216b565b9450505050505b92915050565b6102668282600019604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e9060440160206040518083038186803b158015611edc57600080fd5b505afa158015611ef0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f14919061216b565b90508015801590611f2457508181105b15611fad5760405163095ea7b360e01b81526001600160a01b0384811660048301526000602483015285169063095ea7b390604401602060405180830381600087803b158015611f7357600080fd5b505af1158015611f87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fab9190612130565b505b8181146118d05760405163095ea7b360e01b81526001600160a01b0384811660048301526024820184905285169063095ea7b3906044016108cc565b600060208284031215611ffb57600080fd5b8135612006816123bc565b9392505050565b60006020828403121561201f57600080fd5b8151612006816123bc565b60008060006060848603121561203f57600080fd5b833561204a816123bc565b9250602084013561205a816123bc565b929592945050506040919091013590565b6000602080838503121561207e57600080fd5b825167ffffffffffffffff8082111561209657600080fd5b818501915085601f8301126120aa57600080fd5b8151818111156120bc576120bc6123a6565b8060051b604051601f19603f830116810181811085821117156120e1576120e16123a6565b604052828152858101935084860182860187018a101561210057600080fd5b600095505b83861015612123578051855260019590950194938601938601612105565b5098975050505050505050565b60006020828403121561214257600080fd5b8151801515811461200657600080fd5b60006020828403121561216457600080fd5b5035919050565b60006020828403121561217d57600080fd5b5051919050565b60008060006060848603121561219957600080fd5b8351925060208401519150604084015190509250925092565b600081518084526020808501945080840160005b838110156121eb5781516001600160a01b0316875295820195908201906001016121c6565b509495945050505050565b60018060a01b038516815260006020858184015284604084015260806060840152835180608085015260005b8181101561223e5785810183015185820160a001528201612222565b8181111561225057600060a083870101525b50601f01601f19169290920160a0019695505050505050565b60208082526021908201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e656040820152603960f91b606082015260800190565b60208082526022908201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360408201526132b960f11b606082015260800190565b82815260406020820152600061230560408301846121b2565b949350505050565b85815284602082015260a06040820152600061232c60a08301866121b2565b6001600160a01b0394909416606083015250608001529392505050565b60008261236657634e487b7160e01b600052601260045260246000fd5b500490565b60008282101561238b57634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146123d157600080fd5b5056fe53796e746865746978556e69737761704c7052657374616b653a3a72756e3a20a2646970667358221220f0ec9bc36d4d82f3b4b5615ea45887c0616a980aedb9046043ff68b993aae2fc64736f6c63430008060033",
  "libraries": {
    "ERC1167": "0x892c0FdcE4D48E59e34Ed0bEe611BeCf988dF6a9"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "transfer(address,address,uint256)": {
        "params": {
          "amount": "Transferred amount of tokens.",
          "recipient": "Token recipient address.",
          "token": "The address of the token to be transferred."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "info()": {
        "notice": "Returns address of Storage contract."
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "pause()": {
        "notice": "Pause contract."
      },
      "paused()": {
        "notice": "Returns true if the contract is paused, and false otherwise."
      },
      "transfer(address,address,uint256)": {
        "notice": "Transfer ERC20 token to recipient."
      },
      "unpause()": {
        "notice": "Unpause contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5,
        "contract": "automates/bondappetit/SynthetixUniswapLpRestake.automate.sol:SynthetixUniswapLpRestake",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8,
        "contract": "automates/bondappetit/SynthetixUniswapLpRestake.automate.sol:SynthetixUniswapLpRestake",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1789,
        "contract": "automates/bondappetit/SynthetixUniswapLpRestake.automate.sol:SynthetixUniswapLpRestake",
        "label": "_info",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1792,
        "contract": "automates/bondappetit/SynthetixUniswapLpRestake.automate.sol:SynthetixUniswapLpRestake",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1795,
        "contract": "automates/bondappetit/SynthetixUniswapLpRestake.automate.sol:SynthetixUniswapLpRestake",
        "label": "_paused",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 834,
        "contract": "automates/bondappetit/SynthetixUniswapLpRestake.automate.sol:SynthetixUniswapLpRestake",
        "label": "staking",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IStaking)2728"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IStaking)2728": {
        "encoding": "inplace",
        "label": "contract IStaking",
        "numberOfBytes": "20"
      }
    }
  }
}
{
  "address": "0x43A89De6F13B3077f8F13dBAC18b9D78868Fe759",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_info",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "protocolFee",
          "type": "int256"
        }
      ],
      "name": "ProtocolFeeChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "__protocolFee",
          "type": "int256"
        }
      ],
      "name": "changeProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deadline",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "info",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidityRouter",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_slippage",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_deadline",
          "type": "uint16"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gasFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "outMin",
              "type": "uint256"
            }
          ],
          "internalType": "struct ApeRewardV4Restake.Swap",
          "name": "swap",
          "type": "tuple"
        }
      ],
      "name": "run",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippage",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract IApeRewardV4",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0321e6719c3862b3fd75f6d0fc61e382b17ece0ce3fbf1b923d5f054b91a08f1",
  "receipt": {
    "to": null,
    "from": "0xBB73463b88b0Cb9681f176d6D43a12C2FeA2c237",
    "contractAddress": "0x43A89De6F13B3077f8F13dBAC18b9D78868Fe759",
    "transactionIndex": 9,
    "gasUsed": "3211429",
    "logsBloom": "0x
    "blockHash": "0x016b60503cddc5206ca281336332664b4f1363d294af54aa4d713aaa654fc6e8",
    "transactionHash": "0x0321e6719c3862b3fd75f6d0fc61e382b17ece0ce3fbf1b923d5f054b91a08f1",
    "logs": [],
    "blockNumber": 14268402,
    "cumulativeGasUsed": "5005405",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1CeC05129206d9fBEE2e86E1A9294E64f7F86461"
  ],
  "solcInputHash": "d247950f0070e334c8eac88b8a7616ce",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_info\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"protocolFee\",\"type\":\"int256\"}],\"name\":\"ProtocolFeeChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"__protocolFee\",\"type\":\"int256\"}],\"name\":\"changeProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"info\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityRouter\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_slippage\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_deadline\",\"type\":\"uint16\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"outMin\",\"type\":\"uint256\"}],\"internalType\":\"struct ApeRewardV4Restake.Swap\",\"name\":\"swap\",\"type\":\"tuple\"}],\"name\":\"run\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IApeRewardV4\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"changeProtocolFee(int256)\":{\"params\":{\"__protocolFee\":\"New protocol fee.\"}},\"protocolFee()\":{\"returns\":{\"_0\":\"Current protocol fee.\"}},\"transfer(address,address,uint256)\":{\"params\":{\"amount\":\"Transferred amount of tokens.\",\"recipient\":\"Token recipient address.\",\"token\":\"The address of the token to be transferred.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeProtocolFee(int256)\":{\"notice\":\"Change protocol fee.\"},\"info()\":{\"notice\":\"Returns address of Storage contract.\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"pause()\":{\"notice\":\"Pause contract.\"},\"paused()\":{\"notice\":\"Returns true if the contract is paused, and false otherwise.\"},\"transfer(address,address,uint256)\":{\"notice\":\"Transfer ERC20 token to recipient.\"},\"unpause()\":{\"notice\":\"Unpause contract.\"}},\"notice\":\"Use with simple token only.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"automates/bscApeSwap/ApeRewardV4Restake.automate.sol\":\"ApeRewardV4Restake\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"automates/bscApeSwap/ApeRewardV4Restake.automate.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../utils/DFH/Automate.sol\\\";\\nimport \\\"../utils/DFH/IStorage.sol\\\";\\nimport \\\"../utils/Uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"./IApeRewardV4.sol\\\";\\nimport {ERC20Tools} from \\\"../utils/ERC20Tools.sol\\\";\\n\\n/**\\n * @notice Use with simple token only.\\n */\\ncontract ApeRewardV4Restake is Automate {\\n  using ERC20Tools for IERC20;\\n\\n  struct Swap {\\n    address[] path;\\n    uint256 outMin;\\n  }\\n\\n  IApeRewardV4 public staking;\\n\\n  address public liquidityRouter;\\n\\n  uint16 public slippage;\\n\\n  uint16 public deadline;\\n\\n  IERC20 public stakingToken;\\n\\n  IERC20 public rewardToken;\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor(address _info) Automate(_info) {}\\n\\n  function init(\\n    address _staking,\\n    address _liquidityRouter,\\n    uint16 _slippage,\\n    uint16 _deadline\\n  ) external initializer {\\n    require(\\n      !_initialized || address(staking) == _staking,\\n      \\\"ApeRewardV4Restake::init: reinitialize staking address forbidden\\\"\\n    );\\n    staking = IApeRewardV4(_staking);\\n    require(\\n      !_initialized || liquidityRouter == _liquidityRouter,\\n      \\\"ApeRewardV4Restake::init: reinitialize liquidity router address forbidden\\\"\\n    );\\n    liquidityRouter = _liquidityRouter;\\n    slippage = _slippage;\\n    deadline = _deadline;\\n\\n    if (!_initialized) {\\n      stakingToken = IERC20(staking.STAKE_TOKEN());\\n      rewardToken = IERC20(staking.REWARD_TOKEN());\\n    }\\n  }\\n\\n  function deposit() external onlyOwner {\\n    IERC20 _stakingToken = stakingToken; // gas optimisation\\n    uint256 balance = _stakingToken.balanceOf(address(this));\\n    _stakingToken.safeApprove(address(staking), balance);\\n    staking.deposit(balance);\\n  }\\n\\n  function refund() external onlyOwner {\\n    IApeRewardV4 _staking = staking; // gas optimisation\\n    address __owner = owner(); // gas optimisation\\n    IApeRewardV4.UserInfo memory userInfo = _staking.userInfo(address(this));\\n    _staking.withdraw(userInfo.amount);\\n    stakingToken.transfer(__owner, stakingToken.balanceOf(address(this)));\\n    rewardToken.transfer(__owner, rewardToken.balanceOf(address(this)));\\n  }\\n\\n  function emergencyWithdraw() external onlyOwner {\\n    address __owner = owner(); // gas optimisation\\n    staking.emergencyWithdraw();\\n    stakingToken.transfer(__owner, stakingToken.balanceOf(address(this)));\\n    rewardToken.transfer(__owner, rewardToken.balanceOf(address(this)));\\n  }\\n\\n  function _swap(\\n    address[] memory path,\\n    uint256[2] memory amount,\\n    uint256 _deadline\\n  ) internal {\\n    if (path[0] == path[path.length - 1]) return;\\n\\n    IUniswapV2Router02(liquidityRouter).swapExactTokensForTokens(amount[0], amount[1], path, address(this), _deadline);\\n  }\\n\\n  function run(\\n    uint256 gasFee,\\n    uint256 _deadline,\\n    Swap memory swap\\n  ) external bill(gasFee, \\\"BscApeSwapAPeRewardV4Restake\\\") {\\n    IApeRewardV4 _staking = staking; // gas optimization\\n    IERC20 _stakingToken = stakingToken;\\n    require(_staking.pendingReward(address(this)) > 0, \\\"ApeRewardV4Restake::run: no earned\\\");\\n\\n    _staking.deposit(0); // get all reward\\n    uint256 rewardAmount = rewardToken.balanceOf(address(this));\\n    rewardToken.safeApprove(liquidityRouter, rewardAmount);\\n    _swap(swap.path, [rewardAmount, swap.outMin], _deadline);\\n\\n    uint256 stakingAmount = _stakingToken.balanceOf(address(this));\\n    _stakingToken.safeApprove(address(_staking), stakingAmount);\\n    _staking.deposit(stakingAmount);\\n  }\\n}\\n\",\"keccak256\":\"0xc93ba3d89049b904025eb99bf180da9dfe4ba4b2689d8ee076367a602f2490e8\",\"license\":\"BSD-3-Clause\"},\"automates/bscApeSwap/IApeRewardV4.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IApeRewardV4 {\\n  struct UserInfo {\\n    uint256 amount;\\n    uint256 rewardDebt;\\n  }\\n\\n  struct PoolInfo {\\n    address lpToken;\\n    uint256 allocPoint;\\n    uint256 lastRewardBlock;\\n    uint256 accRewardTokenPerShare;\\n  }\\n\\n  function STAKE_TOKEN() external view returns (address);\\n\\n  function REWARD_TOKEN() external view returns (address);\\n\\n  function poolInfo() external view returns (PoolInfo memory);\\n\\n  function userInfo(address user) external view returns (UserInfo memory);\\n\\n  function pendingReward(address user) external view returns (uint256);\\n\\n  function deposit(uint256 amount) external;\\n\\n  function withdraw(uint256 amount) external;\\n\\n  function emergencyWithdraw() external;\\n}\\n\",\"keccak256\":\"0x6e510286820833696940f55fd9c0adfca40a877834c94596cf35062302a986d3\",\"license\":\"BSD-3-Clause\"},\"automates/utils/DFH/Automate.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./proxy/ERC1167.sol\\\";\\nimport \\\"./IStorage.sol\\\";\\nimport \\\"./IBalance.sol\\\";\\n\\n// solhint-disable avoid-tx-origin\\nabstract contract Automate {\\n  using ERC1167 for address;\\n\\n  /// @notice Storage contract address.\\n  address internal _info;\\n\\n  /// @notice Contract owner.\\n  address internal _owner;\\n\\n  /// @notice Is contract paused.\\n  bool internal _paused;\\n\\n  /// @notice Protocol fee in USD (-1 if value in global storage).\\n  int256 internal _protocolFee;\\n\\n  /// @notice Is contract already initialized.\\n  bool internal _initialized;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  event ProtocolFeeChanged(int256 protocolFee);\\n\\n  constructor(address __info) {\\n    _info = __info;\\n    _owner = tx.origin;\\n    _protocolFee = -1;\\n  }\\n\\n  /**\\n   * @notice Returns address of Storage contract.\\n   */\\n  function info() public view returns (address) {\\n    address impl = address(this).implementation();\\n    if (impl == address(this)) return _info;\\n\\n    return Automate(impl).info();\\n  }\\n\\n  /// @dev Modifier to protect an initializer function from being invoked twice.\\n  modifier initializer() {\\n    if (_owner == address(0)) {\\n      _owner = tx.origin;\\n      _protocolFee = -1;\\n    } else {\\n      require(_owner == msg.sender, \\\"Automate: caller is not the owner\\\");\\n    }\\n    _;\\n    _initialized = true;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(_owner == msg.sender, \\\"Automate: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external onlyOwner {\\n    require(address(this).implementation() == address(this), \\\"Automate: change the owner failed\\\");\\n\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the pauser.\\n   */\\n  modifier onlyPauser() {\\n    if (address(this).implementation() == address(this)) {\\n      address pauser = IStorage(info()).getAddress(keccak256(\\\"DFH:Pauser\\\"));\\n      require(msg.sender == _owner || msg.sender == pauser, \\\"Automate: caller is not the pauser\\\");\\n    } else {\\n      require(msg.sender == _owner, \\\"Automate: caller is not the pauser\\\");\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Returns true if the contract is paused, and false otherwise.\\n   */\\n  function paused() public view returns (bool) {\\n    address impl = address(this).implementation();\\n    if (impl == address(this)) return _paused;\\n\\n    return _paused || Automate(impl).paused();\\n  }\\n\\n  /**\\n   * @dev Throws if contract unpaused.\\n   */\\n  modifier whenPaused() {\\n    require(paused(), \\\"Automate: not paused\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Throws if contract paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused(), \\\"Automate: paused\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Pause contract.\\n   */\\n  function pause() external onlyPauser whenNotPaused {\\n    _paused = true;\\n  }\\n\\n  /**\\n   * @notice Unpause contract.\\n   */\\n  function unpause() external onlyPauser whenPaused {\\n    _paused = false;\\n  }\\n\\n  /**\\n   * @return Current protocol fee.\\n   */\\n  function protocolFee() public view returns (uint256) {\\n    address impl = address(this).implementation();\\n    if (impl != address(this) && _protocolFee < 0) {\\n      return Automate(impl).protocolFee();\\n    }\\n\\n    IStorage __info = IStorage(info());\\n    uint256 feeOnUSD = _protocolFee < 0 ? __info.getUint(keccak256(\\\"DFH:Fee:Automate\\\")) : uint256(_protocolFee);\\n    if (feeOnUSD == 0) return 0;\\n\\n    (, int256 price, , , ) = AggregatorV3Interface(__info.getAddress(keccak256(\\\"DFH:Fee:PriceFeed\\\"))).latestRoundData();\\n    require(price > 0, \\\"Automate: invalid price\\\");\\n\\n    return (feeOnUSD * 1e18) / uint256(price);\\n  }\\n\\n  /**\\n   * @notice Change protocol fee.\\n   * @param __protocolFee New protocol fee.\\n   */\\n  function changeProtocolFee(int256 __protocolFee) external {\\n    address impl = address(this).implementation();\\n    require(\\n      (impl == address(this) ? _owner : Automate(impl).owner()) == msg.sender,\\n      \\\"Automate::changeProtocolFee: caller is not the protocol owner\\\"\\n    );\\n\\n    _protocolFee = __protocolFee;\\n    emit ProtocolFeeChanged(__protocolFee);\\n  }\\n\\n  /**\\n   * @dev Claim fees from owner.\\n   * @param gasFee Claim gas fee.\\n   * @param operation Claim description.\\n   */\\n  function _bill(uint256 gasFee, string memory operation) internal whenNotPaused returns (uint256) {\\n    address account = owner(); // gas optimisation\\n    if (tx.origin == account) return 0; // free if called by the owner\\n\\n    IStorage __info = IStorage(info());\\n\\n    address balance = __info.getAddress(keccak256(\\\"DFH:Contract:Balance\\\"));\\n    require(balance != address(0), \\\"Automate::_bill: balance contract not found\\\");\\n\\n    return IBalance(balance).claim(account, gasFee, protocolFee(), operation);\\n  }\\n\\n  /**\\n   * @dev Claim fees from owner.\\n   * @param gasFee Claim gas fee.\\n   * @param operation Claim description.\\n   */\\n  modifier bill(uint256 gasFee, string memory operation) {\\n    _bill(gasFee, operation);\\n    _;\\n  }\\n\\n  /**\\n   * @notice Transfer ERC20 token to recipient.\\n   * @param token The address of the token to be transferred.\\n   * @param recipient Token recipient address.\\n   * @param amount Transferred amount of tokens.\\n   */\\n  function transfer(\\n    address token,\\n    address recipient,\\n    uint256 amount\\n  ) external onlyOwner {\\n    IERC20(token).transfer(recipient, amount);\\n  }\\n}\\n\",\"keccak256\":\"0xb0b26358673f6750ee6eef40b1a9668a3dc2965ffb1e1d777c3c8ca8cc2ce5a5\",\"license\":\"BSD-3-Clause\"},\"automates/utils/DFH/IBalance.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IBalance {\\n  function claim(\\n    address account,\\n    uint256 gasFee,\\n    uint256 protocolFee,\\n    string memory description\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xaa996ebfd96fa304ff8c51b240819815ea9cb1b27a250319c57cac7b597be6cc\",\"license\":\"BSD-3-Clause\"},\"automates/utils/DFH/IStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IStorage {\\n  function getBytes(bytes32 key) external view returns (bytes memory);\\n\\n  function getBool(bytes32 key) external view returns (bool);\\n\\n  function getUint(bytes32 key) external view returns (uint256);\\n\\n  function getInt(bytes32 key) external view returns (int256);\\n\\n  function getAddress(bytes32 key) external view returns (address);\\n\\n  function getString(bytes32 key) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xc3f6f2d80c27a1d5abbf6f6df55c96a315cdf7887b589c9ef5d45d036c56aa76\",\"license\":\"BSD-3-Clause\"},\"automates/utils/DFH/proxy/ERC1167.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable no-inline-assembly\\nlibrary ERC1167 {\\n  bytes public constant CLONE =\\n    hex\\\"363d3d373d3d3d363d73bebebebebebebebebebebebebebebebebebebebe5af43d82803e903d91602b57fd5bf3\\\";\\n\\n  /**\\n   * @notice Make new proxy contract.\\n   * @param impl Address prototype contract.\\n   * @return proxy Address new proxy contract.\\n   */\\n  function clone(address impl) external returns (address proxy) {\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(ptr, 0x14), shl(0x60, impl))\\n      mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      proxy := create(0, ptr, 0x37)\\n    }\\n    require(proxy != address(0), \\\"ERC1167: create failed\\\");\\n  }\\n\\n  /**\\n   * @notice Returns address of prototype contract for proxy.\\n   * @param proxy Address proxy contract.\\n   * @return impl Address prototype contract (current contract address if not proxy).\\n   */\\n  function implementation(address proxy) external view returns (address impl) {\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(proxy)\\n    }\\n\\n    impl = proxy;\\n    if (size <= 45 && size >= 41) {\\n      bool matches = true;\\n      uint256 i;\\n\\n      bytes memory code;\\n      assembly {\\n        code := mload(0x40)\\n        mstore(0x40, add(code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n        mstore(code, size)\\n        extcodecopy(proxy, add(code, 0x20), 0, size)\\n      }\\n      for (i = 0; matches && i < 9; i++) {\\n        matches = code[i] == CLONE[i];\\n      }\\n      for (i = 0; matches && i < 15; i++) {\\n        if (i == 4) {\\n          matches = code[code.length - i - 1] == bytes1(uint8(CLONE[45 - i - 1]) - uint8(45 - size));\\n        } else {\\n          matches = code[code.length - i - 1] == CLONE[45 - i - 1];\\n        }\\n      }\\n      if (code[9] != bytes1(0x73 - uint8(45 - size))) {\\n        matches = false;\\n      }\\n      uint256 forwardedToBuffer;\\n      if (matches) {\\n        assembly {\\n          forwardedToBuffer := mload(add(code, 30))\\n        }\\n        forwardedToBuffer &= (0x1 << (20 * 8)) - 1;\\n        impl = address(uint160(forwardedToBuffer >> ((45 - size) * 8)));\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x766f43e1832068a2a230f9bc19db0b190f638c4b0acb2dc689da07d43a45675f\",\"license\":\"BSD-3-Clause\"},\"automates/utils/ERC20Tools.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary ERC20Tools {\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 allowance = token.allowance(address(this), spender);\\n    if (allowance != 0 && allowance < value) {\\n      token.approve(spender, 0);\\n    }\\n    if (allowance != value) {\\n      token.approve(spender, value);\\n    }\\n  }\\n\\n  function safeApproveAll(IERC20 token, address spender) internal {\\n    safeApprove(token, spender, 2**256 - 1);\\n  }\\n}\\n\",\"keccak256\":\"0x099bc27ecc2cbc3474fca81003c55eac408130fb911f21364d9f3dec9afc0620\",\"license\":\"BSD-3-Clause\"},\"automates/utils/Uniswap/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IUniswapV2Router02 {\\n  function factory() external view returns (address);\\n\\n  function WETH() external view returns (address);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 amountADesired,\\n    uint256 amountBDesired,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (\\n      uint256 amountA,\\n      uint256 amountB,\\n      uint256 liquidity\\n    );\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint256 amountTokenDesired,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    payable\\n    returns (\\n      uint256 amountToken,\\n      uint256 amountETH,\\n      uint256 liquidity\\n    );\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function swapExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactTokens(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactETHForTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactETH(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactTokensForETH(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapETHForExactTokens(\\n    uint256 amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) external pure returns (uint256 amountB);\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountOut);\\n\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountIn);\\n\\n  function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n  function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountETH);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountETH);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n}\\n\",\"keccak256\":\"0xf12b9639d5053651c2416527a638fd3168276feb207265374d87574a9a312f75\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200392338038062003923833981016040819052620000349162000069565b600080546001600160a01b039092166001600160a01b031992831617905560018054909116321790556000196002556200009b565b6000602082840312156200007c57600080fd5b81516001600160a01b03811681146200009457600080fd5b9392505050565b61387880620000ab6000396000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c806372f702f3116100cd578063beabacc811610081578063db2e21bc11610066578063db2e21bc14610323578063f2fde38b1461032b578063f7c618c11461033e57600080fd5b8063beabacc814610308578063d0e30db01461031b57600080fd5b80638da5cb5b116100b25780638da5cb5b146102c15780639742b5c3146102df578063b0e21e8a146102f257600080fd5b806372f702f3146102995780638456cb59146102b957600080fd5b80633e032a3b116101245780634cf088d9116101095780634cf088d914610254578063590e1ae3146102795780635c975abb1461028157600080fd5b80633e032a3b146102265780633f4ba83a1461024c57600080fd5b80632470294411610155578063247029441461019957806329dcb0cf146101e3578063370158ea1461021e57600080fd5b806313ead7c6146101715780631b586aff14610186575b600080fd5b61018461017f366004613423565b61035e565b005b610184610194366004613267565b6107aa565b6004546101b99073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b60045461020b90760100000000000000000000000000000000000000000000900461ffff1681565b60405161ffff90911681526020016101da565b6101b9610d3e565b60045461020b9074010000000000000000000000000000000000000000900461ffff1681565b610184610ea0565b6003546101b990610100900473ffffffffffffffffffffffffffffffffffffffff1681565b610184611232565b6102896116ea565b60405190151581526020016101da565b6005546101b99073ffffffffffffffffffffffffffffffffffffffff1681565b61018461186f565b60015473ffffffffffffffffffffffffffffffffffffffff166101b9565b6101846102ed3660046133bf565b611c19565b6102fa611e53565b6040519081526020016101da565b6101846103163660046132bf565b612260565b610184612362565b61018461256a565b610184610339366004613226565b612957565b6006546101b99073ffffffffffffffffffffffffffffffffffffffff1681565b826040518060400160405280601c81526020017f42736341706553776170415065526577617264563452657374616b650000000081525061039f8282612bb6565b506003546005546040517ff40f0f5200000000000000000000000000000000000000000000000000000000815230600482015261010090920473ffffffffffffffffffffffffffffffffffffffff90811692911690600090839063f40f0f529060240160206040518083038186803b15801561041a57600080fd5b505afa15801561042e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610452919061340a565b116104e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f417065526577617264563452657374616b653a3a72756e3a206e6f206561726e60448201527f656400000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6040517fb6b55f250000000000000000000000000000000000000000000000000000000081526000600482015273ffffffffffffffffffffffffffffffffffffffff83169063b6b55f2590602401600060405180830381600087803b15801561054c57600080fd5b505af1158015610560573d6000803e3d6000fd5b50506006546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000935073ffffffffffffffffffffffffffffffffffffffff90911691506370a082319060240160206040518083038186803b1580156105d057600080fd5b505afa1580156105e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610608919061340a565b6004546006549192506106359173ffffffffffffffffffffffffffffffffffffffff908116911683612e88565b61065c866000015160405180604001604052808481526020018960200151815250896130a6565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906370a082319060240160206040518083038186803b1580156106c457600080fd5b505afa1580156106d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fc919061340a565b905061071f73ffffffffffffffffffffffffffffffffffffffff84168583612e88565b6040517fb6b55f250000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff85169063b6b55f2590602401600060405180830381600087803b15801561078757600080fd5b505af115801561079b573d6000803e3d6000fd5b50505050505050505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff1661081a57600180547fffffffffffffffffffffffff000000000000000000000000000000000000000016321790557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6002556108c1565b60015473ffffffffffffffffffffffffffffffffffffffff1633146108c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016104db565b60035460ff1615806108f2575060035473ffffffffffffffffffffffffffffffffffffffff85811661010090920416145b61098057604080517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482015260248101919091527f417065526577617264563452657374616b653a3a696e69743a207265696e697460448201527f69616c697a65207374616b696e67206164647265737320666f7262696464656e60648201526084016104db565b6003805473ffffffffffffffffffffffffffffffffffffffff8616610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff8216811790925560ff91821691161715806109f5575060045473ffffffffffffffffffffffffffffffffffffffff8481169116145b610aa7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604960248201527f417065526577617264563452657374616b653a3a696e69743a207265696e697460448201527f69616c697a65206c697175696469747920726f7574657220616464726573732060648201527f666f7262696464656e0000000000000000000000000000000000000000000000608482015260a4016104db565b6004805461ffff838116760100000000000000000000000000000000000000000000027fffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffff91861674010000000000000000000000000000000000000000027fffffffffffffffffffff0000000000000000000000000000000000000000000090931673ffffffffffffffffffffffffffffffffffffffff881617929092171617905560035460ff16610d0d57600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631c39b6726040518163ffffffff1660e01b815260040160206040518083038186803b158015610bbb57600080fd5b505afa158015610bcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf3919061324a565b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff928316179055600354604080517f99248ea70000000000000000000000000000000000000000000000000000000081529051610100909204909216916399248ea7916004808301926020929190829003018186803b158015610c8f57600080fd5b505afa158015610ca3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc7919061324a565b600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169190911790555b5050600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555050565b6040517f6b8807180000000000000000000000000000000000000000000000000000000081523060048201526000908190731F59Ee3B1ff055Be0b84BcB6D7beAa7f984fFf2e90636b8807189060240160206040518083038186803b158015610da657600080fd5b505af4158015610dba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dde919061324a565b905073ffffffffffffffffffffffffffffffffffffffff8116301415610e1c57505060005473ffffffffffffffffffffffffffffffffffffffff1690565b8073ffffffffffffffffffffffffffffffffffffffff1663370158ea6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6257600080fd5b505afa158015610e76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9a919061324a565b91505090565b6040517f6b880718000000000000000000000000000000000000000000000000000000008152306004820181905290731F59Ee3B1ff055Be0b84BcB6D7beAa7f984fFf2e90636b8807189060240160206040518083038186803b158015610f0657600080fd5b505af4158015610f1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3e919061324a565b73ffffffffffffffffffffffffffffffffffffffff1614156110f3576000610f64610d3e565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf175974395600482015273ffffffffffffffffffffffffffffffffffffffff91909116906321f8a7219060240160206040518083038186803b158015610feb57600080fd5b505afa158015610fff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611023919061324a565b60015490915073ffffffffffffffffffffffffffffffffffffffff1633148061106157503373ffffffffffffffffffffffffffffffffffffffff8216145b6110ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084016104db565b5061119a565b60015473ffffffffffffffffffffffffffffffffffffffff16331461119a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084016104db565b6111a26116ea565b611208576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4175746f6d6174653a206e6f742070617573656400000000000000000000000060448201526064016104db565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055565b60015473ffffffffffffffffffffffffffffffffffffffff1633146112d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016104db565b60035473ffffffffffffffffffffffffffffffffffffffff61010090910416600061131960015473ffffffffffffffffffffffffffffffffffffffff1690565b6040517f1959a00200000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff841690631959a00290602401604080518083038186803b15801561138357600080fd5b505afa158015611397573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bb91906133d8565b80516040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815291925073ffffffffffffffffffffffffffffffffffffffff851691632e1a7d4d916114149160040190815260200190565b600060405180830381600087803b15801561142e57600080fd5b505af1158015611442573d6000803e3d6000fd5b50506005546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116925063a9059cbb9150849083906370a082319060240160206040518083038186803b1580156114b957600080fd5b505afa1580156114cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f1919061340a565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b15801561155c57600080fd5b505af1158015611570573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611594919061339d565b506006546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb90849083906370a082319060240160206040518083038186803b15801561160857600080fd5b505afa15801561161c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611640919061340a565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff909216600483015260248201526044015b602060405180830381600087803b1580156116ac57600080fd5b505af11580156116c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e4919061339d565b50505050565b6040517f6b8807180000000000000000000000000000000000000000000000000000000081523060048201526000908190731F59Ee3B1ff055Be0b84BcB6D7beAa7f984fFf2e90636b8807189060240160206040518083038186803b15801561175257600080fd5b505af4158015611766573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178a919061324a565b905073ffffffffffffffffffffffffffffffffffffffff81163014156117cd57505060015474010000000000000000000000000000000000000000900460ff1690565b60015474010000000000000000000000000000000000000000900460ff1680610e9a57508073ffffffffffffffffffffffffffffffffffffffff16635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561183757600080fd5b505afa15801561184b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9a919061339d565b6040517f6b880718000000000000000000000000000000000000000000000000000000008152306004820181905290731F59Ee3B1ff055Be0b84BcB6D7beAa7f984fFf2e90636b8807189060240160206040518083038186803b1580156118d557600080fd5b505af41580156118e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190d919061324a565b73ffffffffffffffffffffffffffffffffffffffff161415611ac2576000611933610d3e565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf175974395600482015273ffffffffffffffffffffffffffffffffffffffff91909116906321f8a7219060240160206040518083038186803b1580156119ba57600080fd5b505afa1580156119ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f2919061324a565b60015490915073ffffffffffffffffffffffffffffffffffffffff16331480611a3057503373ffffffffffffffffffffffffffffffffffffffff8216145b611abc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084016104db565b50611b69565b60015473ffffffffffffffffffffffffffffffffffffffff163314611b69576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084016104db565b611b716116ea565b15611bd8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4175746f6d6174653a207061757365640000000000000000000000000000000060448201526064016104db565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055565b6040517f6b880718000000000000000000000000000000000000000000000000000000008152306004820152600090731F59Ee3B1ff055Be0b84BcB6D7beAa7f984fFf2e90636b8807189060240160206040518083038186803b158015611c7f57600080fd5b505af4158015611c93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb7919061324a565b90503373ffffffffffffffffffffffffffffffffffffffff82163014611d5a578173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d1d57600080fd5b505afa158015611d31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d55919061324a565b611d74565b60015473ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff1614611e17576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603d60248201527f4175746f6d6174653a3a6368616e676550726f746f636f6c4665653a2063616c60448201527f6c6572206973206e6f74207468652070726f746f636f6c206f776e657200000060648201526084016104db565b60028290556040518281527f3c1d43943224e49d951ce8295a5c8332b517083b3f89bed50feae2cb39caebb59060200160405180910390a15050565b6040517f6b8807180000000000000000000000000000000000000000000000000000000081523060048201526000908190731F59Ee3B1ff055Be0b84BcB6D7beAa7f984fFf2e90636b8807189060240160206040518083038186803b158015611ebb57600080fd5b505af4158015611ecf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef3919061324a565b905073ffffffffffffffffffffffffffffffffffffffff81163014801590611f1d57506000600254125b15611fa0578073ffffffffffffffffffffffffffffffffffffffff1663b0e21e8a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f6857600080fd5b505afa158015611f7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9a919061340a565b6000611faa610d3e565b905060008060025412611fbf5760025461207c565b6040517fbd02d0f50000000000000000000000000000000000000000000000000000000081527fa93d95f96a5de25d7a41ddf1f5e8d45cfc929c4838163cf011dab4043a4a40d5600482015273ffffffffffffffffffffffffffffffffffffffff83169063bd02d0f59060240160206040518083038186803b15801561204457600080fd5b505afa158015612058573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207c919061340a565b90508061208d576000935050505090565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f65c90423fe7c880476633a7e36521740f87199d233dc56eb4ca6643eb76f605f600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906321f8a7219060240160206040518083038186803b15801561211557600080fd5b505afa158015612129573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214d919061324a565b73ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561219257600080fd5b505afa1580156121a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ca9190613514565b5050509150506000811361223a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4175746f6d6174653a20696e76616c696420707269636500000000000000000060448201526064016104db565b8061224d83670de0b6b3a7640000613765565b612257919061372a565b94505050505090565b60015473ffffffffffffffffffffffffffffffffffffffff163314612307576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016104db565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063a9059cbb90604401611692565b60015473ffffffffffffffffffffffffffffffffffffffff163314612409576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016104db565b6005546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9091169060009082906370a082319060240160206040518083038186803b15801561247757600080fd5b505afa15801561248b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124af919061340a565b6003549091506124de9073ffffffffffffffffffffffffffffffffffffffff8481169161010090041683612e88565b6003546040517fb6b55f250000000000000000000000000000000000000000000000000000000081526004810183905261010090910473ffffffffffffffffffffffffffffffffffffffff169063b6b55f2590602401600060405180830381600087803b15801561254e57600080fd5b505af1158015612562573d6000803e3d6000fd5b505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314612611576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016104db565b600061263260015473ffffffffffffffffffffffffffffffffffffffff1690565b9050600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663db2e21bc6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561269e57600080fd5b505af11580156126b2573d6000803e3d6000fd5b50506005546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116925063a9059cbb9150839083906370a082319060240160206040518083038186803b15801561272957600080fd5b505afa15801561273d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612761919061340a565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b1580156127cc57600080fd5b505af11580156127e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612804919061339d565b506006546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb90839083906370a082319060240160206040518083038186803b15801561287857600080fd5b505afa15801561288c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b0919061340a565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b15801561291b57600080fd5b505af115801561292f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612953919061339d565b5050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146129fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016104db565b6040517f6b880718000000000000000000000000000000000000000000000000000000008152306004820181905290731F59Ee3B1ff055Be0b84BcB6D7beAa7f984fFf2e90636b8807189060240160206040518083038186803b158015612a6457600080fd5b505af4158015612a78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a9c919061324a565b73ffffffffffffffffffffffffffffffffffffffff1614612b3f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a206368616e676520746865206f776e6572206661696c6560448201527f640000000000000000000000000000000000000000000000000000000000000060648201526084016104db565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000612bc06116ea565b15612c27576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4175746f6d6174653a207061757365640000000000000000000000000000000060448201526064016104db565b6000612c4860015473ffffffffffffffffffffffffffffffffffffffff1690565b90503273ffffffffffffffffffffffffffffffffffffffff82161415612c72576000915050612e82565b6000612c7c610d3e565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527fe78c16c6d839536d3155985aab4e9c6013c8c3d446054bcebc48612f359d81f5600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906321f8a7219060240160206040518083038186803b158015612d0757600080fd5b505afa158015612d1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d3f919061324a565b905073ffffffffffffffffffffffffffffffffffffffff8116612de4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f4175746f6d6174653a3a5f62696c6c3a2062616c616e636520636f6e7472616360448201527f74206e6f7420666f756e6400000000000000000000000000000000000000000060648201526084016104db565b8073ffffffffffffffffffffffffffffffffffffffff1663e578a2258488612e0a611e53565b896040518563ffffffff1660e01b8152600401612e2a9493929190613564565b602060405180830381600087803b158015612e4457600080fd5b505af1158015612e58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e7c919061340a565b93505050505b92915050565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff83811660248301526000919085169063dd62ed3e9060440160206040518083038186803b158015612ef957600080fd5b505afa158015612f0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f31919061340a565b90508015801590612f4157508181105b15612ff0576040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526000602483015285169063095ea7b390604401602060405180830381600087803b158015612fb657600080fd5b505af1158015612fca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fee919061339d565b505b8181146116e4576040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820184905285169063095ea7b390604401602060405180830381600087803b15801561306757600080fd5b505af115801561307b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061309f919061339d565b5050505050565b82600184516130b591906137a2565b815181106130c5576130c56137e8565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16836000815181106130f6576130f66137e8565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16141561311f57505050565b60048054835160208501516040517f38ed173900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909316936338ed17399361318193929189913091899101613603565b600060405180830381600087803b15801561319b57600080fd5b505af11580156131af573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526116e49190810190613300565b803561ffff8116811461320757600080fd5b919050565b805169ffffffffffffffffffff8116811461320757600080fd5b60006020828403121561323857600080fd5b813561324381613846565b9392505050565b60006020828403121561325c57600080fd5b815161324381613846565b6000806000806080858703121561327d57600080fd5b843561328881613846565b9350602085013561329881613846565b92506132a6604086016131f5565b91506132b4606086016131f5565b905092959194509250565b6000806000606084860312156132d457600080fd5b83356132df81613846565b925060208401356132ef81613846565b929592945050506040919091013590565b6000602080838503121561331357600080fd5b825167ffffffffffffffff81111561332a57600080fd5b8301601f8101851361333b57600080fd5b805161334e61334982613706565b6136b7565b80828252848201915084840188868560051b870101111561336e57600080fd5b600094505b83851015613391578051835260019490940193918501918501613373565b50979650505050505050565b6000602082840312156133af57600080fd5b8151801515811461324357600080fd5b6000602082840312156133d157600080fd5b5035919050565b6000604082840312156133ea57600080fd5b6133f261368e565b82518152602083015160208201528091505092915050565b60006020828403121561341c57600080fd5b5051919050565b60008060006060848603121561343857600080fd5b833592506020808501359250604085013567ffffffffffffffff8082111561345f57600080fd5b908601906040828903121561347357600080fd5b61347b61368e565b82358281111561348a57600080fd5b83019150601f8201891361349d57600080fd5b81356134ab61334982613706565b8082825286820191508685018c888560051b88010111156134cb57600080fd5b600095505b838610156134f75780356134e381613846565b8352600195909501949187019187016134d0565b508084525050508383013584820152809450505050509250925092565b600080600080600060a0868803121561352c57600080fd5b6135358661320c565b94506020860151935060408601519250606086015191506135586080870161320c565b90509295509295909350565b73ffffffffffffffffffffffffffffffffffffffff8516815260006020858184015284604084015260806060840152835180608085015260005b818110156135ba5785810183015185820160a00152820161359e565b818111156135cc57600060a083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160a0019695505050505050565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b8181101561366057845173ffffffffffffffffffffffffffffffffffffffff168352938301939183019160010161362e565b505073ffffffffffffffffffffffffffffffffffffffff969096166060850152505050608001529392505050565b6040805190810167ffffffffffffffff811182821017156136b1576136b1613817565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156136fe576136fe613817565b604052919050565b600067ffffffffffffffff82111561372057613720613817565b5060051b60200190565b600082613760577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561379d5761379d6137b9565b500290565b6000828210156137b4576137b46137b9565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461386857600080fd5b5056fea164736f6c6343000806000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016c5760003560e01c806372f702f3116100cd578063beabacc811610081578063db2e21bc11610066578063db2e21bc14610323578063f2fde38b1461032b578063f7c618c11461033e57600080fd5b8063beabacc814610308578063d0e30db01461031b57600080fd5b80638da5cb5b116100b25780638da5cb5b146102c15780639742b5c3146102df578063b0e21e8a146102f257600080fd5b806372f702f3146102995780638456cb59146102b957600080fd5b80633e032a3b116101245780634cf088d9116101095780634cf088d914610254578063590e1ae3146102795780635c975abb1461028157600080fd5b80633e032a3b146102265780633f4ba83a1461024c57600080fd5b80632470294411610155578063247029441461019957806329dcb0cf146101e3578063370158ea1461021e57600080fd5b806313ead7c6146101715780631b586aff14610186575b600080fd5b61018461017f366004613423565b61035e565b005b610184610194366004613267565b6107aa565b6004546101b99073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b60045461020b90760100000000000000000000000000000000000000000000900461ffff1681565b60405161ffff90911681526020016101da565b6101b9610d3e565b60045461020b9074010000000000000000000000000000000000000000900461ffff1681565b610184610ea0565b6003546101b990610100900473ffffffffffffffffffffffffffffffffffffffff1681565b610184611232565b6102896116ea565b60405190151581526020016101da565b6005546101b99073ffffffffffffffffffffffffffffffffffffffff1681565b61018461186f565b60015473ffffffffffffffffffffffffffffffffffffffff166101b9565b6101846102ed3660046133bf565b611c19565b6102fa611e53565b6040519081526020016101da565b6101846103163660046132bf565b612260565b610184612362565b61018461256a565b610184610339366004613226565b612957565b6006546101b99073ffffffffffffffffffffffffffffffffffffffff1681565b826040518060400160405280601c81526020017f42736341706553776170415065526577617264563452657374616b650000000081525061039f8282612bb6565b506003546005546040517ff40f0f5200000000000000000000000000000000000000000000000000000000815230600482015261010090920473ffffffffffffffffffffffffffffffffffffffff90811692911690600090839063f40f0f529060240160206040518083038186803b15801561041a57600080fd5b505afa15801561042e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610452919061340a565b116104e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f417065526577617264563452657374616b653a3a72756e3a206e6f206561726e60448201527f656400000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6040517fb6b55f250000000000000000000000000000000000000000000000000000000081526000600482015273ffffffffffffffffffffffffffffffffffffffff83169063b6b55f2590602401600060405180830381600087803b15801561054c57600080fd5b505af1158015610560573d6000803e3d6000fd5b50506006546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000935073ffffffffffffffffffffffffffffffffffffffff90911691506370a082319060240160206040518083038186803b1580156105d057600080fd5b505afa1580156105e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610608919061340a565b6004546006549192506106359173ffffffffffffffffffffffffffffffffffffffff908116911683612e88565b61065c866000015160405180604001604052808481526020018960200151815250896130a6565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906370a082319060240160206040518083038186803b1580156106c457600080fd5b505afa1580156106d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fc919061340a565b905061071f73ffffffffffffffffffffffffffffffffffffffff84168583612e88565b6040517fb6b55f250000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff85169063b6b55f2590602401600060405180830381600087803b15801561078757600080fd5b505af115801561079b573d6000803e3d6000fd5b50505050505050505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff1661081a57600180547fffffffffffffffffffffffff000000000000000000000000000000000000000016321790557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6002556108c1565b60015473ffffffffffffffffffffffffffffffffffffffff1633146108c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016104db565b60035460ff1615806108f2575060035473ffffffffffffffffffffffffffffffffffffffff85811661010090920416145b61098057604080517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482015260248101919091527f417065526577617264563452657374616b653a3a696e69743a207265696e697460448201527f69616c697a65207374616b696e67206164647265737320666f7262696464656e60648201526084016104db565b6003805473ffffffffffffffffffffffffffffffffffffffff8616610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff8216811790925560ff91821691161715806109f5575060045473ffffffffffffffffffffffffffffffffffffffff8481169116145b610aa7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604960248201527f417065526577617264563452657374616b653a3a696e69743a207265696e697460448201527f69616c697a65206c697175696469747920726f7574657220616464726573732060648201527f666f7262696464656e0000000000000000000000000000000000000000000000608482015260a4016104db565b6004805461ffff838116760100000000000000000000000000000000000000000000027fffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffff91861674010000000000000000000000000000000000000000027fffffffffffffffffffff0000000000000000000000000000000000000000000090931673ffffffffffffffffffffffffffffffffffffffff881617929092171617905560035460ff16610d0d57600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631c39b6726040518163ffffffff1660e01b815260040160206040518083038186803b158015610bbb57600080fd5b505afa158015610bcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf3919061324a565b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff928316179055600354604080517f99248ea70000000000000000000000000000000000000000000000000000000081529051610100909204909216916399248ea7916004808301926020929190829003018186803b158015610c8f57600080fd5b505afa158015610ca3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc7919061324a565b600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169190911790555b5050600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555050565b6040517f6b880718000000000000000000000000000000000000000000000000000000008152306004820152600090819073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b158015610da657600080fd5b505af4158015610dba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dde919061324a565b905073ffffffffffffffffffffffffffffffffffffffff8116301415610e1c57505060005473ffffffffffffffffffffffffffffffffffffffff1690565b8073ffffffffffffffffffffffffffffffffffffffff1663370158ea6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6257600080fd5b505afa158015610e76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9a919061324a565b91505090565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482018190529073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b158015610f0657600080fd5b505af4158015610f1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3e919061324a565b73ffffffffffffffffffffffffffffffffffffffff1614156110f3576000610f64610d3e565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf175974395600482015273ffffffffffffffffffffffffffffffffffffffff91909116906321f8a7219060240160206040518083038186803b158015610feb57600080fd5b505afa158015610fff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611023919061324a565b60015490915073ffffffffffffffffffffffffffffffffffffffff1633148061106157503373ffffffffffffffffffffffffffffffffffffffff8216145b6110ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084016104db565b5061119a565b60015473ffffffffffffffffffffffffffffffffffffffff16331461119a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084016104db565b6111a26116ea565b611208576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4175746f6d6174653a206e6f742070617573656400000000000000000000000060448201526064016104db565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055565b60015473ffffffffffffffffffffffffffffffffffffffff1633146112d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016104db565b60035473ffffffffffffffffffffffffffffffffffffffff61010090910416600061131960015473ffffffffffffffffffffffffffffffffffffffff1690565b6040517f1959a00200000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff841690631959a00290602401604080518083038186803b15801561138357600080fd5b505afa158015611397573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bb91906133d8565b80516040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815291925073ffffffffffffffffffffffffffffffffffffffff851691632e1a7d4d916114149160040190815260200190565b600060405180830381600087803b15801561142e57600080fd5b505af1158015611442573d6000803e3d6000fd5b50506005546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116925063a9059cbb9150849083906370a082319060240160206040518083038186803b1580156114b957600080fd5b505afa1580156114cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f1919061340a565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b15801561155c57600080fd5b505af1158015611570573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611594919061339d565b506006546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb90849083906370a082319060240160206040518083038186803b15801561160857600080fd5b505afa15801561161c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611640919061340a565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff909216600483015260248201526044015b602060405180830381600087803b1580156116ac57600080fd5b505af11580156116c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e4919061339d565b50505050565b6040517f6b880718000000000000000000000000000000000000000000000000000000008152306004820152600090819073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b15801561175257600080fd5b505af4158015611766573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178a919061324a565b905073ffffffffffffffffffffffffffffffffffffffff81163014156117cd57505060015474010000000000000000000000000000000000000000900460ff1690565b60015474010000000000000000000000000000000000000000900460ff1680610e9a57508073ffffffffffffffffffffffffffffffffffffffff16635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561183757600080fd5b505afa15801561184b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9a919061339d565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482018190529073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b1580156118d557600080fd5b505af41580156118e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190d919061324a565b73ffffffffffffffffffffffffffffffffffffffff161415611ac2576000611933610d3e565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf175974395600482015273ffffffffffffffffffffffffffffffffffffffff91909116906321f8a7219060240160206040518083038186803b1580156119ba57600080fd5b505afa1580156119ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f2919061324a565b60015490915073ffffffffffffffffffffffffffffffffffffffff16331480611a3057503373ffffffffffffffffffffffffffffffffffffffff8216145b611abc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084016104db565b50611b69565b60015473ffffffffffffffffffffffffffffffffffffffff163314611b69576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084016104db565b611b716116ea565b15611bd8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4175746f6d6174653a207061757365640000000000000000000000000000000060448201526064016104db565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482015260009073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b158015611c7f57600080fd5b505af4158015611c93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb7919061324a565b90503373ffffffffffffffffffffffffffffffffffffffff82163014611d5a578173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d1d57600080fd5b505afa158015611d31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d55919061324a565b611d74565b60015473ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff1614611e17576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603d60248201527f4175746f6d6174653a3a6368616e676550726f746f636f6c4665653a2063616c60448201527f6c6572206973206e6f74207468652070726f746f636f6c206f776e657200000060648201526084016104db565b60028290556040518281527f3c1d43943224e49d951ce8295a5c8332b517083b3f89bed50feae2cb39caebb59060200160405180910390a15050565b6040517f6b880718000000000000000000000000000000000000000000000000000000008152306004820152600090819073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b158015611ebb57600080fd5b505af4158015611ecf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef3919061324a565b905073ffffffffffffffffffffffffffffffffffffffff81163014801590611f1d57506000600254125b15611fa0578073ffffffffffffffffffffffffffffffffffffffff1663b0e21e8a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f6857600080fd5b505afa158015611f7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9a919061340a565b6000611faa610d3e565b905060008060025412611fbf5760025461207c565b6040517fbd02d0f50000000000000000000000000000000000000000000000000000000081527fa93d95f96a5de25d7a41ddf1f5e8d45cfc929c4838163cf011dab4043a4a40d5600482015273ffffffffffffffffffffffffffffffffffffffff83169063bd02d0f59060240160206040518083038186803b15801561204457600080fd5b505afa158015612058573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207c919061340a565b90508061208d576000935050505090565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f65c90423fe7c880476633a7e36521740f87199d233dc56eb4ca6643eb76f605f600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906321f8a7219060240160206040518083038186803b15801561211557600080fd5b505afa158015612129573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214d919061324a565b73ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561219257600080fd5b505afa1580156121a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ca9190613514565b5050509150506000811361223a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4175746f6d6174653a20696e76616c696420707269636500000000000000000060448201526064016104db565b8061224d83670de0b6b3a7640000613765565b612257919061372a565b94505050505090565b60015473ffffffffffffffffffffffffffffffffffffffff163314612307576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016104db565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063a9059cbb90604401611692565b60015473ffffffffffffffffffffffffffffffffffffffff163314612409576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016104db565b6005546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9091169060009082906370a082319060240160206040518083038186803b15801561247757600080fd5b505afa15801561248b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124af919061340a565b6003549091506124de9073ffffffffffffffffffffffffffffffffffffffff8481169161010090041683612e88565b6003546040517fb6b55f250000000000000000000000000000000000000000000000000000000081526004810183905261010090910473ffffffffffffffffffffffffffffffffffffffff169063b6b55f2590602401600060405180830381600087803b15801561254e57600080fd5b505af1158015612562573d6000803e3d6000fd5b505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314612611576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016104db565b600061263260015473ffffffffffffffffffffffffffffffffffffffff1690565b9050600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663db2e21bc6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561269e57600080fd5b505af11580156126b2573d6000803e3d6000fd5b50506005546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116925063a9059cbb9150839083906370a082319060240160206040518083038186803b15801561272957600080fd5b505afa15801561273d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612761919061340a565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b1580156127cc57600080fd5b505af11580156127e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612804919061339d565b506006546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb90839083906370a082319060240160206040518083038186803b15801561287857600080fd5b505afa15801561288c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b0919061340a565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b15801561291b57600080fd5b505af115801561292f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612953919061339d565b5050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146129fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016104db565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482018190529073__$0bac19a4f6859fb91e3c64d76ce49d598f$__90636b8807189060240160206040518083038186803b158015612a6457600080fd5b505af4158015612a78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a9c919061324a565b73ffffffffffffffffffffffffffffffffffffffff1614612b3f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a206368616e676520746865206f776e6572206661696c6560448201527f640000000000000000000000000000000000000000000000000000000000000060648201526084016104db565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000612bc06116ea565b15612c27576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4175746f6d6174653a207061757365640000000000000000000000000000000060448201526064016104db565b6000612c4860015473ffffffffffffffffffffffffffffffffffffffff1690565b90503273ffffffffffffffffffffffffffffffffffffffff82161415612c72576000915050612e82565b6000612c7c610d3e565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527fe78c16c6d839536d3155985aab4e9c6013c8c3d446054bcebc48612f359d81f5600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906321f8a7219060240160206040518083038186803b158015612d0757600080fd5b505afa158015612d1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d3f919061324a565b905073ffffffffffffffffffffffffffffffffffffffff8116612de4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f4175746f6d6174653a3a5f62696c6c3a2062616c616e636520636f6e7472616360448201527f74206e6f7420666f756e6400000000000000000000000000000000000000000060648201526084016104db565b8073ffffffffffffffffffffffffffffffffffffffff1663e578a2258488612e0a611e53565b896040518563ffffffff1660e01b8152600401612e2a9493929190613564565b602060405180830381600087803b158015612e4457600080fd5b505af1158015612e58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e7c919061340a565b93505050505b92915050565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff83811660248301526000919085169063dd62ed3e9060440160206040518083038186803b158015612ef957600080fd5b505afa158015612f0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f31919061340a565b90508015801590612f4157508181105b15612ff0576040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526000602483015285169063095ea7b390604401602060405180830381600087803b158015612fb657600080fd5b505af1158015612fca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fee919061339d565b505b8181146116e4576040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820184905285169063095ea7b390604401602060405180830381600087803b15801561306757600080fd5b505af115801561307b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061309f919061339d565b5050505050565b82600184516130b591906137a2565b815181106130c5576130c56137e8565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16836000815181106130f6576130f66137e8565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16141561311f57505050565b60048054835160208501516040517f38ed173900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909316936338ed17399361318193929189913091899101613603565b600060405180830381600087803b15801561319b57600080fd5b505af11580156131af573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526116e49190810190613300565b803561ffff8116811461320757600080fd5b919050565b805169ffffffffffffffffffff8116811461320757600080fd5b60006020828403121561323857600080fd5b813561324381613846565b9392505050565b60006020828403121561325c57600080fd5b815161324381613846565b6000806000806080858703121561327d57600080fd5b843561328881613846565b9350602085013561329881613846565b92506132a6604086016131f5565b91506132b4606086016131f5565b905092959194509250565b6000806000606084860312156132d457600080fd5b83356132df81613846565b925060208401356132ef81613846565b929592945050506040919091013590565b6000602080838503121561331357600080fd5b825167ffffffffffffffff81111561332a57600080fd5b8301601f8101851361333b57600080fd5b805161334e61334982613706565b6136b7565b80828252848201915084840188868560051b870101111561336e57600080fd5b600094505b83851015613391578051835260019490940193918501918501613373565b50979650505050505050565b6000602082840312156133af57600080fd5b8151801515811461324357600080fd5b6000602082840312156133d157600080fd5b5035919050565b6000604082840312156133ea57600080fd5b6133f261368e565b82518152602083015160208201528091505092915050565b60006020828403121561341c57600080fd5b5051919050565b60008060006060848603121561343857600080fd5b833592506020808501359250604085013567ffffffffffffffff8082111561345f57600080fd5b908601906040828903121561347357600080fd5b61347b61368e565b82358281111561348a57600080fd5b83019150601f8201891361349d57600080fd5b81356134ab61334982613706565b8082825286820191508685018c888560051b88010111156134cb57600080fd5b600095505b838610156134f75780356134e381613846565b8352600195909501949187019187016134d0565b508084525050508383013584820152809450505050509250925092565b600080600080600060a0868803121561352c57600080fd5b6135358661320c565b94506020860151935060408601519250606086015191506135586080870161320c565b90509295509295909350565b73ffffffffffffffffffffffffffffffffffffffff8516815260006020858184015284604084015260806060840152835180608085015260005b818110156135ba5785810183015185820160a00152820161359e565b818111156135cc57600060a083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160a0019695505050505050565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b8181101561366057845173ffffffffffffffffffffffffffffffffffffffff168352938301939183019160010161362e565b505073ffffffffffffffffffffffffffffffffffffffff969096166060850152505050608001529392505050565b6040805190810167ffffffffffffffff811182821017156136b1576136b1613817565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156136fe576136fe613817565b604052919050565b600067ffffffffffffffff82111561372057613720613817565b5060051b60200190565b600082613760577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561379d5761379d6137b9565b500290565b6000828210156137b4576137b46137b9565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461386857600080fd5b5056fea164736f6c6343000806000a",
  "libraries": {
    "ERC1167": "0x1F59Ee3B1ff055Be0b84BcB6D7beAa7f984fFf2e"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "changeProtocolFee(int256)": {
        "params": {
          "__protocolFee": "New protocol fee."
        }
      },
      "protocolFee()": {
        "returns": {
          "_0": "Current protocol fee."
        }
      },
      "transfer(address,address,uint256)": {
        "params": {
          "amount": "Transferred amount of tokens.",
          "recipient": "Token recipient address.",
          "token": "The address of the token to be transferred."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeProtocolFee(int256)": {
        "notice": "Change protocol fee."
      },
      "info()": {
        "notice": "Returns address of Storage contract."
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "pause()": {
        "notice": "Pause contract."
      },
      "paused()": {
        "notice": "Returns true if the contract is paused, and false otherwise."
      },
      "transfer(address,address,uint256)": {
        "notice": "Transfer ERC20 token to recipient."
      },
      "unpause()": {
        "notice": "Unpause contract."
      }
    },
    "notice": "Use with simple token only.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6793,
        "contract": "automates/bscApeSwap/ApeRewardV4Restake.automate.sol:ApeRewardV4Restake",
        "label": "_info",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6796,
        "contract": "automates/bscApeSwap/ApeRewardV4Restake.automate.sol:ApeRewardV4Restake",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6799,
        "contract": "automates/bscApeSwap/ApeRewardV4Restake.automate.sol:ApeRewardV4Restake",
        "label": "_paused",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 6802,
        "contract": "automates/bscApeSwap/ApeRewardV4Restake.automate.sol:ApeRewardV4Restake",
        "label": "_protocolFee",
        "offset": 0,
        "slot": "2",
        "type": "t_int256"
      },
      {
        "astId": 6805,
        "contract": "automates/bscApeSwap/ApeRewardV4Restake.automate.sol:ApeRewardV4Restake",
        "label": "_initialized",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 2530,
        "contract": "automates/bscApeSwap/ApeRewardV4Restake.automate.sol:ApeRewardV4Restake",
        "label": "staking",
        "offset": 1,
        "slot": "3",
        "type": "t_contract(IApeRewardV4)2969"
      },
      {
        "astId": 2532,
        "contract": "automates/bscApeSwap/ApeRewardV4Restake.automate.sol:ApeRewardV4Restake",
        "label": "liquidityRouter",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2534,
        "contract": "automates/bscApeSwap/ApeRewardV4Restake.automate.sol:ApeRewardV4Restake",
        "label": "slippage",
        "offset": 20,
        "slot": "4",
        "type": "t_uint16"
      },
      {
        "astId": 2536,
        "contract": "automates/bscApeSwap/ApeRewardV4Restake.automate.sol:ApeRewardV4Restake",
        "label": "deadline",
        "offset": 22,
        "slot": "4",
        "type": "t_uint16"
      },
      {
        "astId": 2539,
        "contract": "automates/bscApeSwap/ApeRewardV4Restake.automate.sol:ApeRewardV4Restake",
        "label": "stakingToken",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC20)669"
      },
      {
        "astId": 2542,
        "contract": "automates/bscApeSwap/ApeRewardV4Restake.automate.sol:ApeRewardV4Restake",
        "label": "rewardToken",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IERC20)669"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IApeRewardV4)2969": {
        "encoding": "inplace",
        "label": "contract IApeRewardV4",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)669": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      }
    }
  }
}
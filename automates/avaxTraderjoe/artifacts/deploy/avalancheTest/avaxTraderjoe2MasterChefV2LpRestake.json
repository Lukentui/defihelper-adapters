{
  "address": "0xf9990662e1156CE3675FF10933b390916cF65445",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_info",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "protocolFee",
          "type": "int256"
        }
      ],
      "name": "ProtocolFeeChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "__protocolFee",
          "type": "int256"
        }
      ],
      "name": "changeProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deadline",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "info",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidityRouter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_slippage",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_deadline",
          "type": "uint16"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gasFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "outMin",
              "type": "uint256"
            }
          ],
          "internalType": "struct MasterChefV2LpRestake.Swap",
          "name": "swap0",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "outMin",
              "type": "uint256"
            }
          ],
          "internalType": "struct MasterChefV2LpRestake.Swap",
          "name": "swap1",
          "type": "tuple"
        }
      ],
      "name": "run",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippage",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract IMasterChefV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbe864143d12b250b57b5d0d1ba03c6005563e21d3cf32b79cf2afbe8cb900596",
  "receipt": {
    "to": null,
    "from": "0xdD52F3b42191c6A95630a949b8883c2e173bD78C",
    "contractAddress": "0xf9990662e1156CE3675FF10933b390916cF65445",
    "transactionIndex": 2,
    "gasUsed": "4377444",
    "logsBloom": "0x
    "blockHash": "0x4292415938de06bd8cb33c62d5e8c3cf86a14477f26ab78febe15932164727cb",
    "transactionHash": "0xbe864143d12b250b57b5d0d1ba03c6005563e21d3cf32b79cf2afbe8cb900596",
    "logs": [],
    "blockNumber": 8163154,
    "cumulativeGasUsed": "5595614",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x67C2f8627C50139BBc893708b7Fb77eA3D3bF87F"
  ],
  "solcInputHash": "99a66275a2ffa13e6fd6c1536b1329d0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_info\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"protocolFee\",\"type\":\"int256\"}],\"name\":\"ProtocolFeeChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"__protocolFee\",\"type\":\"int256\"}],\"name\":\"changeProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"info\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_slippage\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_deadline\",\"type\":\"uint16\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"outMin\",\"type\":\"uint256\"}],\"internalType\":\"struct MasterChefV2LpRestake.Swap\",\"name\":\"swap0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"outMin\",\"type\":\"uint256\"}],\"internalType\":\"struct MasterChefV2LpRestake.Swap\",\"name\":\"swap1\",\"type\":\"tuple\"}],\"name\":\"run\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IMasterChefV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"changeProtocolFee(int256)\":{\"params\":{\"__protocolFee\":\"New protocol fee.\"}},\"protocolFee()\":{\"returns\":{\"_0\":\"Current protocol fee.\"}},\"transfer(address,address,uint256)\":{\"params\":{\"amount\":\"Transferred amount of tokens.\",\"recipient\":\"Token recipient address.\",\"token\":\"The address of the token to be transferred.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeProtocolFee(int256)\":{\"notice\":\"Change protocol fee.\"},\"info()\":{\"notice\":\"Returns address of Storage contract.\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"pause()\":{\"notice\":\"Pause contract.\"},\"paused()\":{\"notice\":\"Returns true if the contract is paused, and false otherwise.\"},\"transfer(address,address,uint256)\":{\"notice\":\"Transfer ERC20 token to recipient.\"},\"unpause()\":{\"notice\":\"Unpause contract.\"}},\"notice\":\"Use with LP token only.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MasterChefV2LpRestake.automate.sol\":\"MasterChefV2LpRestake\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/IMasterChefV2.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IMasterChefV2 {\\n  struct UserInfo {\\n    uint256 amount;\\n    uint256 rewardDebt;\\n  }\\n\\n  struct PoolInfo {\\n    address lpToken;\\n    uint256 allocPoint;\\n    uint256 lastRewardTimestamp;\\n    uint256 accJoePerShare;\\n    address rewarder;\\n  }\\n\\n  function joe() external view returns (address);\\n\\n  function poolInfo(uint256 pool) external view returns (PoolInfo memory);\\n\\n  function userInfo(uint256 pool, address user) external view returns (UserInfo memory);\\n\\n  function pendingTokens(uint256 pool, address user)\\n    external\\n    view\\n    returns (\\n      uint256 pendingJoe,\\n      address bonusTokenAddress,\\n      string memory bonusTokenSymbol,\\n      uint256 pendingBonusToken\\n    );\\n\\n  function deposit(uint256 pool, uint256 amount) external;\\n\\n  function withdraw(uint256 pool, uint256 amount) external;\\n\\n  function emergencyWithdraw(uint256 pool) external;\\n}\\n\",\"keccak256\":\"0xec5a8e5753cb18712c4ad1007f895ce680b825d5681ffdd6fff91637dd08b0fb\",\"license\":\"BSD-3-Clause\"},\"contracts/MasterChefV2LpRestake.automate.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./utils/DFH/Automate.sol\\\";\\nimport \\\"./utils/DFH/IStorage.sol\\\";\\nimport \\\"./utils/Uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"./utils/Uniswap/IUniswapV2Pair.sol\\\";\\nimport {ERC20Tools} from \\\"./utils/ERC20Tools.sol\\\";\\nimport \\\"./IMasterChefV2.sol\\\";\\n\\n/**\\n * @notice Use with LP token only.\\n */\\ncontract MasterChefV2LpRestake is Automate {\\n  using ERC20Tools for IERC20;\\n\\n  struct Swap {\\n    address[] path;\\n    uint256 outMin;\\n  }\\n\\n  IMasterChefV2 public staking;\\n\\n  address public liquidityRouter;\\n\\n  uint256 public pool;\\n\\n  uint16 public slippage;\\n\\n  uint16 public deadline;\\n\\n  IERC20 public stakingToken;\\n\\n  IERC20 public rewardToken;\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor(address _info) Automate(_info) {}\\n\\n  function init(\\n    address _staking,\\n    address _liquidityRouter,\\n    uint256 _pool,\\n    uint16 _slippage,\\n    uint16 _deadline\\n  ) external initializer {\\n    require(\\n      !_initialized || address(staking) == _staking,\\n      \\\"MasterChefV2LpRestake::init: reinitialize staking address forbidden\\\"\\n    );\\n    staking = IMasterChefV2(_staking);\\n    require(\\n      !_initialized || liquidityRouter == _liquidityRouter,\\n      \\\"MasterChefV2LpRestake::init: reinitialize liquidity router address forbidden\\\"\\n    );\\n    liquidityRouter = _liquidityRouter;\\n    require(!_initialized || pool == _pool, \\\"MasterChefV2LpRestake::init: reinitialize pool index forbidden\\\");\\n    pool = _pool;\\n    slippage = _slippage;\\n    deadline = _deadline;\\n\\n    if (!_initialized) {\\n      IMasterChefV2.PoolInfo memory poolInfo = staking.poolInfo(pool);\\n      stakingToken = IERC20(poolInfo.lpToken);\\n      rewardToken = IERC20(staking.joe());\\n    }\\n  }\\n\\n  function deposit() external onlyOwner {\\n    IERC20 _stakingToken = stakingToken; // gas optimisation\\n    uint256 balance = _stakingToken.balanceOf(address(this));\\n    _stakingToken.safeApprove(address(staking), balance);\\n    staking.deposit(pool, balance);\\n  }\\n\\n  function refund() external onlyOwner {\\n    IMasterChefV2 _staking = staking; // gas optimisation\\n    address __owner = owner(); // gas optimisation\\n    IMasterChefV2.UserInfo memory userInfo = _staking.userInfo(pool, address(this));\\n    _staking.withdraw(pool, userInfo.amount);\\n    stakingToken.transfer(__owner, stakingToken.balanceOf(address(this)));\\n    rewardToken.transfer(__owner, rewardToken.balanceOf(address(this)));\\n  }\\n\\n  function emergencyWithdraw() external onlyOwner {\\n    address __owner = owner(); // gas optimisation\\n    staking.emergencyWithdraw(pool);\\n    stakingToken.transfer(__owner, stakingToken.balanceOf(address(this)));\\n    rewardToken.transfer(__owner, rewardToken.balanceOf(address(this)));\\n  }\\n\\n  function _swap(\\n    address[] memory path,\\n    uint256[2] memory amount,\\n    uint256 _deadline\\n  ) internal {\\n    if (path[0] == path[path.length - 1]) return;\\n\\n    IUniswapV2Router02(liquidityRouter).swapExactTokensForTokens(amount[0], amount[1], path, address(this), _deadline);\\n  }\\n\\n  function _addLiquidity(\\n    address token0,\\n    address token1,\\n    uint256 _deadline\\n  ) internal {\\n    address _liquidityRouter = liquidityRouter; // gas optimisation\\n    uint256 amountIn0 = IERC20(token0).balanceOf(address(this));\\n    uint256 amountIn1 = IERC20(token1).balanceOf(address(this));\\n    IERC20(token0).safeApprove(_liquidityRouter, amountIn0);\\n    IERC20(token1).safeApprove(_liquidityRouter, amountIn1);\\n    IUniswapV2Router02(_liquidityRouter).addLiquidity(\\n      token0,\\n      token1,\\n      amountIn0,\\n      amountIn1,\\n      0,\\n      0,\\n      address(this),\\n      _deadline\\n    );\\n  }\\n\\n  function run(\\n    uint256 gasFee,\\n    uint256 _deadline,\\n    Swap memory swap0,\\n    Swap memory swap1\\n  ) external bill(gasFee, \\\"AvaxTraderjoeMasterChefV2LpRestake\\\") {\\n    IMasterChefV2 _staking = staking; // gas optimization\\n    (uint256 earned, , , ) = _staking.pendingTokens(pool, address(this));\\n    require(earned > 0, \\\"MasterChefV2LpRestake::run: no earned\\\");\\n\\n    _staking.deposit(pool, 0); // get all reward\\n    uint256 rewardAmount = rewardToken.balanceOf(address(this));\\n    rewardToken.safeApprove(liquidityRouter, rewardAmount);\\n    _swap(swap0.path, [rewardAmount / 2, swap0.outMin], _deadline);\\n    _swap(swap1.path, [rewardAmount - rewardAmount / 2, swap1.outMin], _deadline);\\n\\n    IUniswapV2Pair _stakingToken = IUniswapV2Pair(address(stakingToken));\\n    _addLiquidity(_stakingToken.token0(), _stakingToken.token1(), _deadline);\\n    uint256 stakingAmount = _stakingToken.balanceOf(address(this));\\n    stakingToken.safeApprove(address(_staking), stakingAmount);\\n    _staking.deposit(pool, stakingAmount);\\n  }\\n}\\n\",\"keccak256\":\"0x7ce3555cce6b968086a2bc1d27023bd137d4f502d72b824c88db7c508fc6508e\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/DFH/Automate.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./proxy/ERC1167.sol\\\";\\nimport \\\"./IStorage.sol\\\";\\nimport \\\"./IBalance.sol\\\";\\n\\n// solhint-disable avoid-tx-origin\\nabstract contract Automate {\\n  using ERC1167 for address;\\n\\n  /// @notice Storage contract address.\\n  address internal _info;\\n\\n  /// @notice Contract owner.\\n  address internal _owner;\\n\\n  /// @notice Is contract paused.\\n  bool internal _paused;\\n\\n  /// @notice Protocol fee in USD (-1 if value in global storage).\\n  int256 internal _protocolFee;\\n\\n  /// @notice Is contract already initialized.\\n  bool internal _initialized;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  event ProtocolFeeChanged(int256 protocolFee);\\n\\n  constructor(address __info) {\\n    _info = __info;\\n    _owner = tx.origin;\\n    _protocolFee = -1;\\n  }\\n\\n  /**\\n   * @notice Returns address of Storage contract.\\n   */\\n  function info() public view returns (address) {\\n    address impl = address(this).implementation();\\n    if (impl == address(this)) return _info;\\n\\n    return Automate(impl).info();\\n  }\\n\\n  /// @dev Modifier to protect an initializer function from being invoked twice.\\n  modifier initializer() {\\n    if (_owner == address(0)) {\\n      _owner = tx.origin;\\n      _protocolFee = -1;\\n    } else {\\n      require(_owner == msg.sender, \\\"Automate: caller is not the owner\\\");\\n    }\\n    _;\\n    _initialized = true;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(_owner == msg.sender, \\\"Automate: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external onlyOwner {\\n    require(address(this).implementation() == address(this), \\\"Automate: change the owner failed\\\");\\n\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the pauser.\\n   */\\n  modifier onlyPauser() {\\n    if (address(this).implementation() == address(this)) {\\n      address pauser = IStorage(info()).getAddress(keccak256(\\\"DFH:Pauser\\\"));\\n      require(msg.sender == _owner || msg.sender == pauser, \\\"Automate: caller is not the pauser\\\");\\n    } else {\\n      require(msg.sender == _owner, \\\"Automate: caller is not the pauser\\\");\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Returns true if the contract is paused, and false otherwise.\\n   */\\n  function paused() public view returns (bool) {\\n    address impl = address(this).implementation();\\n    if (impl == address(this)) return _paused;\\n\\n    return _paused || Automate(impl).paused();\\n  }\\n\\n  /**\\n   * @dev Throws if contract unpaused.\\n   */\\n  modifier whenPaused() {\\n    require(paused(), \\\"Automate: not paused\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Throws if contract paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused(), \\\"Automate: paused\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Pause contract.\\n   */\\n  function pause() external onlyPauser whenNotPaused {\\n    _paused = true;\\n  }\\n\\n  /**\\n   * @notice Unpause contract.\\n   */\\n  function unpause() external onlyPauser whenPaused {\\n    _paused = false;\\n  }\\n\\n  /**\\n   * @return Current protocol fee.\\n   */\\n  function protocolFee() public view returns (uint256) {\\n    address impl = address(this).implementation();\\n    if (impl != address(this) && _protocolFee < 0) {\\n      return Automate(impl).protocolFee();\\n    }\\n\\n    IStorage __info = IStorage(info());\\n    uint256 feeOnUSD = _protocolFee < 0 ? __info.getUint(keccak256(\\\"DFH:Fee:Automate\\\")) : uint256(_protocolFee);\\n    if (feeOnUSD == 0) return 0;\\n\\n    (, int256 price, , , ) = AggregatorV3Interface(__info.getAddress(keccak256(\\\"DFH:Fee:PriceFeed\\\"))).latestRoundData();\\n    require(price > 0, \\\"Automate: invalid price\\\");\\n\\n    return (feeOnUSD * 1e18) / uint256(price);\\n  }\\n\\n  /**\\n   * @notice Change protocol fee.\\n   * @param __protocolFee New protocol fee.\\n   */\\n  function changeProtocolFee(int256 __protocolFee) external {\\n    address impl = address(this).implementation();\\n    require(\\n      (impl == address(this) ? _owner : Automate(impl).owner()) == msg.sender,\\n      \\\"Automate::changeProtocolFee: caller is not the protocol owner\\\"\\n    );\\n\\n    _protocolFee = __protocolFee;\\n    emit ProtocolFeeChanged(__protocolFee);\\n  }\\n\\n  /**\\n   * @dev Claim fees from owner.\\n   * @param gasFee Claim gas fee.\\n   * @param operation Claim description.\\n   */\\n  function _bill(uint256 gasFee, string memory operation) internal whenNotPaused returns (uint256) {\\n    address account = owner(); // gas optimisation\\n    if (tx.origin == account) return 0; // free if called by the owner\\n\\n    IStorage __info = IStorage(info());\\n\\n    address balance = __info.getAddress(keccak256(\\\"DFH:Contract:Balance\\\"));\\n    require(balance != address(0), \\\"Automate::_bill: balance contract not found\\\");\\n\\n    return IBalance(balance).claim(account, gasFee, protocolFee(), operation);\\n  }\\n\\n  /**\\n   * @dev Claim fees from owner.\\n   * @param gasFee Claim gas fee.\\n   * @param operation Claim description.\\n   */\\n  modifier bill(uint256 gasFee, string memory operation) {\\n    _bill(gasFee, operation);\\n    _;\\n  }\\n\\n  /**\\n   * @notice Transfer ERC20 token to recipient.\\n   * @param token The address of the token to be transferred.\\n   * @param recipient Token recipient address.\\n   * @param amount Transferred amount of tokens.\\n   */\\n  function transfer(\\n    address token,\\n    address recipient,\\n    uint256 amount\\n  ) external onlyOwner {\\n    IERC20(token).transfer(recipient, amount);\\n  }\\n}\\n\",\"keccak256\":\"0xb0b26358673f6750ee6eef40b1a9668a3dc2965ffb1e1d777c3c8ca8cc2ce5a5\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/DFH/IBalance.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IBalance {\\n  function claim(\\n    address account,\\n    uint256 gasFee,\\n    uint256 protocolFee,\\n    string memory description\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xaa996ebfd96fa304ff8c51b240819815ea9cb1b27a250319c57cac7b597be6cc\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/DFH/IStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IStorage {\\n  function getBytes(bytes32 key) external view returns (bytes memory);\\n\\n  function getBool(bytes32 key) external view returns (bool);\\n\\n  function getUint(bytes32 key) external view returns (uint256);\\n\\n  function getInt(bytes32 key) external view returns (int256);\\n\\n  function getAddress(bytes32 key) external view returns (address);\\n\\n  function getString(bytes32 key) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xc3f6f2d80c27a1d5abbf6f6df55c96a315cdf7887b589c9ef5d45d036c56aa76\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/DFH/proxy/ERC1167.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable no-inline-assembly\\nlibrary ERC1167 {\\n  bytes public constant CLONE =\\n    hex\\\"363d3d373d3d3d363d73bebebebebebebebebebebebebebebebebebebebe5af43d82803e903d91602b57fd5bf3\\\";\\n\\n  /**\\n   * @notice Make new proxy contract.\\n   * @param impl Address prototype contract.\\n   * @return proxy Address new proxy contract.\\n   */\\n  function clone(address impl) external returns (address proxy) {\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(ptr, 0x14), shl(0x60, impl))\\n      mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      proxy := create(0, ptr, 0x37)\\n    }\\n    require(proxy != address(0), \\\"ERC1167: create failed\\\");\\n  }\\n\\n  /**\\n   * @notice Returns address of prototype contract for proxy.\\n   * @param proxy Address proxy contract.\\n   * @return impl Address prototype contract (current contract address if not proxy).\\n   */\\n  function implementation(address proxy) external view returns (address impl) {\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(proxy)\\n    }\\n\\n    impl = proxy;\\n    if (size <= 45 && size >= 41) {\\n      bool matches = true;\\n      uint256 i;\\n\\n      bytes memory code;\\n      assembly {\\n        code := mload(0x40)\\n        mstore(0x40, add(code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n        mstore(code, size)\\n        extcodecopy(proxy, add(code, 0x20), 0, size)\\n      }\\n      for (i = 0; matches && i < 9; i++) {\\n        matches = code[i] == CLONE[i];\\n      }\\n      for (i = 0; matches && i < 15; i++) {\\n        if (i == 4) {\\n          matches = code[code.length - i - 1] == bytes1(uint8(CLONE[45 - i - 1]) - uint8(45 - size));\\n        } else {\\n          matches = code[code.length - i - 1] == CLONE[45 - i - 1];\\n        }\\n      }\\n      if (code[9] != bytes1(0x73 - uint8(45 - size))) {\\n        matches = false;\\n      }\\n      uint256 forwardedToBuffer;\\n      if (matches) {\\n        assembly {\\n          forwardedToBuffer := mload(add(code, 30))\\n        }\\n        forwardedToBuffer &= (0x1 << (20 * 8)) - 1;\\n        impl = address(uint160(forwardedToBuffer >> ((45 - size) * 8)));\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x766f43e1832068a2a230f9bc19db0b190f638c4b0acb2dc689da07d43a45675f\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/ERC20Tools.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary ERC20Tools {\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 allowance = token.allowance(address(this), spender);\\n    if (allowance != 0 && allowance < value) {\\n      token.approve(spender, 0);\\n    }\\n    if (allowance != value) {\\n      token.approve(spender, value);\\n    }\\n  }\\n\\n  function safeApproveAll(IERC20 token, address spender) internal {\\n    safeApprove(token, spender, 2**256 - 1);\\n  }\\n}\\n\",\"keccak256\":\"0x099bc27ecc2cbc3474fca81003c55eac408130fb911f21364d9f3dec9afc0620\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/Uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\ninterface IUniswapV2Pair is IERC20 {\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function price0CumulativeLast() external view returns (uint256);\\n\\n  function price1CumulativeLast() external view returns (uint256);\\n\\n  function kLast() external view returns (uint256);\\n\\n  function mint(address to) external returns (uint256 liquidity);\\n\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n  function swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external;\\n}\\n\",\"keccak256\":\"0x562becce443b899cba13f76266d689bda17a0a1d457af045762848aa552037ac\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/Uniswap/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IUniswapV2Router02 {\\n  function factory() external view returns (address);\\n\\n  function WETH() external view returns (address);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 amountADesired,\\n    uint256 amountBDesired,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (\\n      uint256 amountA,\\n      uint256 amountB,\\n      uint256 liquidity\\n    );\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint256 amountTokenDesired,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    payable\\n    returns (\\n      uint256 amountToken,\\n      uint256 amountETH,\\n      uint256 liquidity\\n    );\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function swapExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactTokens(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactETHForTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactETH(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactTokensForETH(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapETHForExactTokens(\\n    uint256 amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) external pure returns (uint256 amountB);\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountOut);\\n\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountIn);\\n\\n  function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n  function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountETH);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountETH);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n}\\n\",\"keccak256\":\"0xf12b9639d5053651c2416527a638fd3168276feb207265374d87574a9a312f75\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c80638456cb59116100b8578063b838d9141161007c578063b838d914146102be578063beabacc8146102da578063d0e30db0146102f6578063db2e21bc14610300578063f2fde38b1461030a578063f7c618c11461032657610137565b80638456cb591461024057806388591b271461024a5780638da5cb5b146102665780639742b5c314610284578063b0e21e8a146102a057610137565b80633f4ba83a116100ff5780633f4ba83a146101d25780634cf088d9146101dc578063590e1ae3146101fa5780635c975abb1461020457806372f702f31461022257610137565b806316f0115b1461013c578063247029441461015a57806329dcb0cf14610178578063370158ea146101965780633e032a3b146101b4575b600080fd5b610144610344565b60405161015191906143cf565b60405180910390f35b61016261034a565b60405161016f919061404d565b60405180910390f35b610180610370565b60405161018d91906143b4565b60405180910390f35b61019e610384565b6040516101ab919061404d565b60405180910390f35b6101bc61050a565b6040516101c991906143b4565b60405180910390f35b6101da61051e565b005b6101e4610865565b6040516101f191906141fe565b60405180910390f35b61020261088b565b005b61020c610d0a565b60405161021991906141ad565b60405180910390f35b61022a610e96565b60405161023791906141e3565b60405180910390f35b610248610ebc565b005b610264600480360381019061025f9190613bcd565b611203565b005b61026e6117ac565b60405161027b919061404d565b60405180910390f35b61029e60048036038101906102999190613a96565b6117d6565b005b6102a8611a02565b6040516102b591906143cf565b60405180910390f35b6102d860048036038101906102d391906139a5565b611de9565b005b6102f460048036038101906102ef9190613952565b6123bb565b005b6102fe6124de565b005b610308612704565b005b610324600480360381019061031f91906138f8565b612ae6565b005b61032e612d48565b60405161033b91906141e3565b60405180910390f35b60055481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660029054906101000a900461ffff1681565b6000803073ffffffffffffffffffffffffffffffffffffffff1673__$0fb85c1a108326fe5c0d8f2f5a241bc0e7$__636b88071890916040518263ffffffff1660e01b81526004016103d69190614032565b60206040518083038186803b1580156103ee57600080fd5b505af4158015610402573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104269190613925565b90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156104855760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050610507565b8073ffffffffffffffffffffffffffffffffffffffff1663370158ea6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104cb57600080fd5b505afa1580156104df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105039190613925565b9150505b90565b600660009054906101000a900461ffff1681565b3073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1673__$0fb85c1a108326fe5c0d8f2f5a241bc0e7$__636b88071890916040518263ffffffff1660e01b81526004016105849190614032565b60206040518083038186803b15801561059c57600080fd5b505af41580156105b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d49190613925565b73ffffffffffffffffffffffffffffffffffffffff1614156107705760006105fa610384565b73ffffffffffffffffffffffffffffffffffffffff166321f8a7217f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf1759743956040518263ffffffff1660e01b815260040161065291906141c8565b60206040518083038186803b15801561066a57600080fd5b505afa15801561067e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a29190613925565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061072b57508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61076a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076190614394565b60405180910390fd5b50610801565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610800576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f790614394565b60405180910390fd5b5b610809610d0a565b610848576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083f906142f4565b60405180910390fd5b6000600160146101000a81548160ff021916908315150217905550565b600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461091b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091290614254565b60405180910390fd5b6000600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600061094c6117ac565b905060008273ffffffffffffffffffffffffffffffffffffffff166393f1a40b600554306040518363ffffffff1660e01b815260040161098d9291906143ea565b604080518083038186803b1580156109a457600080fd5b505afa1580156109b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109dc9190613af0565b90508273ffffffffffffffffffffffffffffffffffffffff1663441a3e7060055483600001516040518363ffffffff1660e01b8152600401610a1f92919061443c565b600060405180830381600087803b158015610a3957600080fd5b505af1158015610a4d573d6000803e3d6000fd5b50505050600660049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83600660049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610aeb919061404d565b60206040518083038186803b158015610b0357600080fd5b505afa158015610b17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3b9190613b1d565b6040518363ffffffff1660e01b8152600401610b58929190614138565b602060405180830381600087803b158015610b7257600080fd5b505af1158015610b86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610baa9190613a69565b50600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c45919061404d565b60206040518083038186803b158015610c5d57600080fd5b505afa158015610c71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c959190613b1d565b6040518363ffffffff1660e01b8152600401610cb2929190614138565b602060405180830381600087803b158015610ccc57600080fd5b505af1158015610ce0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d049190613a69565b50505050565b6000803073ffffffffffffffffffffffffffffffffffffffff1673__$0fb85c1a108326fe5c0d8f2f5a241bc0e7$__636b88071890916040518263ffffffff1660e01b8152600401610d5c9190614032565b60206040518083038186803b158015610d7457600080fd5b505af4158015610d88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dac9190613925565b90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610dfa57600160149054906101000a900460ff16915050610e93565b600160149054906101000a900460ff1680610e8f57508073ffffffffffffffffffffffffffffffffffffffff16635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e5657600080fd5b505afa158015610e6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8e9190613a69565b5b9150505b90565b600660049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1673__$0fb85c1a108326fe5c0d8f2f5a241bc0e7$__636b88071890916040518263ffffffff1660e01b8152600401610f229190614032565b60206040518083038186803b158015610f3a57600080fd5b505af4158015610f4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f729190613925565b73ffffffffffffffffffffffffffffffffffffffff16141561110e576000610f98610384565b73ffffffffffffffffffffffffffffffffffffffff166321f8a7217f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf1759743956040518263ffffffff1660e01b8152600401610ff091906141c8565b60206040518083038186803b15801561100857600080fd5b505afa15801561101c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110409190613925565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806110c957508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b611108576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ff90614394565b60405180910390fd5b5061119f565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461119e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119590614394565b60405180910390fd5b5b6111a7610d0a565b156111e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111de906142d4565b60405180910390fd5b60018060146101000a81548160ff021916908315150217905550565b83604051806060016040528060228152602001614cc8602291396112278282612d6e565b506000600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663ffcd4263600554306040518363ffffffff1660e01b815260040161128e9291906143ea565b60006040518083038186803b1580156112a657600080fd5b505afa1580156112ba573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906112e39190613b4a565b50505090506000811161132b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132290614234565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663e2bbb15860055460006040518363ffffffff1660e01b8152600401611369929190614413565b600060405180830381600087803b15801561138357600080fd5b505af1158015611397573d6000803e3d6000fd5b505050506000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016113f8919061404d565b60206040518083038186803b15801561141057600080fd5b505afa158015611424573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114489190613b1d565b90506114b9600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612fcf9092919063ffffffff16565b6114ec876000015160405180604001604052806002856114d991906145c2565b81526020018a602001518152508a61319f565b61152a8660000151604051806040016040528060028561150c91906145c2565b85611517919061464d565b815260200189602001518152508a61319f565b6000600660049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506116568173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561159a57600080fd5b505afa1580156115ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d29190613925565b8273ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561161857600080fd5b505afa15801561162c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116509190613925565b8b61330b565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611691919061404d565b60206040518083038186803b1580156116a957600080fd5b505afa1580156116bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e19190613b1d565b90506117308582600660049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612fcf9092919063ffffffff16565b8473ffffffffffffffffffffffffffffffffffffffff1663e2bbb158600554836040518363ffffffff1660e01b815260040161176d92919061443c565b600060405180830381600087803b15801561178757600080fd5b505af115801561179b573d6000803e3d6000fd5b505050505050505050505050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60003073ffffffffffffffffffffffffffffffffffffffff1673__$0fb85c1a108326fe5c0d8f2f5a241bc0e7$__636b88071890916040518263ffffffff1660e01b81526004016118279190614032565b60206040518083038186803b15801561183f57600080fd5b505af4158015611853573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118779190613925565b90503373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611946578173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561190957600080fd5b505afa15801561191d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119419190613925565b61196a565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff16146119c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b790614294565b60405180910390fd5b816002819055507f3c1d43943224e49d951ce8295a5c8332b517083b3f89bed50feae2cb39caebb5826040516119f69190614219565b60405180910390a15050565b6000803073ffffffffffffffffffffffffffffffffffffffff1673__$0fb85c1a108326fe5c0d8f2f5a241bc0e7$__636b88071890916040518263ffffffff1660e01b8152600401611a549190614032565b60206040518083038186803b158015611a6c57600080fd5b505af4158015611a80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa49190613925565b90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015611ae457506000600254125b15611b6f578073ffffffffffffffffffffffffffffffffffffffff1663b0e21e8a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b2f57600080fd5b505afa158015611b43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b679190613b1d565b915050611de6565b6000611b79610384565b905060008060025412611b8e57600254611c38565b8173ffffffffffffffffffffffffffffffffffffffff1663bd02d0f57fa93d95f96a5de25d7a41ddf1f5e8d45cfc929c4838163cf011dab4043a4a40d56040518263ffffffff1660e01b8152600401611be791906141c8565b60206040518083038186803b158015611bff57600080fd5b505afa158015611c13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c379190613b1d565b5b90506000811415611c4f5760009350505050611de6565b60008273ffffffffffffffffffffffffffffffffffffffff166321f8a7217f65c90423fe7c880476633a7e36521740f87199d233dc56eb4ca6643eb76f605f6040518263ffffffff1660e01b8152600401611caa91906141c8565b60206040518083038186803b158015611cc257600080fd5b505afa158015611cd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfa9190613925565b73ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015611d3f57600080fd5b505afa158015611d53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d779190613cbf565b50505091505060008113611dc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611db790614354565b60405180910390fd5b80670de0b6b3a764000083611dd591906145f3565b611ddf91906145c2565b9450505050505b90565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611ead5732600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600281905550611f3e565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611f3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3490614254565b60405180910390fd5b5b600360009054906101000a900460ff161580611fa757508473ffffffffffffffffffffffffffffffffffffffff16600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b611fe6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fdd90614274565b60405180910390fd5b84600360016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900460ff16158061209057508373ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b6120cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c690614374565b60405180910390fd5b83600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900460ff16158061212d575082600554145b61216c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216390614334565b60405180910390fd5b8260058190555081600660006101000a81548161ffff021916908361ffff16021790555080600660026101000a81548161ffff021916908361ffff160217905550600360009054906101000a900460ff16612399576000600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631526fe276005546040518263ffffffff1660e01b815260040161222091906143cf565b60a06040518083038186803b15801561223857600080fd5b505afa15801561224c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122709190613ac3565b90508060000151600660046101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b985a3a06040518163ffffffff1660e01b815260040160206040518083038186803b15801561231f57600080fd5b505afa158015612333573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123579190613925565b600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b6001600360006101000a81548160ff0219169083151502179055505050505050565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461244b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161244290614254565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401612486929190614138565b602060405180830381600087803b1580156124a057600080fd5b505af11580156124b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d89190613a69565b50505050565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461256e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161256590614254565b60405180910390fd5b6000600660049054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016125d0919061404d565b60206040518083038186803b1580156125e857600080fd5b505afa1580156125fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126209190613b1d565b905061266f600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828473ffffffffffffffffffffffffffffffffffffffff16612fcf9092919063ffffffff16565b600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e2bbb158600554836040518363ffffffff1660e01b81526004016126ce92919061443c565b600060405180830381600087803b1580156126e857600080fd5b505af11580156126fc573d6000803e3d6000fd5b505050505050565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612794576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161278b90614254565b60405180910390fd5b600061279e6117ac565b9050600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635312ea8e6005546040518263ffffffff1660e01b81526004016127fd91906143cf565b600060405180830381600087803b15801561281757600080fd5b505af115801561282b573d6000803e3d6000fd5b50505050600660049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82600660049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016128c9919061404d565b60206040518083038186803b1580156128e157600080fd5b505afa1580156128f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129199190613b1d565b6040518363ffffffff1660e01b8152600401612936929190614138565b602060405180830381600087803b15801561295057600080fd5b505af1158015612964573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129889190613a69565b50600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612a23919061404d565b60206040518083038186803b158015612a3b57600080fd5b505afa158015612a4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a739190613b1d565b6040518363ffffffff1660e01b8152600401612a90929190614138565b602060405180830381600087803b158015612aaa57600080fd5b505af1158015612abe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ae29190613a69565b5050565b3373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612b76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b6d90614254565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1673__$0fb85c1a108326fe5c0d8f2f5a241bc0e7$__636b88071890916040518263ffffffff1660e01b8152600401612bdc9190614032565b60206040518083038186803b158015612bf457600080fd5b505af4158015612c08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c2c9190613925565b73ffffffffffffffffffffffffffffffffffffffff1614612c82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c7990614314565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000612d78610d0a565b15612db8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612daf906142d4565b60405180910390fd5b6000612dc26117ac565b90508073ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161415612e02576000915050612fc9565b6000612e0c610384565b905060008173ffffffffffffffffffffffffffffffffffffffff166321f8a7217fe78c16c6d839536d3155985aab4e9c6013c8c3d446054bcebc48612f359d81f56040518263ffffffff1660e01b8152600401612e6991906141c8565b60206040518083038186803b158015612e8157600080fd5b505afa158015612e95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb99190613925565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612f2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f22906142b4565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663e578a2258488612f51611a02565b896040518563ffffffff1660e01b8152600401612f719493929190614161565b602060405180830381600087803b158015612f8b57600080fd5b505af1158015612f9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc39190613b1d565b93505050505b92915050565b60008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b815260040161300c929190614068565b60206040518083038186803b15801561302457600080fd5b505afa158015613038573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061305c9190613b1d565b90506000811415801561306e57508181105b15613103578373ffffffffffffffffffffffffffffffffffffffff1663095ea7b38460006040518363ffffffff1660e01b81526004016130af92919061410f565b602060405180830381600087803b1580156130c957600080fd5b505af11580156130dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131019190613a69565b505b818114613199578373ffffffffffffffffffffffffffffffffffffffff1663095ea7b384846040518363ffffffff1660e01b8152600401613145929190614138565b602060405180830381600087803b15801561315f57600080fd5b505af1158015613173573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131979190613a69565b505b50505050565b82600184516131ae919061464d565b815181106131bf576131be61481d565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16836000815181106131f1576131f061481d565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16141561321a57613306565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed17398360006002811061326c5761326b61481d565b5b6020020151846001600281106132855761328461481d565b5b60200201518630866040518663ffffffff1660e01b81526004016132ad959493929190614465565b600060405180830381600087803b1580156132c757600080fd5b505af11580156132db573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906133049190613a20565b505b505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161336d919061404d565b60206040518083038186803b15801561338557600080fd5b505afa158015613399573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133bd9190613b1d565b905060008473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016133fa919061404d565b60206040518083038186803b15801561341257600080fd5b505afa158015613426573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344a9190613b1d565b905061347783838873ffffffffffffffffffffffffffffffffffffffff16612fcf9092919063ffffffff16565b6134a283828773ffffffffffffffffffffffffffffffffffffffff16612fcf9092919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff1663e8e3370087878585600080308c6040518963ffffffff1660e01b81526004016134ea989796959493929190614091565b606060405180830381600087803b15801561350457600080fd5b505af1158015613518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061353c9190613c6c565b505050505050505050565b600061355a613555846144e4565b6144bf565b9050808382526020820190508285602086028201111561357d5761357c61488a565b5b60005b858110156135ad57816135938882613669565b845260208401935060208301925050600181019050613580565b5050509392505050565b60006135ca6135c584614510565b6144bf565b905080838252602082019050828560208602820111156135ed576135ec61488a565b5b60005b8581101561361d578161360388826138ce565b8452602084019350602083019250506001810190506135f0565b5050509392505050565b600061363a6136358461453c565b6144bf565b9050828152602081018484840111156136565761365561488f565b5b61366184828561475b565b509392505050565b60008135905061367881614c3d565b92915050565b60008151905061368d81614c3d565b92915050565b600082601f8301126136a8576136a761487b565b5b81356136b8848260208601613547565b91505092915050565b600082601f8301126136d6576136d561487b565b5b81516136e68482602086016135b7565b91505092915050565b6000815190506136fe81614c54565b92915050565b60008135905061371381614c6b565b92915050565b60008151905061372881614c6b565b92915050565b600082601f8301126137435761374261487b565b5b8151613753848260208601613627565b91505092915050565b600060a0828403121561377257613771614880565b5b61377c60a06144bf565b9050600061378c8482850161367e565b60008301525060206137a0848285016138ce565b60208301525060406137b4848285016138ce565b60408301525060606137c8848285016138ce565b60608301525060806137dc8482850161367e565b60808301525092915050565b6000604082840312156137fe576137fd614880565b5b61380860406144bf565b9050600082013567ffffffffffffffff81111561382857613827614885565b5b61383484828501613693565b6000830152506020613848848285016138b9565b60208301525092915050565b60006040828403121561386a57613869614880565b5b61387460406144bf565b90506000613884848285016138ce565b6000830152506020613898848285016138ce565b60208301525092915050565b6000813590506138b381614c82565b92915050565b6000813590506138c881614c99565b92915050565b6000815190506138dd81614c99565b92915050565b6000815190506138f281614cb0565b92915050565b60006020828403121561390e5761390d614899565b5b600061391c84828501613669565b91505092915050565b60006020828403121561393b5761393a614899565b5b60006139498482850161367e565b91505092915050565b60008060006060848603121561396b5761396a614899565b5b600061397986828701613669565b935050602061398a86828701613669565b925050604061399b868287016138b9565b9150509250925092565b600080600080600060a086880312156139c1576139c0614899565b5b60006139cf88828901613669565b95505060206139e088828901613669565b94505060406139f1888289016138b9565b9350506060613a02888289016138a4565b9250506080613a13888289016138a4565b9150509295509295909350565b600060208284031215613a3657613a35614899565b5b600082015167ffffffffffffffff811115613a5457613a53614894565b5b613a60848285016136c1565b91505092915050565b600060208284031215613a7f57613a7e614899565b5b6000613a8d848285016136ef565b91505092915050565b600060208284031215613aac57613aab614899565b5b6000613aba84828501613704565b91505092915050565b600060a08284031215613ad957613ad8614899565b5b6000613ae78482850161375c565b91505092915050565b600060408284031215613b0657613b05614899565b5b6000613b1484828501613854565b91505092915050565b600060208284031215613b3357613b32614899565b5b6000613b41848285016138ce565b91505092915050565b60008060008060808587031215613b6457613b63614899565b5b6000613b72878288016138ce565b9450506020613b838782880161367e565b935050604085015167ffffffffffffffff811115613ba457613ba3614894565b5b613bb08782880161372e565b9250506060613bc1878288016138ce565b91505092959194509250565b60008060008060808587031215613be757613be6614899565b5b6000613bf5878288016138b9565b9450506020613c06878288016138b9565b935050604085013567ffffffffffffffff811115613c2757613c26614894565b5b613c33878288016137e8565b925050606085013567ffffffffffffffff811115613c5457613c53614894565b5b613c60878288016137e8565b91505092959194509250565b600080600060608486031215613c8557613c84614899565b5b6000613c93868287016138ce565b9350506020613ca4868287016138ce565b9250506040613cb5868287016138ce565b9150509250925092565b600080600080600060a08688031215613cdb57613cda614899565b5b6000613ce9888289016138e3565b9550506020613cfa88828901613719565b9450506040613d0b888289016138ce565b9350506060613d1c888289016138ce565b9250506080613d2d888289016138e3565b9150509295509295909350565b6000613d468383613d52565b60208301905092915050565b613d5b81614681565b82525050565b613d6a81614681565b82525050565b613d7981614681565b82525050565b6000613d8a8261457d565b613d9481856145a0565b9350613d9f8361456d565b8060005b83811015613dd0578151613db78882613d3a565b9750613dc283614593565b925050600181019050613da3565b5085935050505092915050565b613de681614693565b82525050565b613df58161469f565b82525050565b613e0481614701565b82525050565b613e1381614725565b82525050565b613e22816146a9565b82525050565b613e3181614749565b82525050565b6000613e4282614588565b613e4c81856145b1565b9350613e5c81856020860161475b565b613e658161489e565b840191505092915050565b6000613e7d6025836145b1565b9150613e88826148af565b604082019050919050565b6000613ea06021836145b1565b9150613eab826148fe565b604082019050919050565b6000613ec36043836145b1565b9150613ece8261494d565b606082019050919050565b6000613ee6603d836145b1565b9150613ef1826149c2565b604082019050919050565b6000613f09602b836145b1565b9150613f1482614a11565b604082019050919050565b6000613f2c6010836145b1565b9150613f3782614a60565b602082019050919050565b6000613f4f6014836145b1565b9150613f5a82614a89565b602082019050919050565b6000613f726021836145b1565b9150613f7d82614ab2565b604082019050919050565b6000613f95603e836145b1565b9150613fa082614b01565b604082019050919050565b6000613fb86017836145b1565b9150613fc382614b50565b602082019050919050565b6000613fdb604c836145b1565b9150613fe682614b79565b606082019050919050565b6000613ffe6022836145b1565b915061400982614bee565b604082019050919050565b61401d816146b3565b82525050565b61402c816146e1565b82525050565b60006020820190506140476000830184613d70565b92915050565b60006020820190506140626000830184613d61565b92915050565b600060408201905061407d6000830185613d61565b61408a6020830184613d61565b9392505050565b6000610100820190506140a7600083018b613d61565b6140b4602083018a613d61565b6140c16040830189614023565b6140ce6060830188614023565b6140db6080830187613e28565b6140e860a0830186613e28565b6140f560c0830185613d61565b61410260e0830184614023565b9998505050505050505050565b60006040820190506141246000830185613d61565b6141316020830184613e28565b9392505050565b600060408201905061414d6000830185613d61565b61415a6020830184614023565b9392505050565b60006080820190506141766000830187613d61565b6141836020830186614023565b6141906040830185614023565b81810360608301526141a28184613e37565b905095945050505050565b60006020820190506141c26000830184613ddd565b92915050565b60006020820190506141dd6000830184613dec565b92915050565b60006020820190506141f86000830184613dfb565b92915050565b60006020820190506142136000830184613e0a565b92915050565b600060208201905061422e6000830184613e19565b92915050565b6000602082019050818103600083015261424d81613e70565b9050919050565b6000602082019050818103600083015261426d81613e93565b9050919050565b6000602082019050818103600083015261428d81613eb6565b9050919050565b600060208201905081810360008301526142ad81613ed9565b9050919050565b600060208201905081810360008301526142cd81613efc565b9050919050565b600060208201905081810360008301526142ed81613f1f565b9050919050565b6000602082019050818103600083015261430d81613f42565b9050919050565b6000602082019050818103600083015261432d81613f65565b9050919050565b6000602082019050818103600083015261434d81613f88565b9050919050565b6000602082019050818103600083015261436d81613fab565b9050919050565b6000602082019050818103600083015261438d81613fce565b9050919050565b600060208201905081810360008301526143ad81613ff1565b9050919050565b60006020820190506143c96000830184614014565b92915050565b60006020820190506143e46000830184614023565b92915050565b60006040820190506143ff6000830185614023565b61440c6020830184613d61565b9392505050565b60006040820190506144286000830185614023565b6144356020830184613e28565b9392505050565b60006040820190506144516000830185614023565b61445e6020830184614023565b9392505050565b600060a08201905061447a6000830188614023565b6144876020830187614023565b81810360408301526144998186613d7f565b90506144a86060830185613d61565b6144b56080830184614023565b9695505050505050565b60006144c96144da565b90506144d5828261478e565b919050565b6000604051905090565b600067ffffffffffffffff8211156144ff576144fe61484c565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561452b5761452a61484c565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156145575761455661484c565b5b6145608261489e565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006145cd826146e1565b91506145d8836146e1565b9250826145e8576145e76147ee565b5b828204905092915050565b60006145fe826146e1565b9150614609836146e1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614642576146416147bf565b5b828202905092915050565b6000614658826146e1565b9150614663836146e1565b925082821015614676576146756147bf565b5b828203905092915050565b600061468c826146c1565b9050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b600061470c82614713565b9050919050565b600061471e826146c1565b9050919050565b600061473082614737565b9050919050565b6000614742826146c1565b9050919050565b6000614754826146e1565b9050919050565b60005b8381101561477957808201518184015260208101905061475e565b83811115614788576000848401525b50505050565b6147978261489e565b810181811067ffffffffffffffff821117156147b6576147b561484c565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4d61737465724368656656324c7052657374616b653a3a72756e3a206e6f206560008201527f61726e6564000000000000000000000000000000000000000000000000000000602082015250565b7f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4d61737465724368656656324c7052657374616b653a3a696e69743a2072656960008201527f6e697469616c697a65207374616b696e67206164647265737320666f7262696460208201527f64656e0000000000000000000000000000000000000000000000000000000000604082015250565b7f4175746f6d6174653a3a6368616e676550726f746f636f6c4665653a2063616c60008201527f6c6572206973206e6f74207468652070726f746f636f6c206f776e6572000000602082015250565b7f4175746f6d6174653a3a5f62696c6c3a2062616c616e636520636f6e7472616360008201527f74206e6f7420666f756e64000000000000000000000000000000000000000000602082015250565b7f4175746f6d6174653a2070617573656400000000000000000000000000000000600082015250565b7f4175746f6d6174653a206e6f7420706175736564000000000000000000000000600082015250565b7f4175746f6d6174653a206368616e676520746865206f776e6572206661696c6560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b7f4d61737465724368656656324c7052657374616b653a3a696e69743a2072656960008201527f6e697469616c697a6520706f6f6c20696e64657820666f7262696464656e0000602082015250565b7f4175746f6d6174653a20696e76616c6964207072696365000000000000000000600082015250565b7f4d61737465724368656656324c7052657374616b653a3a696e69743a2072656960008201527f6e697469616c697a65206c697175696469747920726f7574657220616464726560208201527f737320666f7262696464656e0000000000000000000000000000000000000000604082015250565b7f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360008201527f6572000000000000000000000000000000000000000000000000000000000000602082015250565b614c4681614681565b8114614c5157600080fd5b50565b614c5d81614693565b8114614c6857600080fd5b50565b614c74816146a9565b8114614c7f57600080fd5b50565b614c8b816146b3565b8114614c9657600080fd5b50565b614ca2816146e1565b8114614cad57600080fd5b50565b614cb9816146eb565b8114614cc457600080fd5b5056fe417661785472616465726a6f654d61737465724368656656324c7052657374616b65a26469706673582212209eb3c9fa61ebebed9525be8328e60ae4728b8fb41f824830401e493c00589a3464736f6c63430008060033",
  "libraries": {
    "ERC1167": "0x8586719c29A043C8305252de4DFfE94F43245590"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "changeProtocolFee(int256)": {
        "params": {
          "__protocolFee": "New protocol fee."
        }
      },
      "protocolFee()": {
        "returns": {
          "_0": "Current protocol fee."
        }
      },
      "transfer(address,address,uint256)": {
        "params": {
          "amount": "Transferred amount of tokens.",
          "recipient": "Token recipient address.",
          "token": "The address of the token to be transferred."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeProtocolFee(int256)": {
        "notice": "Change protocol fee."
      },
      "info()": {
        "notice": "Returns address of Storage contract."
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "pause()": {
        "notice": "Pause contract."
      },
      "paused()": {
        "notice": "Returns true if the contract is paused, and false otherwise."
      },
      "transfer(address,address,uint256)": {
        "notice": "Transfer ERC20 token to recipient."
      },
      "unpause()": {
        "notice": "Unpause contract."
      }
    },
    "notice": "Use with LP token only.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1823,
        "contract": "contracts/MasterChefV2LpRestake.automate.sol:MasterChefV2LpRestake",
        "label": "_info",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1826,
        "contract": "contracts/MasterChefV2LpRestake.automate.sol:MasterChefV2LpRestake",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1829,
        "contract": "contracts/MasterChefV2LpRestake.automate.sol:MasterChefV2LpRestake",
        "label": "_paused",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 1832,
        "contract": "contracts/MasterChefV2LpRestake.automate.sol:MasterChefV2LpRestake",
        "label": "_protocolFee",
        "offset": 0,
        "slot": "2",
        "type": "t_int256"
      },
      {
        "astId": 1835,
        "contract": "contracts/MasterChefV2LpRestake.automate.sol:MasterChefV2LpRestake",
        "label": "_initialized",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 301,
        "contract": "contracts/MasterChefV2LpRestake.automate.sol:MasterChefV2LpRestake",
        "label": "staking",
        "offset": 1,
        "slot": "3",
        "type": "t_contract(IMasterChefV2)199"
      },
      {
        "astId": 303,
        "contract": "contracts/MasterChefV2LpRestake.automate.sol:MasterChefV2LpRestake",
        "label": "liquidityRouter",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 305,
        "contract": "contracts/MasterChefV2LpRestake.automate.sol:MasterChefV2LpRestake",
        "label": "pool",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 307,
        "contract": "contracts/MasterChefV2LpRestake.automate.sol:MasterChefV2LpRestake",
        "label": "slippage",
        "offset": 0,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 309,
        "contract": "contracts/MasterChefV2LpRestake.automate.sol:MasterChefV2LpRestake",
        "label": "deadline",
        "offset": 2,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 312,
        "contract": "contracts/MasterChefV2LpRestake.automate.sol:MasterChefV2LpRestake",
        "label": "stakingToken",
        "offset": 4,
        "slot": "6",
        "type": "t_contract(IERC20)123"
      },
      {
        "astId": 315,
        "contract": "contracts/MasterChefV2LpRestake.automate.sol:MasterChefV2LpRestake",
        "label": "rewardToken",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20)123"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)123": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMasterChefV2)199": {
        "encoding": "inplace",
        "label": "contract IMasterChefV2",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
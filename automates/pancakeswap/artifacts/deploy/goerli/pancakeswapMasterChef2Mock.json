{
  "address": "0x411256BBe5cb97EF0C6b58BACbfE998c1ceb7f00",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_CAKE",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CAKE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pool",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pool",
          "type": "uint256"
        }
      ],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pool",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "pendingCake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pool",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "allocPoint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRewardBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accCakePerShare",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isRegular",
              "type": "bool"
            }
          ],
          "internalType": "struct IMasterChef2.PoolInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pool",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        }
      ],
      "name": "setPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pool",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pool",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "boostMultiplier",
              "type": "uint256"
            }
          ],
          "internalType": "struct IMasterChef2.UserInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xeb4949f36bc2752b95d5f392b5f5e37cd4d849f3a176261fc8b438f42e7a8c9c",
  "receipt": {
    "to": null,
    "from": "0xFa02EDF9ebA53Ae811650e409A1da2E6103CDB54",
    "contractAddress": "0x411256BBe5cb97EF0C6b58BACbfE998c1ceb7f00",
    "transactionIndex": 11,
    "gasUsed": "1095300",
    "logsBloom": "0x
    "blockHash": "0xe86e32f972bf7c300cd0de538753db36695d86d8467f6720744491c65c27b235",
    "transactionHash": "0xeb4949f36bc2752b95d5f392b5f5e37cd4d849f3a176261fc8b438f42e7a8c9c",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 7595575,
        "transactionHash": "0xeb4949f36bc2752b95d5f392b5f5e37cd4d849f3a176261fc8b438f42e7a8c9c",
        "address": "0x411256BBe5cb97EF0C6b58BACbfE998c1ceb7f00",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fa02edf9eba53ae811650e409a1da2e6103cdb54"
        ],
        "data": "0x",
        "logIndex": 57,
        "blockHash": "0xe86e32f972bf7c300cd0de538753db36695d86d8467f6720744491c65c27b235"
      }
    ],
    "blockNumber": 7595575,
    "cumulativeGasUsed": "6137921",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb181Ea0d2835Df254F8c9E6a0CDFC1024B6Aa3e8"
  ],
  "numDeployments": 1,
  "solcInputHash": "20aeb887fbce531bd97b676abd6eb172",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_CAKE\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CAKE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"}],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pendingCake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accCakePerShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRegular\",\"type\":\"bool\"}],\"internalType\":\"struct IMasterChef2.PoolInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostMultiplier\",\"type\":\"uint256\"}],\"internalType\":\"struct IMasterChef2.UserInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mock/MasterChef2Mock.sol\":\"MasterChef2Mock\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/IMasterChef2.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IMasterChef2 {\\n  struct UserInfo {\\n    uint256 amount;\\n    uint256 rewardDebt;\\n    uint256 boostMultiplier;\\n  }\\n\\n  struct PoolInfo {\\n    uint256 allocPoint;\\n    uint256 lastRewardBlock;\\n    uint256 accCakePerShare;\\n    bool isRegular;\\n  }\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function CAKE() external view returns (address);\\n\\n  function poolLength() external view returns (uint256);\\n\\n  function poolInfo(uint256 pool) external view returns (PoolInfo memory);\\n\\n  function lpToken(uint256 pool) external view returns (address);\\n\\n  function userInfo(uint256 pool, address user) external view returns (UserInfo memory);\\n\\n  function pendingCake(uint256 pool, address user) external view returns (uint256);\\n\\n  function deposit(uint256 pool, uint256 amount) external;\\n\\n  function withdraw(uint256 pool, uint256 amount) external;\\n\\n  function emergencyWithdraw(uint256 pool) external;\\n}\\n\",\"keccak256\":\"0xa590f1ccb59c8664eb088d16cf898a3d6ff6080f6d5d6d1a7c06caf4ad0ce11f\",\"license\":\"BSD-3-Clause\"},\"contracts/mock/MasterChef2Mock.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../IMasterChef2.sol\\\";\\n\\n// solhint-disable var-name-mixedcase\\n// solhint-disable func-param-name-mixedcase\\ncontract MasterChef2Mock is IMasterChef2, Ownable {\\n  using SafeERC20 for IERC20;\\n\\n  address public override CAKE;\\n\\n  uint256 public override poolLength;\\n\\n  mapping(uint256 => IMasterChef2.PoolInfo) internal _pools;\\n\\n  mapping(uint256 => address) internal _lpTokens;\\n\\n  mapping(uint256 => mapping(address => IMasterChef2.UserInfo)) internal _usersInfo;\\n\\n  constructor(address _CAKE) {\\n    CAKE = _CAKE;\\n  }\\n\\n  function setPool(uint256 pool, address _lpToken) external onlyOwner {\\n    require(_lpToken != address(0), \\\"MasterChef2Mock::setPool: invalid lp token address\\\");\\n    if (_lpTokens[pool] == address(0)) {\\n      poolLength++;\\n    }\\n    _lpTokens[pool] = _lpToken;\\n  }\\n\\n  function setReward(\\n    uint256 pool,\\n    address user,\\n    uint256 amount\\n  ) external onlyOwner {\\n    _usersInfo[pool][user].rewardDebt = amount;\\n  }\\n\\n  function poolInfo(uint256 pool) external view override returns (PoolInfo memory) {\\n    return _pools[pool];\\n  }\\n\\n  function lpToken(uint256 pool) public view override returns (address) {\\n    return _lpTokens[pool];\\n  }\\n\\n  function userInfo(uint256 pool, address user) public view override returns (UserInfo memory) {\\n    return _usersInfo[pool][user];\\n  }\\n\\n  function pendingCake(uint256 pool, address user) public view override returns (uint256) {\\n    return _usersInfo[pool][user].rewardDebt;\\n  }\\n\\n  function _withdrawReward(uint256 pool, address recipient) internal {\\n    uint256 amount = pendingCake(pool, recipient);\\n    _usersInfo[pool][recipient].rewardDebt = 0;\\n    IERC20(CAKE).safeTransfer(recipient, amount);\\n  }\\n\\n  function deposit(uint256 pool, uint256 amount) external override {\\n    address _lpToken = lpToken(pool);\\n    require(_lpToken != address(0), \\\"MasterChef2Mock::deposit: pool not found\\\");\\n    IERC20(_lpToken).safeTransferFrom(msg.sender, address(this), amount);\\n    _usersInfo[pool][msg.sender].amount += amount;\\n    _withdrawReward(pool, msg.sender);\\n  }\\n\\n  function withdraw(uint256 pool, uint256 amount) public override {\\n    address _lpToken = lpToken(pool);\\n    require(_lpToken != address(0), \\\"MasterChef2Mock::withdraw: pool not found\\\");\\n    require(amount <= _usersInfo[pool][msg.sender].amount, \\\"MasterChef2Mock::withdraw: insufficient funds\\\");\\n    _usersInfo[pool][msg.sender].amount -= amount;\\n    IERC20(_lpToken).safeTransfer(msg.sender, amount);\\n    _withdrawReward(pool, msg.sender);\\n  }\\n\\n  function emergencyWithdraw(uint256 pool) external override {\\n    withdraw(pool, _usersInfo[pool][msg.sender].amount);\\n  }\\n}\\n\",\"keccak256\":\"0x6fa7385b78661a82e232c6d3014afd3b96b350b6df1f7e0e5d1c9a973829ee6b\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161130338038061130383398101604081905261002f916100ad565b6100383361005d565b600180546001600160a01b0319166001600160a01b03929092169190911790556100dd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100bf57600080fd5b81516001600160a01b03811681146100d657600080fd5b9392505050565b611217806100ec6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806378ed5d1f1161008c578063cdaffed011610066578063cdaffed014610297578063e2bbb158146102aa578063f2fde38b146102bd578063f3a6ee40146102d057600080fd5b806378ed5d1f1461020e5780638da5cb5b1461024457806393f1a40b1461026257600080fd5b8063441a3e70116100c8578063441a3e70146101995780634ca6ef28146101ae5780635312ea8e146101f3578063715018a61461020657600080fd5b8063081e3eda146100ef5780631175a1dd1461010b5780631526fe2714610151575b600080fd5b6100f860025481565b6040519081526020015b60405180910390f35b6100f8610119366004611057565b600091825260056020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290206001015490565b61016461015f36600461103e565b6102e3565b604051610102919081518152602080830151908201526040808301519082015260609182015115159181019190915260800190565b6101ac6101a73660046110b8565b610357565b005b6001546101ce9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610102565b6101ac61020136600461103e565b610516565b6101ac61053e565b6101ce61021c36600461103e565b60009081526004602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60005473ffffffffffffffffffffffffffffffffffffffff166101ce565b610275610270366004611057565b6105cb565b6040805182518152602080840151908201529181015190820152606001610102565b6101ac6102a5366004611083565b610646565b6101ac6102b83660046110b8565b6106fd565b6101ac6102cb366004611001565b61080a565b6101ac6102de366004611057565b610937565b61031060405180608001604052806000815260200160008152602001600081526020016000151581525090565b5060009081526003602081815260409283902083516080810185528154815260018201549281019290925260028101549382019390935291015460ff161515606082015290565b60008281526004602052604090205473ffffffffffffffffffffffffffffffffffffffff168061040e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4d617374657243686566324d6f636b3a3a77697468647261773a20706f6f6c2060448201527f6e6f7420666f756e64000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60008381526005602090815260408083203384529091529020548211156104b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f4d617374657243686566324d6f636b3a3a77697468647261773a20696e73756660448201527f66696369656e742066756e6473000000000000000000000000000000000000006064820152608401610405565b6000838152600560209081526040808320338452909152812080548492906104e090849061115f565b90915550610507905073ffffffffffffffffffffffffffffffffffffffff82163384610aed565b6105118333610bc1565b505050565b600081815260056020908152604080832033845290915290205461053b908290610357565b50565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610405565b6105c96000610c07565b565b6105ef60405180606001604052806000815260200160008152602001600081525090565b50600091825260056020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291815291819020815160608101835281548152600182015493810193909352600201549082015290565b60005473ffffffffffffffffffffffffffffffffffffffff1633146106c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610405565b600092835260056020908152604080852073ffffffffffffffffffffffffffffffffffffffff9094168552929052912060010155565b60008281526004602052604090205473ffffffffffffffffffffffffffffffffffffffff16806107af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4d617374657243686566324d6f636b3a3a6465706f7369743a20706f6f6c206e60448201527f6f7420666f756e640000000000000000000000000000000000000000000000006064820152608401610405565b6107d173ffffffffffffffffffffffffffffffffffffffff8216333085610c7c565b6000838152600560209081526040808320338452909152812080548492906107fa908490611147565b9091555061051190508333610bc1565b60005473ffffffffffffffffffffffffffffffffffffffff16331461088b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610405565b73ffffffffffffffffffffffffffffffffffffffff811661092e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610405565b61053b81610c07565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610405565b73ffffffffffffffffffffffffffffffffffffffff8116610a5b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4d617374657243686566324d6f636b3a3a736574506f6f6c3a20696e76616c6960448201527f64206c7020746f6b656e206164647265737300000000000000000000000000006064820152608401610405565b60008281526004602052604090205473ffffffffffffffffffffffffffffffffffffffff16610a9a5760028054906000610a94836111a2565b91905055505b60009182526004602052604090912080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526105119084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610ce0565b600082815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff858116855292528220600190810180549390555461051191168383610aed565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052610cda9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401610b3f565b50505050565b6000610d42826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610dec9092919063ffffffff16565b8051909150156105115780806020019051810190610d60919061101c565b610511576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610405565b6060610dfb8484600085610e05565b90505b9392505050565b606082471015610e97576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610405565b843b610eff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610405565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610f2891906110da565b60006040518083038185875af1925050503d8060008114610f65576040519150601f19603f3d011682016040523d82523d6000602084013e610f6a565b606091505b5091509150610f7a828286610f85565b979650505050505050565b60608315610f94575081610dfe565b825115610fa45782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040591906110f6565b803573ffffffffffffffffffffffffffffffffffffffff81168114610ffc57600080fd5b919050565b60006020828403121561101357600080fd5b610dfe82610fd8565b60006020828403121561102e57600080fd5b81518015158114610dfe57600080fd5b60006020828403121561105057600080fd5b5035919050565b6000806040838503121561106a57600080fd5b8235915061107a60208401610fd8565b90509250929050565b60008060006060848603121561109857600080fd5b833592506110a860208501610fd8565b9150604084013590509250925092565b600080604083850312156110cb57600080fd5b50508035926020909101359150565b600082516110ec818460208701611176565b9190910192915050565b6020815260008251806020840152611115816040850160208701611176565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000821982111561115a5761115a6111db565b500190565b600082821015611171576111716111db565b500390565b60005b83811015611191578181015183820152602001611179565b83811115610cda5750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156111d4576111d46111db565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea164736f6c6343000806000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c806378ed5d1f1161008c578063cdaffed011610066578063cdaffed014610297578063e2bbb158146102aa578063f2fde38b146102bd578063f3a6ee40146102d057600080fd5b806378ed5d1f1461020e5780638da5cb5b1461024457806393f1a40b1461026257600080fd5b8063441a3e70116100c8578063441a3e70146101995780634ca6ef28146101ae5780635312ea8e146101f3578063715018a61461020657600080fd5b8063081e3eda146100ef5780631175a1dd1461010b5780631526fe2714610151575b600080fd5b6100f860025481565b6040519081526020015b60405180910390f35b6100f8610119366004611057565b600091825260056020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290206001015490565b61016461015f36600461103e565b6102e3565b604051610102919081518152602080830151908201526040808301519082015260609182015115159181019190915260800190565b6101ac6101a73660046110b8565b610357565b005b6001546101ce9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610102565b6101ac61020136600461103e565b610516565b6101ac61053e565b6101ce61021c36600461103e565b60009081526004602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60005473ffffffffffffffffffffffffffffffffffffffff166101ce565b610275610270366004611057565b6105cb565b6040805182518152602080840151908201529181015190820152606001610102565b6101ac6102a5366004611083565b610646565b6101ac6102b83660046110b8565b6106fd565b6101ac6102cb366004611001565b61080a565b6101ac6102de366004611057565b610937565b61031060405180608001604052806000815260200160008152602001600081526020016000151581525090565b5060009081526003602081815260409283902083516080810185528154815260018201549281019290925260028101549382019390935291015460ff161515606082015290565b60008281526004602052604090205473ffffffffffffffffffffffffffffffffffffffff168061040e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4d617374657243686566324d6f636b3a3a77697468647261773a20706f6f6c2060448201527f6e6f7420666f756e64000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60008381526005602090815260408083203384529091529020548211156104b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f4d617374657243686566324d6f636b3a3a77697468647261773a20696e73756660448201527f66696369656e742066756e6473000000000000000000000000000000000000006064820152608401610405565b6000838152600560209081526040808320338452909152812080548492906104e090849061115f565b90915550610507905073ffffffffffffffffffffffffffffffffffffffff82163384610aed565b6105118333610bc1565b505050565b600081815260056020908152604080832033845290915290205461053b908290610357565b50565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610405565b6105c96000610c07565b565b6105ef60405180606001604052806000815260200160008152602001600081525090565b50600091825260056020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291815291819020815160608101835281548152600182015493810193909352600201549082015290565b60005473ffffffffffffffffffffffffffffffffffffffff1633146106c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610405565b600092835260056020908152604080852073ffffffffffffffffffffffffffffffffffffffff9094168552929052912060010155565b60008281526004602052604090205473ffffffffffffffffffffffffffffffffffffffff16806107af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4d617374657243686566324d6f636b3a3a6465706f7369743a20706f6f6c206e60448201527f6f7420666f756e640000000000000000000000000000000000000000000000006064820152608401610405565b6107d173ffffffffffffffffffffffffffffffffffffffff8216333085610c7c565b6000838152600560209081526040808320338452909152812080548492906107fa908490611147565b9091555061051190508333610bc1565b60005473ffffffffffffffffffffffffffffffffffffffff16331461088b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610405565b73ffffffffffffffffffffffffffffffffffffffff811661092e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610405565b61053b81610c07565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610405565b73ffffffffffffffffffffffffffffffffffffffff8116610a5b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4d617374657243686566324d6f636b3a3a736574506f6f6c3a20696e76616c6960448201527f64206c7020746f6b656e206164647265737300000000000000000000000000006064820152608401610405565b60008281526004602052604090205473ffffffffffffffffffffffffffffffffffffffff16610a9a5760028054906000610a94836111a2565b91905055505b60009182526004602052604090912080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526105119084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610ce0565b600082815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff858116855292528220600190810180549390555461051191168383610aed565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052610cda9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401610b3f565b50505050565b6000610d42826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610dec9092919063ffffffff16565b8051909150156105115780806020019051810190610d60919061101c565b610511576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610405565b6060610dfb8484600085610e05565b90505b9392505050565b606082471015610e97576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610405565b843b610eff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610405565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610f2891906110da565b60006040518083038185875af1925050503d8060008114610f65576040519150601f19603f3d011682016040523d82523d6000602084013e610f6a565b606091505b5091509150610f7a828286610f85565b979650505050505050565b60608315610f94575081610dfe565b825115610fa45782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040591906110f6565b803573ffffffffffffffffffffffffffffffffffffffff81168114610ffc57600080fd5b919050565b60006020828403121561101357600080fd5b610dfe82610fd8565b60006020828403121561102e57600080fd5b81518015158114610dfe57600080fd5b60006020828403121561105057600080fd5b5035919050565b6000806040838503121561106a57600080fd5b8235915061107a60208401610fd8565b90509250929050565b60008060006060848603121561109857600080fd5b833592506110a860208501610fd8565b9150604084013590509250925092565b600080604083850312156110cb57600080fd5b50508035926020909101359150565b600082516110ec818460208701611176565b9190910192915050565b6020815260008251806020840152611115816040850160208701611176565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000821982111561115a5761115a6111db565b500190565b600082821015611171576111716111db565b500390565b60005b83811015611191578181015183820152602001611179565b83811115610cda5750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156111d4576111d46111db565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea164736f6c6343000806000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/mock/MasterChef2Mock.sol:MasterChef2Mock",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3530,
        "contract": "contracts/mock/MasterChef2Mock.sol:MasterChef2Mock",
        "label": "CAKE",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3533,
        "contract": "contracts/mock/MasterChef2Mock.sol:MasterChef2Mock",
        "label": "poolLength",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3538,
        "contract": "contracts/mock/MasterChef2Mock.sol:MasterChef2Mock",
        "label": "_pools",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(PoolInfo)856_storage)"
      },
      {
        "astId": 3542,
        "contract": "contracts/mock/MasterChef2Mock.sol:MasterChef2Mock",
        "label": "_lpTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3549,
        "contract": "contracts/mock/MasterChef2Mock.sol:MasterChef2Mock",
        "label": "_usersInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)847_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(UserInfo)847_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IMasterChef2.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)847_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)847_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct IMasterChef2.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)847_storage)"
      },
      "t_mapping(t_uint256,t_struct(PoolInfo)856_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IMasterChef2.PoolInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolInfo)856_storage"
      },
      "t_struct(PoolInfo)856_storage": {
        "encoding": "inplace",
        "label": "struct IMasterChef2.PoolInfo",
        "members": [
          {
            "astId": 849,
            "contract": "contracts/mock/MasterChef2Mock.sol:MasterChef2Mock",
            "label": "allocPoint",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 851,
            "contract": "contracts/mock/MasterChef2Mock.sol:MasterChef2Mock",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 853,
            "contract": "contracts/mock/MasterChef2Mock.sol:MasterChef2Mock",
            "label": "accCakePerShare",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 855,
            "contract": "contracts/mock/MasterChef2Mock.sol:MasterChef2Mock",
            "label": "isRegular",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(UserInfo)847_storage": {
        "encoding": "inplace",
        "label": "struct IMasterChef2.UserInfo",
        "members": [
          {
            "astId": 842,
            "contract": "contracts/mock/MasterChef2Mock.sol:MasterChef2Mock",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 844,
            "contract": "contracts/mock/MasterChef2Mock.sol:MasterChef2Mock",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 846,
            "contract": "contracts/mock/MasterChef2Mock.sol:MasterChef2Mock",
            "label": "boostMultiplier",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
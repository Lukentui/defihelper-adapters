{
  "address": "0xD4B15B0438e303E5Bb17BB8221D608aae2989cAD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_info",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "protocolFee",
          "type": "int256"
        }
      ],
      "name": "ProtocolFeeChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "__protocolFee",
          "type": "int256"
        }
      ],
      "name": "changeProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deadline",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "info",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidityRouter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_slippage",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_deadline",
          "type": "uint16"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gasFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "outMin",
              "type": "uint256"
            }
          ],
          "internalType": "struct MasterChef2SingleRestake.Swap",
          "name": "swap",
          "type": "tuple"
        }
      ],
      "name": "run",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gasFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "runStopLoss",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        }
      ],
      "name": "setStopLoss",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippage",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract IMasterChef2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopLoss",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe9051ebb7d205321e4abaf6cc30a579e625452f4006125ec2bcca2c33bfb3e85",
  "receipt": {
    "to": null,
    "from": "0xFa02EDF9ebA53Ae811650e409A1da2E6103CDB54",
    "contractAddress": "0xD4B15B0438e303E5Bb17BB8221D608aae2989cAD",
    "transactionIndex": 8,
    "gasUsed": "4106587",
    "logsBloom": "0x
    "blockHash": "0xd0ee640f98be31df3b69102aa93e768514561e293c60894cc0e4ba0caa86083b",
    "transactionHash": "0xe9051ebb7d205321e4abaf6cc30a579e625452f4006125ec2bcca2c33bfb3e85",
    "logs": [],
    "blockNumber": 7534037,
    "cumulativeGasUsed": "9665823",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBa4F0699c3B08a93E6EC359d8d487aafDe320ed8"
  ],
  "numDeployments": 1,
  "solcInputHash": "6dfdae98cb24cd9dfc9adc07e0771650",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_info\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"protocolFee\",\"type\":\"int256\"}],\"name\":\"ProtocolFeeChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"__protocolFee\",\"type\":\"int256\"}],\"name\":\"changeProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"info\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_slippage\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_deadline\",\"type\":\"uint16\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"outMin\",\"type\":\"uint256\"}],\"internalType\":\"struct MasterChef2SingleRestake.Swap\",\"name\":\"swap\",\"type\":\"tuple\"}],\"name\":\"run\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"runStopLoss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"setStopLoss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IMasterChef2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopLoss\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"changeProtocolFee(int256)\":{\"params\":{\"__protocolFee\":\"New protocol fee.\"}},\"protocolFee()\":{\"returns\":{\"_0\":\"Current protocol fee.\"}},\"transfer(address,address,uint256)\":{\"params\":{\"amount\":\"Transferred amount of tokens.\",\"recipient\":\"Token recipient address.\",\"token\":\"The address of the token to be transferred.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeProtocolFee(int256)\":{\"notice\":\"Change protocol fee.\"},\"info()\":{\"notice\":\"Returns address of Storage contract.\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"pause()\":{\"notice\":\"Pause contract.\"},\"paused()\":{\"notice\":\"Returns true if the contract is paused, and false otherwise.\"},\"transfer(address,address,uint256)\":{\"notice\":\"Transfer ERC20 token to recipient.\"},\"unpause()\":{\"notice\":\"Unpause contract.\"}},\"notice\":\"Use with simple token only.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MasterChef2SingleRestake.automate.sol\":\"MasterChef2SingleRestake\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/IMasterChef2.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IMasterChef2 {\\n  struct UserInfo {\\n    uint256 amount;\\n    uint256 rewardDebt;\\n  }\\n\\n  struct PoolInfo {\\n    uint256 allocPoint;\\n    uint256 lastRewardBlock;\\n    uint256 accCakePerShare;\\n    bool isRegular;\\n  }\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function CAKE() external view returns (address);\\n\\n  function poolInfo(uint256 pool) external view returns (PoolInfo memory);\\n\\n  function lpToken(uint256 pool) external view returns (address);\\n\\n  function userInfo(uint256 pool, address user) external view returns (UserInfo memory);\\n\\n  function pendingCake(uint256 pool, address user) external view returns (uint256);\\n\\n  function deposit(uint256 pool, uint256 amount) external;\\n\\n  function withdraw(uint256 pool, uint256 amount) external;\\n\\n  function emergencyWithdraw(uint256 pool) external;\\n}\\n\",\"keccak256\":\"0x51711b2fc2768eb3fa20289aedb1f04be720e9ee331f68a37ac35cc03299da12\",\"license\":\"BSD-3-Clause\"},\"contracts/MasterChef2SingleRestake.automate.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./utils/DFH/Automate.sol\\\";\\nimport \\\"./utils/DFH/IStorage.sol\\\";\\nimport \\\"./utils/Uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"./utils/Uniswap/SafeUniswapV2Router.sol\\\";\\nimport \\\"./utils/Uniswap/StopLoss.sol\\\";\\nimport \\\"./IMasterChef2.sol\\\";\\n\\n/**\\n * @notice Use with simple token only.\\n */\\ncontract MasterChef2SingleRestake is Automate {\\n  using SafeERC20 for IERC20;\\n  using SafeUniswapV2Router for IUniswapV2Router02;\\n  using StopLoss for StopLoss.Order;\\n\\n  struct Swap {\\n    address[] path;\\n    uint256 outMin;\\n  }\\n\\n  IMasterChef2 public staking;\\n\\n  address public liquidityRouter;\\n\\n  uint256 public pool;\\n\\n  uint16 public slippage;\\n\\n  uint16 public deadline;\\n\\n  IERC20 public stakingToken;\\n\\n  IERC20 public rewardToken;\\n\\n  StopLoss.Order public stopLoss;\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor(address _info) Automate(_info) {}\\n\\n  function init(\\n    address _staking,\\n    address _liquidityRouter,\\n    uint256 _pool,\\n    uint16 _slippage,\\n    uint16 _deadline\\n  ) external initializer {\\n    require(\\n      !_initialized || address(staking) == _staking,\\n      \\\"MasterChef2SingleRestake::init: reinitialize staking address forbidden\\\"\\n    );\\n    staking = IMasterChef2(_staking);\\n    require(\\n      !_initialized || liquidityRouter == _liquidityRouter,\\n      \\\"MasterChef2SingleRestake::init: reinitialize liquidity router address forbidden\\\"\\n    );\\n    liquidityRouter = _liquidityRouter;\\n    require(!_initialized || pool == _pool, \\\"MasterChef2SingleRestake::init: reinitialize pool index forbidden\\\");\\n    pool = _pool;\\n    slippage = _slippage;\\n    deadline = _deadline;\\n\\n    if (!_initialized) {\\n      address lpToken = staking.lpToken(pool);\\n      stakingToken = IERC20(lpToken);\\n      rewardToken = IERC20(staking.CAKE());\\n    }\\n  }\\n\\n  function deposit() external onlyOwner {\\n    IERC20 _stakingToken = stakingToken; // gas optimisation\\n    uint256 balance = _stakingToken.balanceOf(address(this));\\n    _stakingToken.safeApprove(address(staking), balance);\\n    staking.deposit(pool, balance);\\n  }\\n\\n  function refund() external onlyOwner {\\n    IMasterChef2 _staking = staking; // gas optimisation\\n    address __owner = owner(); // gas optimisation\\n    IMasterChef2.UserInfo memory userInfo = _staking.userInfo(pool, address(this));\\n    _staking.withdraw(pool, userInfo.amount);\\n    stakingToken.safeTransfer(__owner, stakingToken.balanceOf(address(this)));\\n    rewardToken.safeTransfer(__owner, rewardToken.balanceOf(address(this)));\\n  }\\n\\n  function emergencyWithdraw() external onlyOwner {\\n    address __owner = owner(); // gas optimisation\\n    staking.emergencyWithdraw(pool);\\n    stakingToken.safeTransfer(__owner, stakingToken.balanceOf(address(this)));\\n    rewardToken.safeTransfer(__owner, rewardToken.balanceOf(address(this)));\\n  }\\n\\n  function run(\\n    uint256 gasFee,\\n    uint256 _deadline,\\n    Swap memory swap\\n  ) external bill(gasFee, \\\"PancakeSwapMasterChef2SingleRestake\\\") {\\n    IMasterChef2 _staking = staking; // gas optimization\\n    IUniswapV2Router02 _liquidityRouter = IUniswapV2Router02(liquidityRouter);\\n    require(_staking.pendingCake(pool, address(this)) > 0, \\\"MasterChef2SingleRestake::run: no earned\\\");\\n\\n    _staking.deposit(pool, 0); // get all reward\\n    uint256 rewardAmount = rewardToken.balanceOf(address(this));\\n    rewardToken.safeApprove(address(_liquidityRouter), rewardAmount);\\n    _liquidityRouter.safeSwapExactTokensForTokens(rewardAmount, swap.outMin, swap.path, address(this), _deadline);\\n\\n    IERC20 _stakingToken = stakingToken;\\n    uint256 stakingAmount = _stakingToken.balanceOf(address(this));\\n    _stakingToken.safeApprove(address(_staking), stakingAmount);\\n    _staking.deposit(pool, stakingAmount);\\n  }\\n\\n  function setStopLoss(\\n    address[] calldata path,\\n    uint256 amountOut,\\n    uint256 amountOutMin\\n  ) external onlyOwner {\\n    stopLoss = StopLoss.Order(path, amountOut, amountOutMin);\\n  }\\n\\n  function runStopLoss(uint256 gasFee, uint256 _deadline)\\n    external\\n    bill(gasFee, \\\"PancakeSwapMasterChef2SingleStopLoss\\\")\\n  {\\n    staking.withdraw(pool, staking.userInfo(pool, address(this)).amount);\\n    address[] memory inTokens = new address[](1);\\n    inTokens[0] = address(stakingToken);\\n\\n    stopLoss.run(liquidityRouter, inTokens, _deadline);\\n    address __owner = owner();\\n    IERC20 exitToken = IERC20(stopLoss.path[stopLoss.path.length - 1]);\\n    exitToken.safeTransfer(__owner, exitToken.balanceOf(address(this)));\\n    if (rewardToken != exitToken) {\\n      rewardToken.safeTransfer(__owner, rewardToken.balanceOf(address(this)));\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x3097707e64adfd14d34cfad55fb7b3e57f21749f23095898c8cb631bd9093a4f\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/DFH/Automate.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./proxy/ERC1167.sol\\\";\\nimport \\\"./IStorage.sol\\\";\\nimport \\\"./IBalance.sol\\\";\\n\\n// solhint-disable avoid-tx-origin\\nabstract contract Automate {\\n  using ERC1167 for address;\\n\\n  /// @notice Storage contract address.\\n  address internal _info;\\n\\n  /// @notice Contract owner.\\n  address internal _owner;\\n\\n  /// @notice Is contract paused.\\n  bool internal _paused;\\n\\n  /// @notice Protocol fee in USD (-1 if value in global storage).\\n  int256 internal _protocolFee;\\n\\n  /// @notice Is contract already initialized.\\n  bool internal _initialized;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  event ProtocolFeeChanged(int256 protocolFee);\\n\\n  constructor(address __info) {\\n    _info = __info;\\n    _owner = tx.origin;\\n    _protocolFee = -1;\\n  }\\n\\n  /**\\n   * @notice Returns address of Storage contract.\\n   */\\n  function info() public view returns (address) {\\n    address impl = address(this).implementation();\\n    if (impl == address(this)) return _info;\\n\\n    return Automate(impl).info();\\n  }\\n\\n  /// @dev Modifier to protect an initializer function from being invoked twice.\\n  modifier initializer() {\\n    if (_owner == address(0)) {\\n      _owner = tx.origin;\\n      _protocolFee = -1;\\n    } else {\\n      require(_owner == msg.sender, \\\"Automate: caller is not the owner\\\");\\n    }\\n    _;\\n    _initialized = true;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(_owner == msg.sender, \\\"Automate: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external onlyOwner {\\n    require(address(this).implementation() == address(this), \\\"Automate: change the owner failed\\\");\\n\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the pauser.\\n   */\\n  modifier onlyPauser() {\\n    if (address(this).implementation() == address(this)) {\\n      address pauser = IStorage(info()).getAddress(keccak256(\\\"DFH:Pauser\\\"));\\n      require(msg.sender == _owner || msg.sender == pauser, \\\"Automate: caller is not the pauser\\\");\\n    } else {\\n      require(msg.sender == _owner, \\\"Automate: caller is not the pauser\\\");\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Returns true if the contract is paused, and false otherwise.\\n   */\\n  function paused() public view returns (bool) {\\n    address impl = address(this).implementation();\\n    if (impl == address(this)) return _paused;\\n\\n    return _paused || Automate(impl).paused();\\n  }\\n\\n  /**\\n   * @dev Throws if contract unpaused.\\n   */\\n  modifier whenPaused() {\\n    require(paused(), \\\"Automate: not paused\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Throws if contract paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused(), \\\"Automate: paused\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Pause contract.\\n   */\\n  function pause() external onlyPauser whenNotPaused {\\n    _paused = true;\\n  }\\n\\n  /**\\n   * @notice Unpause contract.\\n   */\\n  function unpause() external onlyPauser whenPaused {\\n    _paused = false;\\n  }\\n\\n  /**\\n   * @return Current protocol fee.\\n   */\\n  function protocolFee() public view returns (uint256) {\\n    address impl = address(this).implementation();\\n    if (impl != address(this) && _protocolFee < 0) {\\n      return Automate(impl).protocolFee();\\n    }\\n\\n    IStorage __info = IStorage(info());\\n    uint256 feeOnUSD = _protocolFee < 0 ? __info.getUint(keccak256(\\\"DFH:Fee:Automate\\\")) : uint256(_protocolFee);\\n    if (feeOnUSD == 0) return 0;\\n\\n    (, int256 price, , , ) = AggregatorV3Interface(__info.getAddress(keccak256(\\\"DFH:Fee:PriceFeed\\\"))).latestRoundData();\\n    require(price > 0, \\\"Automate: invalid price\\\");\\n\\n    return (feeOnUSD * 1e18) / uint256(price);\\n  }\\n\\n  /**\\n   * @notice Change protocol fee.\\n   * @param __protocolFee New protocol fee.\\n   */\\n  function changeProtocolFee(int256 __protocolFee) external {\\n    address impl = address(this).implementation();\\n    require(\\n      (impl == address(this) ? _owner : Automate(impl).owner()) == msg.sender,\\n      \\\"Automate::changeProtocolFee: caller is not the protocol owner\\\"\\n    );\\n\\n    _protocolFee = __protocolFee;\\n    emit ProtocolFeeChanged(__protocolFee);\\n  }\\n\\n  /**\\n   * @dev Claim fees from owner.\\n   * @param gasFee Claim gas fee.\\n   * @param operation Claim description.\\n   */\\n  function _bill(uint256 gasFee, string memory operation) internal whenNotPaused returns (uint256) {\\n    address account = owner(); // gas optimisation\\n    if (tx.origin == account) return 0; // free if called by the owner\\n\\n    IStorage __info = IStorage(info());\\n\\n    address balance = __info.getAddress(keccak256(\\\"DFH:Contract:Balance\\\"));\\n    require(balance != address(0), \\\"Automate::_bill: balance contract not found\\\");\\n\\n    return IBalance(balance).claim(account, gasFee, protocolFee(), operation);\\n  }\\n\\n  /**\\n   * @dev Claim fees from owner.\\n   * @param gasFee Claim gas fee.\\n   * @param operation Claim description.\\n   */\\n  modifier bill(uint256 gasFee, string memory operation) {\\n    _bill(gasFee, operation);\\n    _;\\n  }\\n\\n  /**\\n   * @notice Transfer ERC20 token to recipient.\\n   * @param token The address of the token to be transferred.\\n   * @param recipient Token recipient address.\\n   * @param amount Transferred amount of tokens.\\n   */\\n  function transfer(\\n    address token,\\n    address recipient,\\n    uint256 amount\\n  ) external onlyOwner {\\n    IERC20(token).transfer(recipient, amount);\\n  }\\n}\\n\",\"keccak256\":\"0xb0b26358673f6750ee6eef40b1a9668a3dc2965ffb1e1d777c3c8ca8cc2ce5a5\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/DFH/IBalance.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IBalance {\\n  function claim(\\n    address account,\\n    uint256 gasFee,\\n    uint256 protocolFee,\\n    string memory description\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xaa996ebfd96fa304ff8c51b240819815ea9cb1b27a250319c57cac7b597be6cc\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/DFH/IStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IStorage {\\n  function getBytes(bytes32 key) external view returns (bytes memory);\\n\\n  function getBool(bytes32 key) external view returns (bool);\\n\\n  function getUint(bytes32 key) external view returns (uint256);\\n\\n  function getInt(bytes32 key) external view returns (int256);\\n\\n  function getAddress(bytes32 key) external view returns (address);\\n\\n  function getString(bytes32 key) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xc3f6f2d80c27a1d5abbf6f6df55c96a315cdf7887b589c9ef5d45d036c56aa76\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/DFH/proxy/ERC1167.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable no-inline-assembly\\nlibrary ERC1167 {\\n  bytes public constant CLONE =\\n    hex\\\"363d3d373d3d3d363d73bebebebebebebebebebebebebebebebebebebebe5af43d82803e903d91602b57fd5bf3\\\";\\n\\n  /**\\n   * @notice Make new proxy contract.\\n   * @param impl Address prototype contract.\\n   * @return proxy Address new proxy contract.\\n   */\\n  function clone(address impl) external returns (address proxy) {\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(ptr, 0x14), shl(0x60, impl))\\n      mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      proxy := create(0, ptr, 0x37)\\n    }\\n    require(proxy != address(0), \\\"ERC1167: create failed\\\");\\n  }\\n\\n  /**\\n   * @notice Returns address of prototype contract for proxy.\\n   * @param proxy Address proxy contract.\\n   * @return impl Address prototype contract (current contract address if not proxy).\\n   */\\n  function implementation(address proxy) external view returns (address impl) {\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(proxy)\\n    }\\n\\n    impl = proxy;\\n    if (size <= 45 && size >= 41) {\\n      bool matches = true;\\n      uint256 i;\\n\\n      bytes memory code;\\n      assembly {\\n        code := mload(0x40)\\n        mstore(0x40, add(code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n        mstore(code, size)\\n        extcodecopy(proxy, add(code, 0x20), 0, size)\\n      }\\n      for (i = 0; matches && i < 9; i++) {\\n        matches = code[i] == CLONE[i];\\n      }\\n      for (i = 0; matches && i < 15; i++) {\\n        if (i == 4) {\\n          matches = code[code.length - i - 1] == bytes1(uint8(CLONE[45 - i - 1]) - uint8(45 - size));\\n        } else {\\n          matches = code[code.length - i - 1] == CLONE[45 - i - 1];\\n        }\\n      }\\n      if (code[9] != bytes1(0x73 - uint8(45 - size))) {\\n        matches = false;\\n      }\\n      uint256 forwardedToBuffer;\\n      if (matches) {\\n        assembly {\\n          forwardedToBuffer := mload(add(code, 30))\\n        }\\n        forwardedToBuffer &= (0x1 << (20 * 8)) - 1;\\n        impl = address(uint160(forwardedToBuffer >> ((45 - size) * 8)));\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x766f43e1832068a2a230f9bc19db0b190f638c4b0acb2dc689da07d43a45675f\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/Uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\ninterface IUniswapV2Pair is IERC20 {\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function price0CumulativeLast() external view returns (uint256);\\n\\n  function price1CumulativeLast() external view returns (uint256);\\n\\n  function kLast() external view returns (uint256);\\n\\n  function mint(address to) external returns (uint256 liquidity);\\n\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n  function swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external;\\n}\\n\",\"keccak256\":\"0x562becce443b899cba13f76266d689bda17a0a1d457af045762848aa552037ac\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/Uniswap/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IUniswapV2Router02 {\\n  function factory() external view returns (address);\\n\\n  function WETH() external view returns (address);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 amountADesired,\\n    uint256 amountBDesired,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (\\n      uint256 amountA,\\n      uint256 amountB,\\n      uint256 liquidity\\n    );\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint256 amountTokenDesired,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    payable\\n    returns (\\n      uint256 amountToken,\\n      uint256 amountETH,\\n      uint256 liquidity\\n    );\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function swapExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactTokens(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactETHForTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactETH(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactTokensForETH(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapETHForExactTokens(\\n    uint256 amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) external pure returns (uint256 amountB);\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountOut);\\n\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountIn);\\n\\n  function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n  function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountETH);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountETH);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n}\\n\",\"keccak256\":\"0xf12b9639d5053651c2416527a638fd3168276feb207265374d87574a9a312f75\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/Uniswap/SafeUniswapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./IUniswapV2Router02.sol\\\";\\nimport \\\"./IUniswapV2Pair.sol\\\";\\n\\nlibrary SafeUniswapV2Router {\\n  using SafeERC20 for IERC20;\\n\\n  function safeSwapExactTokensForTokens(\\n    IUniswapV2Router02 router,\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] memory path,\\n    address to,\\n    uint256 deadline\\n  ) internal returns (uint256[] memory amounts) {\\n    if (path[0] != path[path.length - 1])\\n      amounts = router.swapExactTokensForTokens(amountIn, amountOutMin, path, to, deadline);\\n  }\\n\\n  function addAllLiquidity(\\n    IUniswapV2Router02 router,\\n    address tokenA,\\n    address tokenB,\\n    address to,\\n    uint256 deadline\\n  )\\n    internal\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    uint256 amountA = IERC20(tokenA).balanceOf(address(this));\\n    uint256 amountB = IERC20(tokenB).balanceOf(address(this));\\n    IERC20(tokenA).safeApprove(address(router), amountA);\\n    IERC20(tokenB).safeApprove(address(router), amountB);\\n    return router.addLiquidity(tokenA, tokenB, amountA, amountB, 0, 0, to, deadline);\\n  }\\n\\n  function removeAllLiquidity(\\n    IUniswapV2Router02 router,\\n    address pair,\\n    address to,\\n    uint256 deadline\\n  )\\n    internal\\n    returns (\\n      address tokenA,\\n      address tokenB,\\n      uint256 amountA,\\n      uint256 amountB\\n    )\\n  {\\n    tokenA = IUniswapV2Pair(pair).token0();\\n    tokenB = IUniswapV2Pair(pair).token1();\\n    uint256 balance = IERC20(pair).balanceOf(address(this));\\n    IERC20(pair).safeApprove(address(router), balance);\\n    (amountA, amountB) = router.removeLiquidity(tokenA, tokenB, balance, 0, 0, to, deadline);\\n  }\\n}\\n\",\"keccak256\":\"0xaf2740c3a9913bda5dfb7ad4bd0abdf94ba52e9020fc2346f3dd28b497cbbe16\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/Uniswap/StopLoss.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./SafeUniswapV2Router.sol\\\";\\nimport \\\"./IUniswapV2Router02.sol\\\";\\n\\nlibrary StopLoss {\\n  using SafeERC20 for IERC20;\\n  using SafeUniswapV2Router for IUniswapV2Router02;\\n\\n  struct Order {\\n    address[] path;\\n    uint256 amountOut;\\n    uint256 amountOutMin;\\n  }\\n\\n  event StopLossOrderCompleted(uint256 amountOut);\\n\\n  function run(\\n    Order storage order,\\n    address liquidityRouter,\\n    address[] memory inTokens,\\n    uint256 _deadline\\n  ) internal {\\n    require(order.path.length > 1 && order.amountOut > 0, \\\"StopLoss::run: stop loss disabled\\\");\\n    require(inTokens.length <= 256, \\\"StopLoss::run: too many in tokens\\\");\\n    for (uint8 i = 0; i < inTokens.length; i++) {\\n      address token = inTokens[i];\\n      if (token == order.path[0]) continue;\\n      uint256 balance = IERC20(token).balanceOf(address(this));\\n      if (balance == 0) continue;\\n      address[] memory path = new address[](2);\\n      path[0] = token;\\n      path[1] = order.path[0];\\n      IERC20(token).safeApprove(liquidityRouter, balance);\\n      IUniswapV2Router02(liquidityRouter).safeSwapExactTokensForTokens(balance, 0, path, address(this), _deadline);\\n    }\\n\\n    address baseToken = order.path[0];\\n    uint256 baseBalance = IERC20(baseToken).balanceOf(address(this));\\n    uint256 amountOut;\\n    if (baseToken != order.path[order.path.length - 1]) {\\n      require(baseBalance > 0, \\\"StopLoss::run: insufficient balance of base token\\\");\\n      IERC20(baseToken).safeApprove(liquidityRouter, baseBalance);\\n      uint256[] memory amountsOut = IUniswapV2Router02(liquidityRouter).safeSwapExactTokensForTokens(\\n        baseBalance,\\n        order.amountOutMin,\\n        order.path,\\n        address(this),\\n        _deadline\\n      );\\n      amountOut = amountsOut[amountsOut.length - 1];\\n      require(amountOut <= order.amountOut, \\\"StopLoss::run: invalid output amount\\\");\\n    } else {\\n      amountOut = baseBalance;\\n      require(amountOut <= order.amountOut, \\\"StopLoss::run: invalid output amount\\\");\\n    }\\n    emit StopLossOrderCompleted(amountOut);\\n  }\\n}\\n\",\"keccak256\":\"0x35e92f1e66da9fcfffd67f7f29988801a1e40d36547ea28e7c6c09a56feacce3\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200496038038062004960833981016040819052620000349162000069565b600080546001600160a01b039092166001600160a01b031992831617905560018054909116321790556000196002556200009b565b6000602082840312156200007c57600080fd5b81516001600160a01b03811681146200009457600080fd5b9392505050565b6148b580620000ab6000396000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c80638456cb59116100e3578063b838d9141161008c578063db2e21bc11610066578063db2e21bc1461037d578063f2fde38b14610385578063f7c618c11461039857600080fd5b8063b838d9141461034f578063beabacc814610362578063d0e30db01461037557600080fd5b80639327d80a116100bd5780639327d80a146103215780639742b5c314610334578063b0e21e8a1461034757600080fd5b80638456cb59146102e85780638c3d8faf146102f05780638da5cb5b1461030357600080fd5b80633f4ba83a11610145578063590e1ae31161011f578063590e1ae3146102a05780635c975abb146102a857806372f702f3146102c057600080fd5b80633f4ba83a146102505780634cf088d914610258578063527a15651461027d57600080fd5b806329dcb0cf1161017657806329dcb0cf14610213578063370158ea1461023a5780633e032a3b1461024257600080fd5b806313ead7c61461019d57806316f0115b146101b257806324702944146101ce575b600080fd5b6101b06101ab3660046143c7565b6103b8565b005b6101bb60055481565b6040519081526020015b60405180910390f35b6004546101ee9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101c5565b6006546102279062010000900461ffff1681565b60405161ffff90911681526020016101c5565b6101ee610812565b6006546102279061ffff1681565b6101b0610974565b6003546101ee90610100900473ffffffffffffffffffffffffffffffffffffffff1681565b600954600a5461028b919082565b604080519283526020830191909152016101c5565b6101b0610d06565b6102b06110cc565b60405190151581526020016101c5565b6006546101ee90640100000000900473ffffffffffffffffffffffffffffffffffffffff1681565b6101b0611251565b6101b06102fe366004614200565b6115fb565b60015473ffffffffffffffffffffffffffffffffffffffff166101ee565b6101b061032f3660046143a5565b611725565b6101b0610342366004614341565b611ab2565b6101bb611cec565b6101b061035d36600461419e565b6120f9565b6101b061037036600461415d565b612770565b6101b06128c5565b6101b0612adf565b6101b0610393366004614123565b612cf7565b6007546101ee9073ffffffffffffffffffffffffffffffffffffffff1681565b82604051806060016040528060238152602001614862602391396103dc8282612f56565b50600354600480546005546040517f1175a1dd0000000000000000000000000000000000000000000000000000000081529283015230602483015273ffffffffffffffffffffffffffffffffffffffff61010090930483169216906000908390631175a1dd9060440160206040518083038186803b15801561045d57600080fd5b505afa158015610471573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610495919061438c565b11610527576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4d6173746572436865663253696e676c6552657374616b653a3a72756e3a206e60448201527f6f206561726e656400000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6005546040517fe2bbb15800000000000000000000000000000000000000000000000000000000815260048101919091526000602482015273ffffffffffffffffffffffffffffffffffffffff83169063e2bbb15890604401600060405180830381600087803b15801561059a57600080fd5b505af11580156105ae573d6000803e3d6000fd5b50506007546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000935073ffffffffffffffffffffffffffffffffffffffff90911691506370a082319060240160206040518083038186803b15801561061e57600080fd5b505afa158015610632573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610656919061438c565b60075490915061067d9073ffffffffffffffffffffffffffffffffffffffff168383613228565b602086015186516106aa9173ffffffffffffffffffffffffffffffffffffffff851691849190308c613437565b506006546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015264010000000090910473ffffffffffffffffffffffffffffffffffffffff169060009082906370a082319060240160206040518083038186803b15801561072057600080fd5b505afa158015610734573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610758919061438c565b905061077b73ffffffffffffffffffffffffffffffffffffffff83168683613228565b6005546040517fe2bbb15800000000000000000000000000000000000000000000000000000000815260048101919091526024810182905273ffffffffffffffffffffffffffffffffffffffff86169063e2bbb15890604401600060405180830381600087803b1580156107ee57600080fd5b505af1158015610802573d6000803e3d6000fd5b5050505050505050505050505050565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482015260009081907310bBA4e8A2f6F85B75cd75ef773f5Daca5596C8790636b8807189060240160206040518083038186803b15801561087a57600080fd5b505af415801561088e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b29190614140565b905073ffffffffffffffffffffffffffffffffffffffff81163014156108f057505060005473ffffffffffffffffffffffffffffffffffffffff1690565b8073ffffffffffffffffffffffffffffffffffffffff1663370158ea6040518163ffffffff1660e01b815260040160206040518083038186803b15801561093657600080fd5b505afa15801561094a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096e9190614140565b91505090565b6040517f6b8807180000000000000000000000000000000000000000000000000000000081523060048201819052907310bBA4e8A2f6F85B75cd75ef773f5Daca5596C8790636b8807189060240160206040518083038186803b1580156109da57600080fd5b505af41580156109ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a129190614140565b73ffffffffffffffffffffffffffffffffffffffff161415610bc7576000610a38610812565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf175974395600482015273ffffffffffffffffffffffffffffffffffffffff91909116906321f8a7219060240160206040518083038186803b158015610abf57600080fd5b505afa158015610ad3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af79190614140565b60015490915073ffffffffffffffffffffffffffffffffffffffff16331480610b3557503373ffffffffffffffffffffffffffffffffffffffff8216145b610bc1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f6572000000000000000000000000000000000000000000000000000000000000606482015260840161051e565b50610c6e565b60015473ffffffffffffffffffffffffffffffffffffffff163314610c6e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f6572000000000000000000000000000000000000000000000000000000000000606482015260840161051e565b610c766110cc565b610cdc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4175746f6d6174653a206e6f7420706175736564000000000000000000000000604482015260640161051e565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055565b60015473ffffffffffffffffffffffffffffffffffffffff163314610dad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f7200000000000000000000000000000000000000000000000000000000000000606482015260840161051e565b60035473ffffffffffffffffffffffffffffffffffffffff610100909104166000610ded60015473ffffffffffffffffffffffffffffffffffffffff1690565b6005546040517f93f1a40b000000000000000000000000000000000000000000000000000000008152600481019190915230602482015290915060009073ffffffffffffffffffffffffffffffffffffffff8416906393f1a40b90604401604080518083038186803b158015610e6257600080fd5b505afa158015610e76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9a919061435a565b60055481516040517f441a3e700000000000000000000000000000000000000000000000000000000081526004810192909252602482015290915073ffffffffffffffffffffffffffffffffffffffff84169063441a3e7090604401600060405180830381600087803b158015610f1057600080fd5b505af1158015610f24573d6000803e3d6000fd5b50506006546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152610fff935085925064010000000090910473ffffffffffffffffffffffffffffffffffffffff16906370a08231906024015b60206040518083038186803b158015610f9f57600080fd5b505afa158015610fb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd7919061438c565b600654640100000000900473ffffffffffffffffffffffffffffffffffffffff169190613587565b6007546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526110c791849173ffffffffffffffffffffffffffffffffffffffff909116906370a08231906024015b60206040518083038186803b15801561106f57600080fd5b505afa158015611083573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a7919061438c565b60075473ffffffffffffffffffffffffffffffffffffffff169190613587565b505050565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482015260009081907310bBA4e8A2f6F85B75cd75ef773f5Daca5596C8790636b8807189060240160206040518083038186803b15801561113457600080fd5b505af4158015611148573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116c9190614140565b905073ffffffffffffffffffffffffffffffffffffffff81163014156111af57505060015474010000000000000000000000000000000000000000900460ff1690565b60015474010000000000000000000000000000000000000000900460ff168061096e57508073ffffffffffffffffffffffffffffffffffffffff16635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561121957600080fd5b505afa15801561122d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096e919061431f565b6040517f6b8807180000000000000000000000000000000000000000000000000000000081523060048201819052907310bBA4e8A2f6F85B75cd75ef773f5Daca5596C8790636b8807189060240160206040518083038186803b1580156112b757600080fd5b505af41580156112cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ef9190614140565b73ffffffffffffffffffffffffffffffffffffffff1614156114a4576000611315610812565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf175974395600482015273ffffffffffffffffffffffffffffffffffffffff91909116906321f8a7219060240160206040518083038186803b15801561139c57600080fd5b505afa1580156113b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d49190614140565b60015490915073ffffffffffffffffffffffffffffffffffffffff1633148061141257503373ffffffffffffffffffffffffffffffffffffffff8216145b61149e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f6572000000000000000000000000000000000000000000000000000000000000606482015260840161051e565b5061154b565b60015473ffffffffffffffffffffffffffffffffffffffff16331461154b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f6572000000000000000000000000000000000000000000000000000000000000606482015260840161051e565b6115536110cc565b156115ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4175746f6d6174653a2070617573656400000000000000000000000000000000604482015260640161051e565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055565b60015473ffffffffffffffffffffffffffffffffffffffff1633146116a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f7200000000000000000000000000000000000000000000000000000000000000606482015260840161051e565b60405180606001604052808585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505050908252506020808201859052604090910183905281518051600892611708928492910190614053565b506020820151600182015560409091015160029091015550505050565b81604051806060016040528060248152602001614885602491396117498282612f56565b506003546005546040517f93f1a40b0000000000000000000000000000000000000000000000000000000081526004810182905230602482015261010090920473ffffffffffffffffffffffffffffffffffffffff169163441a3e70919083906393f1a40b90604401604080518083038186803b1580156117c957600080fd5b505afa1580156117dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611801919061435a565b5160405160e084901b7fffffffff0000000000000000000000000000000000000000000000000000000016815260048101929092526024820152604401600060405180830381600087803b15801561185857600080fd5b505af115801561186c573d6000803e3d6000fd5b50600092506001915061187c9050565b6040519080825280602002602001820160405280156118a5578160200160208202803683370190505b509050600660049054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816000815181106118de576118de6147e1565b73ffffffffffffffffffffffffffffffffffffffff9283166020918202929092010152600454611913916008911683876135dd565b600061193460015473ffffffffffffffffffffffffffffffffffffffff1690565b6008805491925060009161194a9060019061474f565b8154811061195a5761195a6147e1565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9091169150611a2b90839083906370a082319060240160206040518083038186803b1580156119d557600080fd5b505afa1580156119e9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0d919061438c565b73ffffffffffffffffffffffffffffffffffffffff84169190613587565b60075473ffffffffffffffffffffffffffffffffffffffff828116911614611aa9576007546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152611aa991849173ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401611057565b50505050505050565b6040517f6b8807180000000000000000000000000000000000000000000000000000000081523060048201526000907310bBA4e8A2f6F85B75cd75ef773f5Daca5596C8790636b8807189060240160206040518083038186803b158015611b1857600080fd5b505af4158015611b2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b509190614140565b90503373ffffffffffffffffffffffffffffffffffffffff82163014611bf3578173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bb657600080fd5b505afa158015611bca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bee9190614140565b611c0d565b60015473ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff1614611cb0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603d60248201527f4175746f6d6174653a3a6368616e676550726f746f636f6c4665653a2063616c60448201527f6c6572206973206e6f74207468652070726f746f636f6c206f776e6572000000606482015260840161051e565b60028290556040518281527f3c1d43943224e49d951ce8295a5c8332b517083b3f89bed50feae2cb39caebb59060200160405180910390a15050565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482015260009081907310bBA4e8A2f6F85B75cd75ef773f5Daca5596C8790636b8807189060240160206040518083038186803b158015611d5457600080fd5b505af4158015611d68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8c9190614140565b905073ffffffffffffffffffffffffffffffffffffffff81163014801590611db657506000600254125b15611e39578073ffffffffffffffffffffffffffffffffffffffff1663b0e21e8a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e0157600080fd5b505afa158015611e15573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096e919061438c565b6000611e43610812565b905060008060025412611e5857600254611f15565b6040517fbd02d0f50000000000000000000000000000000000000000000000000000000081527fa93d95f96a5de25d7a41ddf1f5e8d45cfc929c4838163cf011dab4043a4a40d5600482015273ffffffffffffffffffffffffffffffffffffffff83169063bd02d0f59060240160206040518083038186803b158015611edd57600080fd5b505afa158015611ef1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f15919061438c565b905080611f26576000935050505090565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f65c90423fe7c880476633a7e36521740f87199d233dc56eb4ca6643eb76f605f600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906321f8a7219060240160206040518083038186803b158015611fae57600080fd5b505afa158015611fc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe69190614140565b73ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561202b57600080fd5b505afa15801561203f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206391906144b8565b505050915050600081136120d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4175746f6d6174653a20696e76616c6964207072696365000000000000000000604482015260640161051e565b806120e683670de0b6b3a7640000614712565b6120f091906146d7565b94505050505090565b60015473ffffffffffffffffffffffffffffffffffffffff1661216957600180547fffffffffffffffffffffffff000000000000000000000000000000000000000016321790557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600255612210565b60015473ffffffffffffffffffffffffffffffffffffffff163314612210576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f7200000000000000000000000000000000000000000000000000000000000000606482015260840161051e565b60035460ff161580612241575060035473ffffffffffffffffffffffffffffffffffffffff86811661010090920416145b6122f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604660248201527f4d6173746572436865663253696e676c6552657374616b653a3a696e69743a2060448201527f7265696e697469616c697a65207374616b696e67206164647265737320666f7260648201527f62696464656e0000000000000000000000000000000000000000000000000000608482015260a40161051e565b6003805473ffffffffffffffffffffffffffffffffffffffff8716610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff8216811790925560ff9182169116171580612368575060045473ffffffffffffffffffffffffffffffffffffffff8581169116145b61241a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604f60248201527f4d6173746572436865663253696e676c6552657374616b653a3a696e69743a2060448201527f7265696e697469616c697a65206c697175696469747920726f7574657220616460648201527f647265737320666f7262696464656e0000000000000000000000000000000000608482015260a40161051e565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861617905560035460ff16158061246d575082600554145b61251f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f4d6173746572436865663253696e676c6552657374616b653a3a696e69743a2060448201527f7265696e697469616c697a6520706f6f6c20696e64657820666f72626964646560648201527f6e00000000000000000000000000000000000000000000000000000000000000608482015260a40161051e565b60058390556006805461ffff83811662010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000009092169085161717905560035460ff1661273e576003546005546040517f78ed5d1f0000000000000000000000000000000000000000000000000000000081526004810191909152600091610100900473ffffffffffffffffffffffffffffffffffffffff16906378ed5d1f9060240160206040518083038186803b1580156125dc57600080fd5b505afa1580156125f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126149190614140565b905080600660046101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ca6ef286040518163ffffffff1660e01b815260040160206040518083038186803b1580156126bf57600080fd5b505afa1580156126d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126f79190614140565b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055505b5050600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314612817576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f7200000000000000000000000000000000000000000000000000000000000000606482015260840161051e565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b15801561288757600080fd5b505af115801561289b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128bf919061431f565b50505050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461296c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f7200000000000000000000000000000000000000000000000000000000000000606482015260840161051e565b6006546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015264010000000090910473ffffffffffffffffffffffffffffffffffffffff169060009082906370a082319060240160206040518083038186803b1580156129e157600080fd5b505afa1580156129f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a19919061438c565b600354909150612a489073ffffffffffffffffffffffffffffffffffffffff8481169161010090041683613228565b6003546005546040517fe2bbb15800000000000000000000000000000000000000000000000000000000815260048101919091526024810183905261010090910473ffffffffffffffffffffffffffffffffffffffff169063e2bbb15890604401600060405180830381600087803b158015612ac357600080fd5b505af1158015612ad7573d6000803e3d6000fd5b505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314612b86576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f7200000000000000000000000000000000000000000000000000000000000000606482015260840161051e565b6000612ba760015473ffffffffffffffffffffffffffffffffffffffff1690565b6003546005546040517f5312ea8e0000000000000000000000000000000000000000000000000000000081526004810191909152919250610100900473ffffffffffffffffffffffffffffffffffffffff1690635312ea8e90602401600060405180830381600087803b158015612c1d57600080fd5b505af1158015612c31573d6000803e3d6000fd5b50506006546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152612c98935084925064010000000090910473ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401610f87565b6007546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152612cf491839173ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401611057565b50565b60015473ffffffffffffffffffffffffffffffffffffffff163314612d9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f7200000000000000000000000000000000000000000000000000000000000000606482015260840161051e565b6040517f6b8807180000000000000000000000000000000000000000000000000000000081523060048201819052907310bBA4e8A2f6F85B75cd75ef773f5Daca5596C8790636b8807189060240160206040518083038186803b158015612e0457600080fd5b505af4158015612e18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e3c9190614140565b73ffffffffffffffffffffffffffffffffffffffff1614612edf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a206368616e676520746865206f776e6572206661696c6560448201527f6400000000000000000000000000000000000000000000000000000000000000606482015260840161051e565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000612f606110cc565b15612fc7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4175746f6d6174653a2070617573656400000000000000000000000000000000604482015260640161051e565b6000612fe860015473ffffffffffffffffffffffffffffffffffffffff1690565b90503273ffffffffffffffffffffffffffffffffffffffff82161415613012576000915050613222565b600061301c610812565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527fe78c16c6d839536d3155985aab4e9c6013c8c3d446054bcebc48612f359d81f5600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906321f8a7219060240160206040518083038186803b1580156130a757600080fd5b505afa1580156130bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130df9190614140565b905073ffffffffffffffffffffffffffffffffffffffff8116613184576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f4175746f6d6174653a3a5f62696c6c3a2062616c616e636520636f6e7472616360448201527f74206e6f7420666f756e64000000000000000000000000000000000000000000606482015260840161051e565b8073ffffffffffffffffffffffffffffffffffffffff1663e578a22584886131aa611cec565b896040518563ffffffff1660e01b81526004016131ca9493929190614562565b602060405180830381600087803b1580156131e457600080fd5b505af11580156131f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061321c919061438c565b93505050505b92915050565b8015806132d757506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561329d57600080fd5b505afa1580156132b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132d5919061438c565b155b613363576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606482015260840161051e565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526110c79084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613d5b565b60608360018551613448919061474f565b81518110613458576134586147e1565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1684600081518110613489576134896147e1565b602002602001015173ffffffffffffffffffffffffffffffffffffffff161461357d576040517f38ed173900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8816906338ed17399061350690899089908990899089906004016145b0565b600060405180830381600087803b15801561352057600080fd5b505af1158015613534573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261357a9190810190614282565b90505b9695505050505050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526110c79084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016133b5565b835460011080156135f2575060008460010154115b61367e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f53746f704c6f73733a3a72756e3a2073746f70206c6f73732064697361626c6560448201527f6400000000000000000000000000000000000000000000000000000000000000606482015260840161051e565b61010082511115613711576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f53746f704c6f73733a3a72756e3a20746f6f206d616e7920696e20746f6b656e60448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161051e565b60005b82518160ff161015613966576000838260ff1681518110613737576137376147e1565b6020026020010151905085600001600081548110613757576137576147e1565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff828116911614156137895750613954565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b1580156137f157600080fd5b505afa158015613805573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613829919061438c565b905080613837575050613954565b604080516002808252606082018352600092602083019080368337019050509050828160008151811061386c5761386c6147e1565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050876000016000815481106138bc576138bc6147e1565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816001815181106138fa576138fa6147e1565b73ffffffffffffffffffffffffffffffffffffffff928316602091820292909201015261392a9084168884613228565b61394f73ffffffffffffffffffffffffffffffffffffffff881683600084308a613437565b505050505b8061395e81614792565b915050613714565b5060008460000160008154811061397f5761397f6147e1565b60009182526020822001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116925082906370a082319060240160206040518083038186803b1580156139f357600080fd5b505afa158015613a07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a2b919061438c565b86549091506000908790613a419060019061474f565b81548110613a5157613a516147e1565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff848116911614613c895760008211613b0c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f53746f704c6f73733a3a72756e3a20696e73756666696369656e742062616c6160448201527f6e6365206f66206261736520746f6b656e000000000000000000000000000000606482015260840161051e565b613b2d73ffffffffffffffffffffffffffffffffffffffff84168784613228565b6000613bc58389600201548a600001805480602002602001604051908101604052809291908181526020018280548015613b9d57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311613b72575b50505073ffffffffffffffffffffffffffffffffffffffff8d1694939291503090508a613437565b90508060018251613bd6919061474f565b81518110613be657613be66147e1565b602002602001015191508760010154821115613c83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f53746f704c6f73733a3a72756e3a20696e76616c6964206f757470757420616d60448201527f6f756e7400000000000000000000000000000000000000000000000000000000606482015260840161051e565b50613d1f565b8190508660010154811115613d1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f53746f704c6f73733a3a72756e3a20696e76616c6964206f757470757420616d60448201527f6f756e7400000000000000000000000000000000000000000000000000000000606482015260840161051e565b6040518181527ff22ed879bd57fced893edba2366c8143c0d7c2e585eafd2521c2832159d557f19060200160405180910390a150505050505050565b6000613dbd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16613e679092919063ffffffff16565b8051909150156110c75780806020019051810190613ddb919061431f565b6110c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161051e565b6060613e768484600085613e80565b90505b9392505050565b606082471015613f12576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161051e565b843b613f7a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161051e565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051613fa39190614546565b60006040518083038185875af1925050503d8060008114613fe0576040519150601f19603f3d011682016040523d82523d6000602084013e613fe5565b606091505b5091509150613ff5828286614000565b979650505050505050565b6060831561400f575081613e79565b82511561401f5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051e919061459d565b8280548282559060005260206000209081019282156140cd579160200282015b828111156140cd57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190614073565b506140d99291506140dd565b5090565b5b808211156140d957600081556001016140de565b803561ffff8116811461410457600080fd5b919050565b805169ffffffffffffffffffff8116811461410457600080fd5b60006020828403121561413557600080fd5b8135613e798161483f565b60006020828403121561415257600080fd5b8151613e798161483f565b60008060006060848603121561417257600080fd5b833561417d8161483f565b9250602084013561418d8161483f565b929592945050506040919091013590565b600080600080600060a086880312156141b657600080fd5b85356141c18161483f565b945060208601356141d18161483f565b9350604086013592506141e6606087016140f2565b91506141f4608087016140f2565b90509295509295909350565b6000806000806060858703121561421657600080fd5b843567ffffffffffffffff8082111561422e57600080fd5b818701915087601f83011261424257600080fd5b81358181111561425157600080fd5b8860208260051b850101111561426657600080fd5b6020928301999098509187013596604001359550909350505050565b6000602080838503121561429557600080fd5b825167ffffffffffffffff8111156142ac57600080fd5b8301601f810185136142bd57600080fd5b80516142d06142cb826146b3565b614664565b80828252848201915084840188868560051b87010111156142f057600080fd5b600094505b838510156143135780518352600194909401939185019185016142f5565b50979650505050505050565b60006020828403121561433157600080fd5b81518015158114613e7957600080fd5b60006020828403121561435357600080fd5b5035919050565b60006040828403121561436c57600080fd5b61437461463b565b82518152602083015160208201528091505092915050565b60006020828403121561439e57600080fd5b5051919050565b600080604083850312156143b857600080fd5b50508035926020909101359150565b6000806000606084860312156143dc57600080fd5b833592506020808501359250604085013567ffffffffffffffff8082111561440357600080fd5b908601906040828903121561441757600080fd5b61441f61463b565b82358281111561442e57600080fd5b83019150601f8201891361444157600080fd5b813561444f6142cb826146b3565b8082825286820191508685018c888560051b880101111561446f57600080fd5b600095505b8386101561449b5780356144878161483f565b835260019590950194918701918701614474565b508084525050508383013584820152809450505050509250925092565b600080600080600060a086880312156144d057600080fd5b6144d986614109565b94506020860151935060408601519250606086015191506141f460808701614109565b60008151808452614514816020860160208601614766565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251614558818460208701614766565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff8516815283602082015282604082015260806060820152600061357d60808301846144fc565b602081526000613e7960208301846144fc565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b8181101561460d57845173ffffffffffffffffffffffffffffffffffffffff16835293830193918301916001016145db565b505073ffffffffffffffffffffffffffffffffffffffff969096166060850152505050608001529392505050565b6040805190810167ffffffffffffffff8111828210171561465e5761465e614810565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156146ab576146ab614810565b604052919050565b600067ffffffffffffffff8211156146cd576146cd614810565b5060051b60200190565b60008261470d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561474a5761474a6147b2565b500290565b600082821015614761576147616147b2565b500390565b60005b83811015614781578181015183820152602001614769565b838111156128bf5750506000910152565b600060ff821660ff8114156147a9576147a96147b2565b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114612cf457600080fdfe50616e63616b65537761704d6173746572436865663253696e676c6552657374616b6550616e63616b65537761704d6173746572436865663253696e676c6553746f704c6f7373a164736f6c6343000806000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101985760003560e01c80638456cb59116100e3578063b838d9141161008c578063db2e21bc11610066578063db2e21bc1461037d578063f2fde38b14610385578063f7c618c11461039857600080fd5b8063b838d9141461034f578063beabacc814610362578063d0e30db01461037557600080fd5b80639327d80a116100bd5780639327d80a146103215780639742b5c314610334578063b0e21e8a1461034757600080fd5b80638456cb59146102e85780638c3d8faf146102f05780638da5cb5b1461030357600080fd5b80633f4ba83a11610145578063590e1ae31161011f578063590e1ae3146102a05780635c975abb146102a857806372f702f3146102c057600080fd5b80633f4ba83a146102505780634cf088d914610258578063527a15651461027d57600080fd5b806329dcb0cf1161017657806329dcb0cf14610213578063370158ea1461023a5780633e032a3b1461024257600080fd5b806313ead7c61461019d57806316f0115b146101b257806324702944146101ce575b600080fd5b6101b06101ab3660046143c7565b6103b8565b005b6101bb60055481565b6040519081526020015b60405180910390f35b6004546101ee9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101c5565b6006546102279062010000900461ffff1681565b60405161ffff90911681526020016101c5565b6101ee610812565b6006546102279061ffff1681565b6101b0610974565b6003546101ee90610100900473ffffffffffffffffffffffffffffffffffffffff1681565b600954600a5461028b919082565b604080519283526020830191909152016101c5565b6101b0610d06565b6102b06110cc565b60405190151581526020016101c5565b6006546101ee90640100000000900473ffffffffffffffffffffffffffffffffffffffff1681565b6101b0611251565b6101b06102fe366004614200565b6115fb565b60015473ffffffffffffffffffffffffffffffffffffffff166101ee565b6101b061032f3660046143a5565b611725565b6101b0610342366004614341565b611ab2565b6101bb611cec565b6101b061035d36600461419e565b6120f9565b6101b061037036600461415d565b612770565b6101b06128c5565b6101b0612adf565b6101b0610393366004614123565b612cf7565b6007546101ee9073ffffffffffffffffffffffffffffffffffffffff1681565b82604051806060016040528060238152602001614862602391396103dc8282612f56565b50600354600480546005546040517f1175a1dd0000000000000000000000000000000000000000000000000000000081529283015230602483015273ffffffffffffffffffffffffffffffffffffffff61010090930483169216906000908390631175a1dd9060440160206040518083038186803b15801561045d57600080fd5b505afa158015610471573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610495919061438c565b11610527576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4d6173746572436865663253696e676c6552657374616b653a3a72756e3a206e60448201527f6f206561726e656400000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6005546040517fe2bbb15800000000000000000000000000000000000000000000000000000000815260048101919091526000602482015273ffffffffffffffffffffffffffffffffffffffff83169063e2bbb15890604401600060405180830381600087803b15801561059a57600080fd5b505af11580156105ae573d6000803e3d6000fd5b50506007546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000935073ffffffffffffffffffffffffffffffffffffffff90911691506370a082319060240160206040518083038186803b15801561061e57600080fd5b505afa158015610632573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610656919061438c565b60075490915061067d9073ffffffffffffffffffffffffffffffffffffffff168383613228565b602086015186516106aa9173ffffffffffffffffffffffffffffffffffffffff851691849190308c613437565b506006546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015264010000000090910473ffffffffffffffffffffffffffffffffffffffff169060009082906370a082319060240160206040518083038186803b15801561072057600080fd5b505afa158015610734573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610758919061438c565b905061077b73ffffffffffffffffffffffffffffffffffffffff83168683613228565b6005546040517fe2bbb15800000000000000000000000000000000000000000000000000000000815260048101919091526024810182905273ffffffffffffffffffffffffffffffffffffffff86169063e2bbb15890604401600060405180830381600087803b1580156107ee57600080fd5b505af1158015610802573d6000803e3d6000fd5b5050505050505050505050505050565b6040517f6b880718000000000000000000000000000000000000000000000000000000008152306004820152600090819073__$0fb85c1a108326fe5c0d8f2f5a241bc0e7$__90636b8807189060240160206040518083038186803b15801561087a57600080fd5b505af415801561088e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b29190614140565b905073ffffffffffffffffffffffffffffffffffffffff81163014156108f057505060005473ffffffffffffffffffffffffffffffffffffffff1690565b8073ffffffffffffffffffffffffffffffffffffffff1663370158ea6040518163ffffffff1660e01b815260040160206040518083038186803b15801561093657600080fd5b505afa15801561094a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096e9190614140565b91505090565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482018190529073__$0fb85c1a108326fe5c0d8f2f5a241bc0e7$__90636b8807189060240160206040518083038186803b1580156109da57600080fd5b505af41580156109ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a129190614140565b73ffffffffffffffffffffffffffffffffffffffff161415610bc7576000610a38610812565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf175974395600482015273ffffffffffffffffffffffffffffffffffffffff91909116906321f8a7219060240160206040518083038186803b158015610abf57600080fd5b505afa158015610ad3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af79190614140565b60015490915073ffffffffffffffffffffffffffffffffffffffff16331480610b3557503373ffffffffffffffffffffffffffffffffffffffff8216145b610bc1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f6572000000000000000000000000000000000000000000000000000000000000606482015260840161051e565b50610c6e565b60015473ffffffffffffffffffffffffffffffffffffffff163314610c6e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f6572000000000000000000000000000000000000000000000000000000000000606482015260840161051e565b610c766110cc565b610cdc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4175746f6d6174653a206e6f7420706175736564000000000000000000000000604482015260640161051e565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055565b60015473ffffffffffffffffffffffffffffffffffffffff163314610dad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f7200000000000000000000000000000000000000000000000000000000000000606482015260840161051e565b60035473ffffffffffffffffffffffffffffffffffffffff610100909104166000610ded60015473ffffffffffffffffffffffffffffffffffffffff1690565b6005546040517f93f1a40b000000000000000000000000000000000000000000000000000000008152600481019190915230602482015290915060009073ffffffffffffffffffffffffffffffffffffffff8416906393f1a40b90604401604080518083038186803b158015610e6257600080fd5b505afa158015610e76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9a919061435a565b60055481516040517f441a3e700000000000000000000000000000000000000000000000000000000081526004810192909252602482015290915073ffffffffffffffffffffffffffffffffffffffff84169063441a3e7090604401600060405180830381600087803b158015610f1057600080fd5b505af1158015610f24573d6000803e3d6000fd5b50506006546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152610fff935085925064010000000090910473ffffffffffffffffffffffffffffffffffffffff16906370a08231906024015b60206040518083038186803b158015610f9f57600080fd5b505afa158015610fb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd7919061438c565b600654640100000000900473ffffffffffffffffffffffffffffffffffffffff169190613587565b6007546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526110c791849173ffffffffffffffffffffffffffffffffffffffff909116906370a08231906024015b60206040518083038186803b15801561106f57600080fd5b505afa158015611083573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a7919061438c565b60075473ffffffffffffffffffffffffffffffffffffffff169190613587565b505050565b6040517f6b880718000000000000000000000000000000000000000000000000000000008152306004820152600090819073__$0fb85c1a108326fe5c0d8f2f5a241bc0e7$__90636b8807189060240160206040518083038186803b15801561113457600080fd5b505af4158015611148573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116c9190614140565b905073ffffffffffffffffffffffffffffffffffffffff81163014156111af57505060015474010000000000000000000000000000000000000000900460ff1690565b60015474010000000000000000000000000000000000000000900460ff168061096e57508073ffffffffffffffffffffffffffffffffffffffff16635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561121957600080fd5b505afa15801561122d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096e919061431f565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482018190529073__$0fb85c1a108326fe5c0d8f2f5a241bc0e7$__90636b8807189060240160206040518083038186803b1580156112b757600080fd5b505af41580156112cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ef9190614140565b73ffffffffffffffffffffffffffffffffffffffff1614156114a4576000611315610812565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf175974395600482015273ffffffffffffffffffffffffffffffffffffffff91909116906321f8a7219060240160206040518083038186803b15801561139c57600080fd5b505afa1580156113b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d49190614140565b60015490915073ffffffffffffffffffffffffffffffffffffffff1633148061141257503373ffffffffffffffffffffffffffffffffffffffff8216145b61149e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f6572000000000000000000000000000000000000000000000000000000000000606482015260840161051e565b5061154b565b60015473ffffffffffffffffffffffffffffffffffffffff16331461154b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f6572000000000000000000000000000000000000000000000000000000000000606482015260840161051e565b6115536110cc565b156115ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4175746f6d6174653a2070617573656400000000000000000000000000000000604482015260640161051e565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055565b60015473ffffffffffffffffffffffffffffffffffffffff1633146116a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f7200000000000000000000000000000000000000000000000000000000000000606482015260840161051e565b60405180606001604052808585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505050908252506020808201859052604090910183905281518051600892611708928492910190614053565b506020820151600182015560409091015160029091015550505050565b81604051806060016040528060248152602001614885602491396117498282612f56565b506003546005546040517f93f1a40b0000000000000000000000000000000000000000000000000000000081526004810182905230602482015261010090920473ffffffffffffffffffffffffffffffffffffffff169163441a3e70919083906393f1a40b90604401604080518083038186803b1580156117c957600080fd5b505afa1580156117dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611801919061435a565b5160405160e084901b7fffffffff0000000000000000000000000000000000000000000000000000000016815260048101929092526024820152604401600060405180830381600087803b15801561185857600080fd5b505af115801561186c573d6000803e3d6000fd5b50600092506001915061187c9050565b6040519080825280602002602001820160405280156118a5578160200160208202803683370190505b509050600660049054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816000815181106118de576118de6147e1565b73ffffffffffffffffffffffffffffffffffffffff9283166020918202929092010152600454611913916008911683876135dd565b600061193460015473ffffffffffffffffffffffffffffffffffffffff1690565b6008805491925060009161194a9060019061474f565b8154811061195a5761195a6147e1565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9091169150611a2b90839083906370a082319060240160206040518083038186803b1580156119d557600080fd5b505afa1580156119e9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0d919061438c565b73ffffffffffffffffffffffffffffffffffffffff84169190613587565b60075473ffffffffffffffffffffffffffffffffffffffff828116911614611aa9576007546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152611aa991849173ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401611057565b50505050505050565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482015260009073__$0fb85c1a108326fe5c0d8f2f5a241bc0e7$__90636b8807189060240160206040518083038186803b158015611b1857600080fd5b505af4158015611b2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b509190614140565b90503373ffffffffffffffffffffffffffffffffffffffff82163014611bf3578173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bb657600080fd5b505afa158015611bca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bee9190614140565b611c0d565b60015473ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff1614611cb0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603d60248201527f4175746f6d6174653a3a6368616e676550726f746f636f6c4665653a2063616c60448201527f6c6572206973206e6f74207468652070726f746f636f6c206f776e6572000000606482015260840161051e565b60028290556040518281527f3c1d43943224e49d951ce8295a5c8332b517083b3f89bed50feae2cb39caebb59060200160405180910390a15050565b6040517f6b880718000000000000000000000000000000000000000000000000000000008152306004820152600090819073__$0fb85c1a108326fe5c0d8f2f5a241bc0e7$$0fb85c1a108326fe5c0d8f2f5a241bc0e7$__90636b8807189060240160206040518083038186803b158015612e0457600080fd5b505af4158015612e18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e3c9190614140565b73ffffffffffffffffffffffffffffffffffffffff1614612edf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a206368616e676520746865206f776e6572206661696c6560448201527f6400000000000000000000000000000000000000000000000000000000000000606482015260840161051e565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000612f606110cc565b15612fc7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4175746f6d6174653a2070617573656400000000000000000000000000000000604482015260640161051e565b6000612fe860015473ffffffffffffffffffffffffffffffffffffffff1690565b90503273ffffffffffffffffffffffffffffffffffffffff82161415613012576000915050613222565b600061301c610812565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527fe78c16c6d839536d3155985aab4e9c6013c8c3d446054bcebc48612f359d81f5600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906321f8a7219060240160206040518083038186803b1580156130a757600080fd5b505afa1580156130bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130df9190614140565b905073ffffffffffffffffffffffffffffffffffffffff8116613184576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f4175746f6d6174653a3a5f62696c6c3a2062616c616e636520636f6e7472616360448201527f74206e6f7420666f756e64000000000000000000000000000000000000000000606482015260840161051e565b8073ffffffffffffffffffffffffffffffffffffffff1663e578a22584886131aa611cec565b896040518563ffffffff1660e01b81526004016131ca9493929190614562565b602060405180830381600087803b1580156131e457600080fd5b505af11580156131f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061321c919061438c565b93505050505b92915050565b8015806132d757506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561329d57600080fd5b505afa1580156132b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132d5919061438c565b155b613363576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606482015260840161051e565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526110c79084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613d5b565b60608360018551613448919061474f565b81518110613458576134586147e1565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1684600081518110613489576134896147e1565b602002602001015173ffffffffffffffffffffffffffffffffffffffff161461357d576040517f38ed173900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8816906338ed17399061350690899089908990899089906004016145b0565b600060405180830381600087803b15801561352057600080fd5b505af1158015613534573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261357a9190810190614282565b90505b9695505050505050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526110c79084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016133b5565b835460011080156135f2575060008460010154115b61367e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f53746f704c6f73733a3a72756e3a2073746f70206c6f73732064697361626c6560448201527f6400000000000000000000000000000000000000000000000000000000000000606482015260840161051e565b61010082511115613711576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f53746f704c6f73733a3a72756e3a20746f6f206d616e7920696e20746f6b656e60448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161051e565b60005b82518160ff161015613966576000838260ff1681518110613737576137376147e1565b6020026020010151905085600001600081548110613757576137576147e1565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff828116911614156137895750613954565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b1580156137f157600080fd5b505afa158015613805573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613829919061438c565b905080613837575050613954565b604080516002808252606082018352600092602083019080368337019050509050828160008151811061386c5761386c6147e1565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050876000016000815481106138bc576138bc6147e1565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816001815181106138fa576138fa6147e1565b73ffffffffffffffffffffffffffffffffffffffff928316602091820292909201015261392a9084168884613228565b61394f73ffffffffffffffffffffffffffffffffffffffff881683600084308a613437565b505050505b8061395e81614792565b915050613714565b5060008460000160008154811061397f5761397f6147e1565b60009182526020822001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116925082906370a082319060240160206040518083038186803b1580156139f357600080fd5b505afa158015613a07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a2b919061438c565b86549091506000908790613a419060019061474f565b81548110613a5157613a516147e1565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff848116911614613c895760008211613b0c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f53746f704c6f73733a3a72756e3a20696e73756666696369656e742062616c6160448201527f6e6365206f66206261736520746f6b656e000000000000000000000000000000606482015260840161051e565b613b2d73ffffffffffffffffffffffffffffffffffffffff84168784613228565b6000613bc58389600201548a600001805480602002602001604051908101604052809291908181526020018280548015613b9d57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311613b72575b50505073ffffffffffffffffffffffffffffffffffffffff8d1694939291503090508a613437565b90508060018251613bd6919061474f565b81518110613be657613be66147e1565b602002602001015191508760010154821115613c83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f53746f704c6f73733a3a72756e3a20696e76616c6964206f757470757420616d60448201527f6f756e7400000000000000000000000000000000000000000000000000000000606482015260840161051e565b50613d1f565b8190508660010154811115613d1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f53746f704c6f73733a3a72756e3a20696e76616c6964206f757470757420616d60448201527f6f756e7400000000000000000000000000000000000000000000000000000000606482015260840161051e565b6040518181527ff22ed879bd57fced893edba2366c8143c0d7c2e585eafd2521c2832159d557f19060200160405180910390a150505050505050565b6000613dbd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16613e679092919063ffffffff16565b8051909150156110c75780806020019051810190613ddb919061431f565b6110c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161051e565b6060613e768484600085613e80565b90505b9392505050565b606082471015613f12576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161051e565b843b613f7a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161051e565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051613fa39190614546565b60006040518083038185875af1925050503d8060008114613fe0576040519150601f19603f3d011682016040523d82523d6000602084013e613fe5565b606091505b5091509150613ff5828286614000565b979650505050505050565b6060831561400f575081613e79565b82511561401f5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051e919061459d565b8280548282559060005260206000209081019282156140cd579160200282015b828111156140cd57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190614073565b506140d99291506140dd565b5090565b5b808211156140d957600081556001016140de565b803561ffff8116811461410457600080fd5b919050565b805169ffffffffffffffffffff8116811461410457600080fd5b60006020828403121561413557600080fd5b8135613e798161483f565b60006020828403121561415257600080fd5b8151613e798161483f565b60008060006060848603121561417257600080fd5b833561417d8161483f565b9250602084013561418d8161483f565b929592945050506040919091013590565b600080600080600060a086880312156141b657600080fd5b85356141c18161483f565b945060208601356141d18161483f565b9350604086013592506141e6606087016140f2565b91506141f4608087016140f2565b90509295509295909350565b6000806000806060858703121561421657600080fd5b843567ffffffffffffffff8082111561422e57600080fd5b818701915087601f83011261424257600080fd5b81358181111561425157600080fd5b8860208260051b850101111561426657600080fd5b6020928301999098509187013596604001359550909350505050565b6000602080838503121561429557600080fd5b825167ffffffffffffffff8111156142ac57600080fd5b8301601f810185136142bd57600080fd5b80516142d06142cb826146b3565b614664565b80828252848201915084840188868560051b87010111156142f057600080fd5b600094505b838510156143135780518352600194909401939185019185016142f5565b50979650505050505050565b60006020828403121561433157600080fd5b81518015158114613e7957600080fd5b60006020828403121561435357600080fd5b5035919050565b60006040828403121561436c57600080fd5b61437461463b565b82518152602083015160208201528091505092915050565b60006020828403121561439e57600080fd5b5051919050565b600080604083850312156143b857600080fd5b50508035926020909101359150565b6000806000606084860312156143dc57600080fd5b833592506020808501359250604085013567ffffffffffffffff8082111561440357600080fd5b908601906040828903121561441757600080fd5b61441f61463b565b82358281111561442e57600080fd5b83019150601f8201891361444157600080fd5b813561444f6142cb826146b3565b8082825286820191508685018c888560051b880101111561446f57600080fd5b600095505b8386101561449b5780356144878161483f565b835260019590950194918701918701614474565b508084525050508383013584820152809450505050509250925092565b600080600080600060a086880312156144d057600080fd5b6144d986614109565b94506020860151935060408601519250606086015191506141f460808701614109565b60008151808452614514816020860160208601614766565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251614558818460208701614766565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff8516815283602082015282604082015260806060820152600061357d60808301846144fc565b602081526000613e7960208301846144fc565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b8181101561460d57845173ffffffffffffffffffffffffffffffffffffffff16835293830193918301916001016145db565b505073ffffffffffffffffffffffffffffffffffffffff969096166060850152505050608001529392505050565b6040805190810167ffffffffffffffff8111828210171561465e5761465e614810565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156146ab576146ab614810565b604052919050565b600067ffffffffffffffff8211156146cd576146cd614810565b5060051b60200190565b60008261470d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561474a5761474a6147b2565b500290565b600082821015614761576147616147b2565b500390565b60005b83811015614781578181015183820152602001614769565b838111156128bf5750506000910152565b600060ff821660ff8114156147a9576147a96147b2565b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114612cf457600080fdfe50616e63616b65537761704d6173746572436865663253696e676c6552657374616b6550616e63616b65537761704d6173746572436865663253696e676c6553746f704c6f7373a164736f6c6343000806000a",
  "libraries": {
    "ERC1167": "0x10bBA4e8A2f6F85B75cd75ef773f5Daca5596C87"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "changeProtocolFee(int256)": {
        "params": {
          "__protocolFee": "New protocol fee."
        }
      },
      "protocolFee()": {
        "returns": {
          "_0": "Current protocol fee."
        }
      },
      "transfer(address,address,uint256)": {
        "params": {
          "amount": "Transferred amount of tokens.",
          "recipient": "Token recipient address.",
          "token": "The address of the token to be transferred."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeProtocolFee(int256)": {
        "notice": "Change protocol fee."
      },
      "info()": {
        "notice": "Returns address of Storage contract."
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "pause()": {
        "notice": "Pause contract."
      },
      "paused()": {
        "notice": "Returns true if the contract is paused, and false otherwise."
      },
      "transfer(address,address,uint256)": {
        "notice": "Transfer ERC20 token to recipient."
      },
      "unpause()": {
        "notice": "Unpause contract."
      }
    },
    "notice": "Use with simple token only.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3822,
        "contract": "contracts/MasterChef2SingleRestake.automate.sol:MasterChef2SingleRestake",
        "label": "_info",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3825,
        "contract": "contracts/MasterChef2SingleRestake.automate.sol:MasterChef2SingleRestake",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3828,
        "contract": "contracts/MasterChef2SingleRestake.automate.sol:MasterChef2SingleRestake",
        "label": "_paused",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 3831,
        "contract": "contracts/MasterChef2SingleRestake.automate.sol:MasterChef2SingleRestake",
        "label": "_protocolFee",
        "offset": 0,
        "slot": "2",
        "type": "t_int256"
      },
      {
        "astId": 3834,
        "contract": "contracts/MasterChef2SingleRestake.automate.sol:MasterChef2SingleRestake",
        "label": "_initialized",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 1605,
        "contract": "contracts/MasterChef2SingleRestake.automate.sol:MasterChef2SingleRestake",
        "label": "staking",
        "offset": 1,
        "slot": "3",
        "type": "t_contract(IMasterChef2)913"
      },
      {
        "astId": 1607,
        "contract": "contracts/MasterChef2SingleRestake.automate.sol:MasterChef2SingleRestake",
        "label": "liquidityRouter",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1609,
        "contract": "contracts/MasterChef2SingleRestake.automate.sol:MasterChef2SingleRestake",
        "label": "pool",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1611,
        "contract": "contracts/MasterChef2SingleRestake.automate.sol:MasterChef2SingleRestake",
        "label": "slippage",
        "offset": 0,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 1613,
        "contract": "contracts/MasterChef2SingleRestake.automate.sol:MasterChef2SingleRestake",
        "label": "deadline",
        "offset": 2,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 1616,
        "contract": "contracts/MasterChef2SingleRestake.automate.sol:MasterChef2SingleRestake",
        "label": "stakingToken",
        "offset": 4,
        "slot": "6",
        "type": "t_contract(IERC20)227"
      },
      {
        "astId": 1619,
        "contract": "contracts/MasterChef2SingleRestake.automate.sol:MasterChef2SingleRestake",
        "label": "rewardToken",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20)227"
      },
      {
        "astId": 1622,
        "contract": "contracts/MasterChef2SingleRestake.automate.sol:MasterChef2SingleRestake",
        "label": "stopLoss",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Order)5412_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)227": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMasterChef2)913": {
        "encoding": "inplace",
        "label": "contract IMasterChef2",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_struct(Order)5412_storage": {
        "encoding": "inplace",
        "label": "struct StopLoss.Order",
        "members": [
          {
            "astId": 5407,
            "contract": "contracts/MasterChef2SingleRestake.automate.sol:MasterChef2SingleRestake",
            "label": "path",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 5409,
            "contract": "contracts/MasterChef2SingleRestake.automate.sol:MasterChef2SingleRestake",
            "label": "amountOut",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5411,
            "contract": "contracts/MasterChef2SingleRestake.automate.sol:MasterChef2SingleRestake",
            "label": "amountOutMin",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
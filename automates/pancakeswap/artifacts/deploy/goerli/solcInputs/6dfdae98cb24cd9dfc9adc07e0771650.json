{
  "language": "Solidity",
  "sources": {
    "contracts/IMasterChef.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\ninterface IMasterChef {\n  struct UserInfo {\n    uint256 amount;\n    uint256 rewardDebt;\n  }\n\n  struct PoolInfo {\n    address lpToken;\n    uint256 allocPoint;\n    uint256 lastRewardBlock;\n    uint256 accCakePerShare;\n  }\n\n  function cake() external view returns (address);\n\n  function poolInfo(uint256 pool) external view returns (PoolInfo memory);\n\n  function userInfo(uint256 pool, address user) external view returns (UserInfo memory);\n\n  function pendingCake(uint256 pool, address user) external view returns (uint256);\n\n  function deposit(uint256 pool, uint256 amount) external;\n\n  function withdraw(uint256 pool, uint256 amount) external;\n\n  function emergencyWithdraw(uint256 pool) external;\n}\n"
    },
    "contracts/MasterChefSingleRestake.automate.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./utils/DFH/Automate.sol\";\nimport \"./utils/DFH/IStorage.sol\";\nimport \"./utils/Uniswap/IUniswapV2Router02.sol\";\nimport {ERC20Tools} from \"./utils/ERC20Tools.sol\";\nimport \"./IMasterChef.sol\";\n\n/**\n * @notice Use with simple token only.\n */\ncontract MasterChefSingleRestake is Automate {\n  using ERC20Tools for IERC20;\n\n  struct Swap {\n    address[] path;\n    uint256 outMin;\n  }\n\n  IMasterChef public staking;\n\n  address public liquidityRouter;\n\n  uint256 public pool;\n\n  uint16 public slippage;\n\n  uint16 public deadline;\n\n  IERC20 public stakingToken;\n\n  IERC20 public rewardToken;\n\n  // solhint-disable-next-line no-empty-blocks\n  constructor(address _info) Automate(_info) {}\n\n  function init(\n    address _staking,\n    address _liquidityRouter,\n    uint256 _pool,\n    uint16 _slippage,\n    uint16 _deadline\n  ) external initializer {\n    require(\n      !_initialized || address(staking) == _staking,\n      \"MasterChefSingleRestake::init: reinitialize staking address forbidden\"\n    );\n    staking = IMasterChef(_staking);\n    require(\n      !_initialized || liquidityRouter == _liquidityRouter,\n      \"MasterChefSingleRestake::init: reinitialize liquidity router address forbidden\"\n    );\n    liquidityRouter = _liquidityRouter;\n    require(!_initialized || pool == _pool, \"MasterChefSingleRestake::init: reinitialize pool index forbidden\");\n    pool = _pool;\n    slippage = _slippage;\n    deadline = _deadline;\n\n    if (!_initialized) {\n      IMasterChef.PoolInfo memory poolInfo = staking.poolInfo(pool);\n      stakingToken = IERC20(poolInfo.lpToken);\n      rewardToken = IERC20(staking.cake());\n    }\n  }\n\n  function deposit() external onlyOwner {\n    IERC20 _stakingToken = stakingToken; // gas optimisation\n    uint256 balance = _stakingToken.balanceOf(address(this));\n    _stakingToken.safeApprove(address(staking), balance);\n    staking.deposit(pool, balance);\n  }\n\n  function refund() external onlyOwner {\n    IMasterChef _staking = staking; // gas optimisation\n    address __owner = owner(); // gas optimisation\n    IMasterChef.UserInfo memory userInfo = _staking.userInfo(pool, address(this));\n    _staking.withdraw(pool, userInfo.amount);\n    stakingToken.transfer(__owner, stakingToken.balanceOf(address(this)));\n    rewardToken.transfer(__owner, rewardToken.balanceOf(address(this)));\n  }\n\n  function emergencyWithdraw() external onlyOwner {\n    address __owner = owner(); // gas optimisation\n    staking.emergencyWithdraw(pool);\n    stakingToken.transfer(__owner, stakingToken.balanceOf(address(this)));\n    rewardToken.transfer(__owner, rewardToken.balanceOf(address(this)));\n  }\n\n  function _swap(\n    address[] memory path,\n    uint256[2] memory amount,\n    uint256 _deadline\n  ) internal {\n    if (path[0] == path[path.length - 1]) return;\n\n    IUniswapV2Router02(liquidityRouter).swapExactTokensForTokens(amount[0], amount[1], path, address(this), _deadline);\n  }\n\n  function run(\n    uint256 gasFee,\n    uint256 _deadline,\n    Swap memory swap\n  ) external bill(gasFee, \"PancakeSwapMasterChefSingleRestake\") {\n    IMasterChef _staking = staking; // gas optimization\n    IERC20 _stakingToken = stakingToken;\n    require(_staking.pendingCake(pool, address(this)) > 0, \"MasterChefSingleRestake::run: no earned\");\n\n    _staking.deposit(pool, 0); // get all reward\n    uint256 rewardAmount = rewardToken.balanceOf(address(this));\n    rewardToken.safeApprove(liquidityRouter, rewardAmount);\n    _swap(swap.path, [rewardAmount, swap.outMin], _deadline);\n\n    uint256 stakingAmount = _stakingToken.balanceOf(address(this));\n    _stakingToken.safeApprove(address(_staking), stakingAmount);\n    _staking.deposit(pool, stakingAmount);\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/utils/DFH/Automate.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./proxy/ERC1167.sol\";\nimport \"./IStorage.sol\";\nimport \"./IBalance.sol\";\n\n// solhint-disable avoid-tx-origin\nabstract contract Automate {\n  using ERC1167 for address;\n\n  /// @notice Storage contract address.\n  address internal _info;\n\n  /// @notice Contract owner.\n  address internal _owner;\n\n  /// @notice Is contract paused.\n  bool internal _paused;\n\n  /// @notice Protocol fee in USD (-1 if value in global storage).\n  int256 internal _protocolFee;\n\n  /// @notice Is contract already initialized.\n  bool internal _initialized;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  event ProtocolFeeChanged(int256 protocolFee);\n\n  constructor(address __info) {\n    _info = __info;\n    _owner = tx.origin;\n    _protocolFee = -1;\n  }\n\n  /**\n   * @notice Returns address of Storage contract.\n   */\n  function info() public view returns (address) {\n    address impl = address(this).implementation();\n    if (impl == address(this)) return _info;\n\n    return Automate(impl).info();\n  }\n\n  /// @dev Modifier to protect an initializer function from being invoked twice.\n  modifier initializer() {\n    if (_owner == address(0)) {\n      _owner = tx.origin;\n      _protocolFee = -1;\n    } else {\n      require(_owner == msg.sender, \"Automate: caller is not the owner\");\n    }\n    _;\n    _initialized = true;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(_owner == msg.sender, \"Automate: caller is not the owner\");\n    _;\n  }\n\n  /**\n   * @notice Returns the address of the current owner.\n   */\n  function owner() public view returns (address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n   * Can only be called by the current owner.\n   */\n  function transferOwnership(address newOwner) external onlyOwner {\n    require(address(this).implementation() == address(this), \"Automate: change the owner failed\");\n\n    address oldOwner = _owner;\n    _owner = newOwner;\n    emit OwnershipTransferred(oldOwner, newOwner);\n  }\n\n  /**\n   * @dev Throws if called by any account other than the pauser.\n   */\n  modifier onlyPauser() {\n    if (address(this).implementation() == address(this)) {\n      address pauser = IStorage(info()).getAddress(keccak256(\"DFH:Pauser\"));\n      require(msg.sender == _owner || msg.sender == pauser, \"Automate: caller is not the pauser\");\n    } else {\n      require(msg.sender == _owner, \"Automate: caller is not the pauser\");\n    }\n    _;\n  }\n\n  /**\n   * @notice Returns true if the contract is paused, and false otherwise.\n   */\n  function paused() public view returns (bool) {\n    address impl = address(this).implementation();\n    if (impl == address(this)) return _paused;\n\n    return _paused || Automate(impl).paused();\n  }\n\n  /**\n   * @dev Throws if contract unpaused.\n   */\n  modifier whenPaused() {\n    require(paused(), \"Automate: not paused\");\n    _;\n  }\n\n  /**\n   * @dev Throws if contract paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused(), \"Automate: paused\");\n    _;\n  }\n\n  /**\n   * @notice Pause contract.\n   */\n  function pause() external onlyPauser whenNotPaused {\n    _paused = true;\n  }\n\n  /**\n   * @notice Unpause contract.\n   */\n  function unpause() external onlyPauser whenPaused {\n    _paused = false;\n  }\n\n  /**\n   * @return Current protocol fee.\n   */\n  function protocolFee() public view returns (uint256) {\n    address impl = address(this).implementation();\n    if (impl != address(this) && _protocolFee < 0) {\n      return Automate(impl).protocolFee();\n    }\n\n    IStorage __info = IStorage(info());\n    uint256 feeOnUSD = _protocolFee < 0 ? __info.getUint(keccak256(\"DFH:Fee:Automate\")) : uint256(_protocolFee);\n    if (feeOnUSD == 0) return 0;\n\n    (, int256 price, , , ) = AggregatorV3Interface(__info.getAddress(keccak256(\"DFH:Fee:PriceFeed\"))).latestRoundData();\n    require(price > 0, \"Automate: invalid price\");\n\n    return (feeOnUSD * 1e18) / uint256(price);\n  }\n\n  /**\n   * @notice Change protocol fee.\n   * @param __protocolFee New protocol fee.\n   */\n  function changeProtocolFee(int256 __protocolFee) external {\n    address impl = address(this).implementation();\n    require(\n      (impl == address(this) ? _owner : Automate(impl).owner()) == msg.sender,\n      \"Automate::changeProtocolFee: caller is not the protocol owner\"\n    );\n\n    _protocolFee = __protocolFee;\n    emit ProtocolFeeChanged(__protocolFee);\n  }\n\n  /**\n   * @dev Claim fees from owner.\n   * @param gasFee Claim gas fee.\n   * @param operation Claim description.\n   */\n  function _bill(uint256 gasFee, string memory operation) internal whenNotPaused returns (uint256) {\n    address account = owner(); // gas optimisation\n    if (tx.origin == account) return 0; // free if called by the owner\n\n    IStorage __info = IStorage(info());\n\n    address balance = __info.getAddress(keccak256(\"DFH:Contract:Balance\"));\n    require(balance != address(0), \"Automate::_bill: balance contract not found\");\n\n    return IBalance(balance).claim(account, gasFee, protocolFee(), operation);\n  }\n\n  /**\n   * @dev Claim fees from owner.\n   * @param gasFee Claim gas fee.\n   * @param operation Claim description.\n   */\n  modifier bill(uint256 gasFee, string memory operation) {\n    _bill(gasFee, operation);\n    _;\n  }\n\n  /**\n   * @notice Transfer ERC20 token to recipient.\n   * @param token The address of the token to be transferred.\n   * @param recipient Token recipient address.\n   * @param amount Transferred amount of tokens.\n   */\n  function transfer(\n    address token,\n    address recipient,\n    uint256 amount\n  ) external onlyOwner {\n    IERC20(token).transfer(recipient, amount);\n  }\n}\n"
    },
    "contracts/utils/DFH/IStorage.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\ninterface IStorage {\n  function getBytes(bytes32 key) external view returns (bytes memory);\n\n  function getBool(bytes32 key) external view returns (bool);\n\n  function getUint(bytes32 key) external view returns (uint256);\n\n  function getInt(bytes32 key) external view returns (int256);\n\n  function getAddress(bytes32 key) external view returns (address);\n\n  function getString(bytes32 key) external view returns (string memory);\n}\n"
    },
    "contracts/utils/Uniswap/IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\n// solhint-disable func-name-mixedcase\ninterface IUniswapV2Router02 {\n  function factory() external view returns (address);\n\n  function WETH() external view returns (address);\n\n  function addLiquidity(\n    address tokenA,\n    address tokenB,\n    uint256 amountADesired,\n    uint256 amountBDesired,\n    uint256 amountAMin,\n    uint256 amountBMin,\n    address to,\n    uint256 deadline\n  )\n    external\n    returns (\n      uint256 amountA,\n      uint256 amountB,\n      uint256 liquidity\n    );\n\n  function addLiquidityETH(\n    address token,\n    uint256 amountTokenDesired,\n    uint256 amountTokenMin,\n    uint256 amountETHMin,\n    address to,\n    uint256 deadline\n  )\n    external\n    payable\n    returns (\n      uint256 amountToken,\n      uint256 amountETH,\n      uint256 liquidity\n    );\n\n  function removeLiquidity(\n    address tokenA,\n    address tokenB,\n    uint256 liquidity,\n    uint256 amountAMin,\n    uint256 amountBMin,\n    address to,\n    uint256 deadline\n  ) external returns (uint256 amountA, uint256 amountB);\n\n  function removeLiquidityETH(\n    address token,\n    uint256 liquidity,\n    uint256 amountTokenMin,\n    uint256 amountETHMin,\n    address to,\n    uint256 deadline\n  ) external returns (uint256 amountToken, uint256 amountETH);\n\n  function removeLiquidityWithPermit(\n    address tokenA,\n    address tokenB,\n    uint256 liquidity,\n    uint256 amountAMin,\n    uint256 amountBMin,\n    address to,\n    uint256 deadline,\n    bool approveMax,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external returns (uint256 amountA, uint256 amountB);\n\n  function removeLiquidityETHWithPermit(\n    address token,\n    uint256 liquidity,\n    uint256 amountTokenMin,\n    uint256 amountETHMin,\n    address to,\n    uint256 deadline,\n    bool approveMax,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external returns (uint256 amountToken, uint256 amountETH);\n\n  function swapExactTokensForTokens(\n    uint256 amountIn,\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external returns (uint256[] memory amounts);\n\n  function swapTokensForExactTokens(\n    uint256 amountOut,\n    uint256 amountInMax,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external returns (uint256[] memory amounts);\n\n  function swapExactETHForTokens(\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external payable returns (uint256[] memory amounts);\n\n  function swapTokensForExactETH(\n    uint256 amountOut,\n    uint256 amountInMax,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external returns (uint256[] memory amounts);\n\n  function swapExactTokensForETH(\n    uint256 amountIn,\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external returns (uint256[] memory amounts);\n\n  function swapETHForExactTokens(\n    uint256 amountOut,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external payable returns (uint256[] memory amounts);\n\n  function quote(\n    uint256 amountA,\n    uint256 reserveA,\n    uint256 reserveB\n  ) external pure returns (uint256 amountB);\n\n  function getAmountOut(\n    uint256 amountIn,\n    uint256 reserveIn,\n    uint256 reserveOut\n  ) external pure returns (uint256 amountOut);\n\n  function getAmountIn(\n    uint256 amountOut,\n    uint256 reserveIn,\n    uint256 reserveOut\n  ) external pure returns (uint256 amountIn);\n\n  function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n  function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\n    address token,\n    uint256 liquidity,\n    uint256 amountTokenMin,\n    uint256 amountETHMin,\n    address to,\n    uint256 deadline\n  ) external returns (uint256 amountETH);\n\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n    address token,\n    uint256 liquidity,\n    uint256 amountTokenMin,\n    uint256 amountETHMin,\n    address to,\n    uint256 deadline,\n    bool approveMax,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external returns (uint256 amountETH);\n\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n    uint256 amountIn,\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external;\n\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external payable;\n\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\n    uint256 amountIn,\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external;\n}\n"
    },
    "contracts/utils/ERC20Tools.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nlibrary ERC20Tools {\n  function safeApprove(\n    IERC20 token,\n    address spender,\n    uint256 value\n  ) internal {\n    uint256 allowance = token.allowance(address(this), spender);\n    if (allowance != 0 && allowance < value) {\n      token.approve(spender, 0);\n    }\n    if (allowance != value) {\n      token.approve(spender, value);\n    }\n  }\n\n  function safeApproveAll(IERC20 token, address spender) internal {\n    safeApprove(token, spender, 2**256 - 1);\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n\n  function decimals()\n    external\n    view\n    returns (\n      uint8\n    );\n\n  function description()\n    external\n    view\n    returns (\n      string memory\n    );\n\n  function version()\n    external\n    view\n    returns (\n      uint256\n    );\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(\n    uint80 _roundId\n  )\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n}\n"
    },
    "contracts/utils/DFH/proxy/ERC1167.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\n// solhint-disable no-inline-assembly\nlibrary ERC1167 {\n  bytes public constant CLONE =\n    hex\"363d3d373d3d3d363d73bebebebebebebebebebebebebebebebebebebebe5af43d82803e903d91602b57fd5bf3\";\n\n  /**\n   * @notice Make new proxy contract.\n   * @param impl Address prototype contract.\n   * @return proxy Address new proxy contract.\n   */\n  function clone(address impl) external returns (address proxy) {\n    assembly {\n      let ptr := mload(0x40)\n      mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n      mstore(add(ptr, 0x14), shl(0x60, impl))\n      mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n      proxy := create(0, ptr, 0x37)\n    }\n    require(proxy != address(0), \"ERC1167: create failed\");\n  }\n\n  /**\n   * @notice Returns address of prototype contract for proxy.\n   * @param proxy Address proxy contract.\n   * @return impl Address prototype contract (current contract address if not proxy).\n   */\n  function implementation(address proxy) external view returns (address impl) {\n    uint256 size;\n    assembly {\n      size := extcodesize(proxy)\n    }\n\n    impl = proxy;\n    if (size <= 45 && size >= 41) {\n      bool matches = true;\n      uint256 i;\n\n      bytes memory code;\n      assembly {\n        code := mload(0x40)\n        mstore(0x40, add(code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n        mstore(code, size)\n        extcodecopy(proxy, add(code, 0x20), 0, size)\n      }\n      for (i = 0; matches && i < 9; i++) {\n        matches = code[i] == CLONE[i];\n      }\n      for (i = 0; matches && i < 15; i++) {\n        if (i == 4) {\n          matches = code[code.length - i - 1] == bytes1(uint8(CLONE[45 - i - 1]) - uint8(45 - size));\n        } else {\n          matches = code[code.length - i - 1] == CLONE[45 - i - 1];\n        }\n      }\n      if (code[9] != bytes1(0x73 - uint8(45 - size))) {\n        matches = false;\n      }\n      uint256 forwardedToBuffer;\n      if (matches) {\n        assembly {\n          forwardedToBuffer := mload(add(code, 30))\n        }\n        forwardedToBuffer &= (0x1 << (20 * 8)) - 1;\n        impl = address(uint160(forwardedToBuffer >> ((45 - size) * 8)));\n      }\n    }\n  }\n}\n"
    },
    "contracts/utils/DFH/IBalance.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\ninterface IBalance {\n  function claim(\n    address account,\n    uint256 gasFee,\n    uint256 protocolFee,\n    string memory description\n  ) external returns (uint256);\n}\n"
    },
    "contracts/SmartChefInitializableRestake.automate.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./utils/DFH/Automate.sol\";\nimport \"./utils/DFH/IStorage.sol\";\nimport \"./utils/Uniswap/IUniswapV2Router02.sol\";\nimport {ERC20Tools} from \"./utils/ERC20Tools.sol\";\nimport \"./ISmartChefInitializable.sol\";\n\n/**\n * @notice Use with simple token only.\n */\ncontract SmartChefInitializableRestake is Automate {\n  using ERC20Tools for IERC20;\n\n  struct Swap {\n    address[] path;\n    uint256 outMin;\n  }\n\n  ISmartChefInitializable public staking;\n\n  address public liquidityRouter;\n\n  uint16 public slippage;\n\n  uint16 public deadline;\n\n  IERC20 public stakingToken;\n\n  IERC20 public rewardToken;\n\n  // solhint-disable-next-line no-empty-blocks\n  constructor(address _info) Automate(_info) {}\n\n  function init(\n    address _staking,\n    address _liquidityRouter,\n    uint16 _slippage,\n    uint16 _deadline\n  ) external initializer {\n    require(\n      !_initialized || address(staking) == _staking,\n      \"SmartChefInitializableRestake::init: reinitialize staking address forbidden\"\n    );\n    staking = ISmartChefInitializable(_staking);\n    require(\n      !_initialized || liquidityRouter == _liquidityRouter,\n      \"SmartChefInitializableRestake::init: reinitialize liquidity router address forbidden\"\n    );\n    liquidityRouter = _liquidityRouter;\n    slippage = _slippage;\n    deadline = _deadline;\n\n    if (!_initialized) {\n      stakingToken = IERC20(staking.stakedToken());\n      rewardToken = IERC20(staking.rewardToken());\n    }\n  }\n\n  function deposit() external onlyOwner {\n    IERC20 _stakingToken = stakingToken; // gas optimisation\n    uint256 balance = _stakingToken.balanceOf(address(this));\n    _stakingToken.safeApprove(address(staking), balance);\n    staking.deposit(balance);\n  }\n\n  function refund() external onlyOwner {\n    ISmartChefInitializable _staking = staking; // gas optimisation\n    address __owner = owner(); // gas optimisation\n    ISmartChefInitializable.UserInfo memory userInfo = _staking.userInfo(address(this));\n    _staking.withdraw(userInfo.amount);\n    stakingToken.transfer(__owner, stakingToken.balanceOf(address(this)));\n    rewardToken.transfer(__owner, rewardToken.balanceOf(address(this)));\n  }\n\n  function emergencyWithdraw() external onlyOwner {\n    address __owner = owner(); // gas optimisation\n    staking.emergencyWithdraw();\n    stakingToken.transfer(__owner, stakingToken.balanceOf(address(this)));\n    rewardToken.transfer(__owner, rewardToken.balanceOf(address(this)));\n  }\n\n  function _swap(\n    address[] memory path,\n    uint256[2] memory amount,\n    uint256 _deadline\n  ) internal {\n    if (path[0] == path[path.length - 1]) return;\n\n    IUniswapV2Router02(liquidityRouter).swapExactTokensForTokens(amount[0], amount[1], path, address(this), _deadline);\n  }\n\n  function run(\n    uint256 gasFee,\n    uint256 _deadline,\n    Swap memory swap\n  ) external bill(gasFee, \"PancakeSwapSmartChefInitializable\") {\n    ISmartChefInitializable _staking = staking; // gas optimization\n    IERC20 _stakingToken = stakingToken;\n    require(_staking.pendingReward(address(this)) > 0, \"SmartChefInitializableRestake::run: no earned\");\n\n    _staking.deposit(0); // get all reward\n    uint256 rewardAmount = rewardToken.balanceOf(address(this));\n    rewardToken.safeApprove(liquidityRouter, rewardAmount);\n    _swap(swap.path, [rewardAmount, swap.outMin], _deadline);\n\n    uint256 stakingAmount = _stakingToken.balanceOf(address(this));\n    _stakingToken.safeApprove(address(_staking), stakingAmount);\n    _staking.deposit(stakingAmount);\n  }\n}\n"
    },
    "contracts/ISmartChefInitializable.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\ninterface ISmartChefInitializable {\n  struct UserInfo {\n    uint256 amount;\n    uint256 rewardDebt;\n  }\n\n  function rewardToken() external view returns (address);\n\n  function stakedToken() external view returns (address);\n\n  function userInfo(address user) external view returns (UserInfo memory);\n\n  function pendingReward(address user) external view returns (uint256);\n\n  function deposit(uint256 amount) external;\n\n  function withdraw(uint256 amount) external;\n\n  function emergencyWithdraw() external;\n}\n"
    },
    "contracts/MasterChefLpRestake.automate.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./utils/DFH/Automate.sol\";\nimport \"./utils/DFH/IStorage.sol\";\nimport \"./utils/Uniswap/IUniswapV2Router02.sol\";\nimport \"./utils/Uniswap/IUniswapV2Pair.sol\";\nimport {ERC20Tools} from \"./utils/ERC20Tools.sol\";\nimport \"./IMasterChef.sol\";\n\n/**\n * @notice Use with LP token only.\n */\ncontract MasterChefLpRestake is Automate {\n  using ERC20Tools for IERC20;\n\n  struct Swap {\n    address[] path;\n    uint256 outMin;\n  }\n\n  IMasterChef public staking;\n\n  address public liquidityRouter;\n\n  uint256 public pool;\n\n  uint16 public slippage;\n\n  uint16 public deadline;\n\n  IERC20 public stakingToken;\n\n  IERC20 public rewardToken;\n\n  // solhint-disable-next-line no-empty-blocks\n  constructor(address _info) Automate(_info) {}\n\n  function init(\n    address _staking,\n    address _liquidityRouter,\n    uint256 _pool,\n    uint16 _slippage,\n    uint16 _deadline\n  ) external initializer {\n    require(\n      !_initialized || address(staking) == _staking,\n      \"MasterChefLpRestake::init: reinitialize staking address forbidden\"\n    );\n    staking = IMasterChef(_staking);\n    require(\n      !_initialized || liquidityRouter == _liquidityRouter,\n      \"MasterChefLpRestake::init: reinitialize liquidity router address forbidden\"\n    );\n    liquidityRouter = _liquidityRouter;\n    require(!_initialized || pool == _pool, \"MasterChefLpRestake::init: reinitialize pool index forbidden\");\n    pool = _pool;\n    slippage = _slippage;\n    deadline = _deadline;\n\n    if (!_initialized) {\n      IMasterChef.PoolInfo memory poolInfo = staking.poolInfo(pool);\n      stakingToken = IERC20(poolInfo.lpToken);\n      rewardToken = IERC20(staking.cake());\n    }\n  }\n\n  function deposit() external onlyOwner {\n    IERC20 _stakingToken = stakingToken; // gas optimisation\n    uint256 balance = _stakingToken.balanceOf(address(this));\n    _stakingToken.safeApprove(address(staking), balance);\n    staking.deposit(pool, balance);\n  }\n\n  function refund() external onlyOwner {\n    IMasterChef _staking = staking; // gas optimisation\n    address __owner = owner(); // gas optimisation\n    IMasterChef.UserInfo memory userInfo = _staking.userInfo(pool, address(this));\n    _staking.withdraw(pool, userInfo.amount);\n    stakingToken.transfer(__owner, stakingToken.balanceOf(address(this)));\n    rewardToken.transfer(__owner, rewardToken.balanceOf(address(this)));\n  }\n\n  function emergencyWithdraw() external onlyOwner {\n    address __owner = owner(); // gas optimisation\n    staking.emergencyWithdraw(pool);\n    stakingToken.transfer(__owner, stakingToken.balanceOf(address(this)));\n    rewardToken.transfer(__owner, rewardToken.balanceOf(address(this)));\n  }\n\n  function _swap(\n    address[] memory path,\n    uint256[2] memory amount,\n    uint256 _deadline\n  ) internal {\n    if (path[0] == path[path.length - 1]) return;\n\n    IUniswapV2Router02(liquidityRouter).swapExactTokensForTokens(amount[0], amount[1], path, address(this), _deadline);\n  }\n\n  function _addLiquidity(\n    address token0,\n    address token1,\n    uint256 _deadline\n  ) internal {\n    address _liquidityRouter = liquidityRouter; // gas optimisation\n    uint256 amountIn0 = IERC20(token0).balanceOf(address(this));\n    uint256 amountIn1 = IERC20(token1).balanceOf(address(this));\n    IERC20(token0).safeApprove(_liquidityRouter, amountIn0);\n    IERC20(token1).safeApprove(_liquidityRouter, amountIn1);\n    IUniswapV2Router02(_liquidityRouter).addLiquidity(\n      token0,\n      token1,\n      amountIn0,\n      amountIn1,\n      0,\n      0,\n      address(this),\n      _deadline\n    );\n  }\n\n  function run(\n    uint256 gasFee,\n    uint256 _deadline,\n    Swap memory swap0,\n    Swap memory swap1\n  ) external bill(gasFee, \"PancakeSwapMasterChefLpRestake\") {\n    IMasterChef _staking = staking; // gas optimization\n    require(_staking.pendingCake(pool, address(this)) > 0, \"MasterChefLpRestake::run: no earned\");\n\n    _staking.deposit(pool, 0); // get all reward\n    uint256 rewardAmount = rewardToken.balanceOf(address(this));\n    rewardToken.safeApprove(liquidityRouter, rewardAmount);\n    _swap(swap0.path, [rewardAmount / 2, swap0.outMin], _deadline);\n    _swap(swap1.path, [rewardAmount - rewardAmount / 2, swap1.outMin], _deadline);\n\n    IUniswapV2Pair _stakingToken = IUniswapV2Pair(address(stakingToken));\n    _addLiquidity(_stakingToken.token0(), _stakingToken.token1(), _deadline);\n    uint256 stakingAmount = _stakingToken.balanceOf(address(this));\n    stakingToken.safeApprove(address(_staking), stakingAmount);\n    _staking.deposit(pool, stakingAmount);\n  }\n}\n"
    },
    "contracts/utils/Uniswap/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n// solhint-disable func-name-mixedcase\ninterface IUniswapV2Pair is IERC20 {\n  function nonces(address owner) external view returns (uint256);\n\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n  function token0() external view returns (address);\n\n  function token1() external view returns (address);\n\n  function getReserves()\n    external\n    view\n    returns (\n      uint112 reserve0,\n      uint112 reserve1,\n      uint32 blockTimestampLast\n    );\n\n  function price0CumulativeLast() external view returns (uint256);\n\n  function price1CumulativeLast() external view returns (uint256);\n\n  function kLast() external view returns (uint256);\n\n  function mint(address to) external returns (uint256 liquidity);\n\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n  function swap(\n    uint256 amount0Out,\n    uint256 amount1Out,\n    address to,\n    bytes calldata data\n  ) external;\n}\n"
    },
    "contracts/utils/Uniswap/SafeUniswapV2Router.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./IUniswapV2Router02.sol\";\nimport \"./IUniswapV2Pair.sol\";\n\nlibrary SafeUniswapV2Router {\n  using SafeERC20 for IERC20;\n\n  function safeSwapExactTokensForTokens(\n    IUniswapV2Router02 router,\n    uint256 amountIn,\n    uint256 amountOutMin,\n    address[] memory path,\n    address to,\n    uint256 deadline\n  ) internal returns (uint256[] memory amounts) {\n    if (path[0] != path[path.length - 1])\n      amounts = router.swapExactTokensForTokens(amountIn, amountOutMin, path, to, deadline);\n  }\n\n  function addAllLiquidity(\n    IUniswapV2Router02 router,\n    address tokenA,\n    address tokenB,\n    address to,\n    uint256 deadline\n  )\n    internal\n    returns (\n      uint256,\n      uint256,\n      uint256\n    )\n  {\n    uint256 amountA = IERC20(tokenA).balanceOf(address(this));\n    uint256 amountB = IERC20(tokenB).balanceOf(address(this));\n    IERC20(tokenA).safeApprove(address(router), amountA);\n    IERC20(tokenB).safeApprove(address(router), amountB);\n    return router.addLiquidity(tokenA, tokenB, amountA, amountB, 0, 0, to, deadline);\n  }\n\n  function removeAllLiquidity(\n    IUniswapV2Router02 router,\n    address pair,\n    address to,\n    uint256 deadline\n  )\n    internal\n    returns (\n      address tokenA,\n      address tokenB,\n      uint256 amountA,\n      uint256 amountB\n    )\n  {\n    tokenA = IUniswapV2Pair(pair).token0();\n    tokenB = IUniswapV2Pair(pair).token1();\n    uint256 balance = IERC20(pair).balanceOf(address(this));\n    IERC20(pair).safeApprove(address(router), balance);\n    (amountA, amountB) = router.removeLiquidity(tokenA, tokenB, balance, 0, 0, to, deadline);\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/MasterChef2SingleRestake.automate.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./utils/DFH/Automate.sol\";\nimport \"./utils/DFH/IStorage.sol\";\nimport \"./utils/Uniswap/IUniswapV2Router02.sol\";\nimport \"./utils/Uniswap/SafeUniswapV2Router.sol\";\nimport \"./utils/Uniswap/StopLoss.sol\";\nimport \"./IMasterChef2.sol\";\n\n/**\n * @notice Use with simple token only.\n */\ncontract MasterChef2SingleRestake is Automate {\n  using SafeERC20 for IERC20;\n  using SafeUniswapV2Router for IUniswapV2Router02;\n  using StopLoss for StopLoss.Order;\n\n  struct Swap {\n    address[] path;\n    uint256 outMin;\n  }\n\n  IMasterChef2 public staking;\n\n  address public liquidityRouter;\n\n  uint256 public pool;\n\n  uint16 public slippage;\n\n  uint16 public deadline;\n\n  IERC20 public stakingToken;\n\n  IERC20 public rewardToken;\n\n  StopLoss.Order public stopLoss;\n\n  // solhint-disable-next-line no-empty-blocks\n  constructor(address _info) Automate(_info) {}\n\n  function init(\n    address _staking,\n    address _liquidityRouter,\n    uint256 _pool,\n    uint16 _slippage,\n    uint16 _deadline\n  ) external initializer {\n    require(\n      !_initialized || address(staking) == _staking,\n      \"MasterChef2SingleRestake::init: reinitialize staking address forbidden\"\n    );\n    staking = IMasterChef2(_staking);\n    require(\n      !_initialized || liquidityRouter == _liquidityRouter,\n      \"MasterChef2SingleRestake::init: reinitialize liquidity router address forbidden\"\n    );\n    liquidityRouter = _liquidityRouter;\n    require(!_initialized || pool == _pool, \"MasterChef2SingleRestake::init: reinitialize pool index forbidden\");\n    pool = _pool;\n    slippage = _slippage;\n    deadline = _deadline;\n\n    if (!_initialized) {\n      address lpToken = staking.lpToken(pool);\n      stakingToken = IERC20(lpToken);\n      rewardToken = IERC20(staking.CAKE());\n    }\n  }\n\n  function deposit() external onlyOwner {\n    IERC20 _stakingToken = stakingToken; // gas optimisation\n    uint256 balance = _stakingToken.balanceOf(address(this));\n    _stakingToken.safeApprove(address(staking), balance);\n    staking.deposit(pool, balance);\n  }\n\n  function refund() external onlyOwner {\n    IMasterChef2 _staking = staking; // gas optimisation\n    address __owner = owner(); // gas optimisation\n    IMasterChef2.UserInfo memory userInfo = _staking.userInfo(pool, address(this));\n    _staking.withdraw(pool, userInfo.amount);\n    stakingToken.safeTransfer(__owner, stakingToken.balanceOf(address(this)));\n    rewardToken.safeTransfer(__owner, rewardToken.balanceOf(address(this)));\n  }\n\n  function emergencyWithdraw() external onlyOwner {\n    address __owner = owner(); // gas optimisation\n    staking.emergencyWithdraw(pool);\n    stakingToken.safeTransfer(__owner, stakingToken.balanceOf(address(this)));\n    rewardToken.safeTransfer(__owner, rewardToken.balanceOf(address(this)));\n  }\n\n  function run(\n    uint256 gasFee,\n    uint256 _deadline,\n    Swap memory swap\n  ) external bill(gasFee, \"PancakeSwapMasterChef2SingleRestake\") {\n    IMasterChef2 _staking = staking; // gas optimization\n    IUniswapV2Router02 _liquidityRouter = IUniswapV2Router02(liquidityRouter);\n    require(_staking.pendingCake(pool, address(this)) > 0, \"MasterChef2SingleRestake::run: no earned\");\n\n    _staking.deposit(pool, 0); // get all reward\n    uint256 rewardAmount = rewardToken.balanceOf(address(this));\n    rewardToken.safeApprove(address(_liquidityRouter), rewardAmount);\n    _liquidityRouter.safeSwapExactTokensForTokens(rewardAmount, swap.outMin, swap.path, address(this), _deadline);\n\n    IERC20 _stakingToken = stakingToken;\n    uint256 stakingAmount = _stakingToken.balanceOf(address(this));\n    _stakingToken.safeApprove(address(_staking), stakingAmount);\n    _staking.deposit(pool, stakingAmount);\n  }\n\n  function setStopLoss(\n    address[] calldata path,\n    uint256 amountOut,\n    uint256 amountOutMin\n  ) external onlyOwner {\n    stopLoss = StopLoss.Order(path, amountOut, amountOutMin);\n  }\n\n  function runStopLoss(uint256 gasFee, uint256 _deadline)\n    external\n    bill(gasFee, \"PancakeSwapMasterChef2SingleStopLoss\")\n  {\n    staking.withdraw(pool, staking.userInfo(pool, address(this)).amount);\n    address[] memory inTokens = new address[](1);\n    inTokens[0] = address(stakingToken);\n\n    stopLoss.run(liquidityRouter, inTokens, _deadline);\n    address __owner = owner();\n    IERC20 exitToken = IERC20(stopLoss.path[stopLoss.path.length - 1]);\n    exitToken.safeTransfer(__owner, exitToken.balanceOf(address(this)));\n    if (rewardToken != exitToken) {\n      rewardToken.safeTransfer(__owner, rewardToken.balanceOf(address(this)));\n    }\n  }\n}\n"
    },
    "contracts/utils/Uniswap/StopLoss.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./SafeUniswapV2Router.sol\";\nimport \"./IUniswapV2Router02.sol\";\n\nlibrary StopLoss {\n  using SafeERC20 for IERC20;\n  using SafeUniswapV2Router for IUniswapV2Router02;\n\n  struct Order {\n    address[] path;\n    uint256 amountOut;\n    uint256 amountOutMin;\n  }\n\n  event StopLossOrderCompleted(uint256 amountOut);\n\n  function run(\n    Order storage order,\n    address liquidityRouter,\n    address[] memory inTokens,\n    uint256 _deadline\n  ) internal {\n    require(order.path.length > 1 && order.amountOut > 0, \"StopLoss::run: stop loss disabled\");\n    require(inTokens.length <= 256, \"StopLoss::run: too many in tokens\");\n    for (uint8 i = 0; i < inTokens.length; i++) {\n      address token = inTokens[i];\n      if (token == order.path[0]) continue;\n      uint256 balance = IERC20(token).balanceOf(address(this));\n      if (balance == 0) continue;\n      address[] memory path = new address[](2);\n      path[0] = token;\n      path[1] = order.path[0];\n      IERC20(token).safeApprove(liquidityRouter, balance);\n      IUniswapV2Router02(liquidityRouter).safeSwapExactTokensForTokens(balance, 0, path, address(this), _deadline);\n    }\n\n    address baseToken = order.path[0];\n    uint256 baseBalance = IERC20(baseToken).balanceOf(address(this));\n    uint256 amountOut;\n    if (baseToken != order.path[order.path.length - 1]) {\n      require(baseBalance > 0, \"StopLoss::run: insufficient balance of base token\");\n      IERC20(baseToken).safeApprove(liquidityRouter, baseBalance);\n      uint256[] memory amountsOut = IUniswapV2Router02(liquidityRouter).safeSwapExactTokensForTokens(\n        baseBalance,\n        order.amountOutMin,\n        order.path,\n        address(this),\n        _deadline\n      );\n      amountOut = amountsOut[amountsOut.length - 1];\n      require(amountOut <= order.amountOut, \"StopLoss::run: invalid output amount\");\n    } else {\n      amountOut = baseBalance;\n      require(amountOut <= order.amountOut, \"StopLoss::run: invalid output amount\");\n    }\n    emit StopLossOrderCompleted(amountOut);\n  }\n}\n"
    },
    "contracts/IMasterChef2.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\ninterface IMasterChef2 {\n  struct UserInfo {\n    uint256 amount;\n    uint256 rewardDebt;\n  }\n\n  struct PoolInfo {\n    uint256 allocPoint;\n    uint256 lastRewardBlock;\n    uint256 accCakePerShare;\n    bool isRegular;\n  }\n\n  // solhint-disable-next-line func-name-mixedcase\n  function CAKE() external view returns (address);\n\n  function poolInfo(uint256 pool) external view returns (PoolInfo memory);\n\n  function lpToken(uint256 pool) external view returns (address);\n\n  function userInfo(uint256 pool, address user) external view returns (UserInfo memory);\n\n  function pendingCake(uint256 pool, address user) external view returns (uint256);\n\n  function deposit(uint256 pool, uint256 amount) external;\n\n  function withdraw(uint256 pool, uint256 amount) external;\n\n  function emergencyWithdraw(uint256 pool) external;\n}\n"
    },
    "contracts/mock/MasterChef2Mock.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../IMasterChef2.sol\";\n\n// solhint-disable var-name-mixedcase\n// solhint-disable func-param-name-mixedcase\ncontract MasterChef2Mock is IMasterChef2, Ownable {\n  using SafeERC20 for IERC20;\n\n  address public override CAKE;\n\n  mapping(uint256 => IMasterChef2.PoolInfo) internal _pools;\n\n  mapping(uint256 => address) internal _lpTokens;\n\n  mapping(uint256 => mapping(address => IMasterChef2.UserInfo)) internal _usersInfo;\n\n  constructor(address _CAKE) {\n    CAKE = _CAKE;\n  }\n\n  function setPool(uint256 pool, address _lpToken) external onlyOwner {\n    _lpTokens[pool] = _lpToken;\n  }\n\n  function setReward(\n    uint256 pool,\n    address user,\n    uint256 amount\n  ) external onlyOwner {\n    _usersInfo[pool][user].rewardDebt = amount;\n  }\n\n  function poolInfo(uint256 pool) external view override returns (PoolInfo memory) {\n    return _pools[pool];\n  }\n\n  function lpToken(uint256 pool) public view override returns (address) {\n    return _lpTokens[pool];\n  }\n\n  function userInfo(uint256 pool, address user) public view override returns (UserInfo memory) {\n    return _usersInfo[pool][user];\n  }\n\n  function pendingCake(uint256 pool, address user) public view override returns (uint256) {\n    return _usersInfo[pool][user].rewardDebt;\n  }\n\n  function _withdrawReward(uint256 pool, address recipient) internal {\n    uint256 amount = pendingCake(pool, recipient);\n    _usersInfo[pool][recipient].rewardDebt = 0;\n    IERC20(CAKE).safeTransfer(recipient, amount);\n  }\n\n  function deposit(uint256 pool, uint256 amount) external override {\n    address _lpToken = lpToken(pool);\n    require(_lpToken != address(0), \"MasterChef2Mock::deposit: pool not found\");\n    IERC20(_lpToken).safeTransferFrom(msg.sender, address(this), amount);\n    _usersInfo[pool][msg.sender].amount += amount;\n    _withdrawReward(pool, msg.sender);\n  }\n\n  function withdraw(uint256 pool, uint256 amount) public override {\n    address _lpToken = lpToken(pool);\n    require(_lpToken != address(0), \"MasterChef2Mock::withdraw: pool not found\");\n    require(amount <= _usersInfo[pool][msg.sender].amount, \"MasterChef2Mock::withdraw: insufficient funds\");\n    _usersInfo[pool][msg.sender].amount -= amount;\n    IERC20(_lpToken).safeTransfer(msg.sender, amount);\n    _withdrawReward(pool, msg.sender);\n  }\n\n  function emergencyWithdraw(uint256 pool) external override {\n    withdraw(pool, _usersInfo[pool][msg.sender].amount);\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/MasterChef2LpRestake.automate.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./utils/DFH/Automate.sol\";\nimport \"./utils/DFH/IStorage.sol\";\nimport \"./utils/Uniswap/IUniswapV2Router02.sol\";\nimport \"./utils/Uniswap/IUniswapV2Pair.sol\";\nimport \"./utils/Uniswap/SafeUniswapV2Router.sol\";\nimport \"./utils/Uniswap/StopLoss.sol\";\nimport \"./IMasterChef2.sol\";\n\n/**\n * @notice Use with LP token only.\n */\ncontract MasterChef2LpRestake is Automate {\n  using SafeERC20 for IERC20;\n  using SafeUniswapV2Router for IUniswapV2Router02;\n  using StopLoss for StopLoss.Order;\n\n  struct Swap {\n    address[] path;\n    uint256 outMin;\n  }\n\n  address public liquidityRouter;\n\n  IMasterChef2 public staking;\n\n  uint256 public pool;\n\n  uint16 public slippage;\n\n  uint16 public deadline;\n\n  IERC20 public stakingToken;\n\n  IERC20 public rewardToken;\n\n  StopLoss.Order public stopLoss;\n\n  // solhint-disable-next-line no-empty-blocks\n  constructor(address _info) Automate(_info) {}\n\n  function init(\n    address _staking,\n    address _liquidityRouter,\n    uint256 _pool,\n    uint16 _slippage,\n    uint16 _deadline\n  ) external initializer {\n    require(\n      !_initialized || address(staking) == _staking,\n      \"MasterChef2LpRestake::init: reinitialize staking address forbidden\"\n    );\n    staking = IMasterChef2(_staking);\n    require(\n      !_initialized || liquidityRouter == _liquidityRouter,\n      \"MasterChef2LpRestake::init: reinitialize liquidity router address forbidden\"\n    );\n    liquidityRouter = _liquidityRouter;\n    require(!_initialized || pool == _pool, \"MasterChef2LpRestake::init: reinitialize pool index forbidden\");\n    pool = _pool;\n    slippage = _slippage;\n    deadline = _deadline;\n\n    if (!_initialized) {\n      address lpToken = staking.lpToken(pool);\n      stakingToken = IERC20(lpToken);\n      rewardToken = IERC20(staking.CAKE());\n    }\n  }\n\n  function deposit() external onlyOwner {\n    IERC20 _stakingToken = stakingToken; // gas optimisation\n    uint256 balance = _stakingToken.balanceOf(address(this));\n    _stakingToken.safeApprove(address(staking), balance);\n    staking.deposit(pool, balance);\n  }\n\n  function refund() external onlyOwner {\n    IMasterChef2 _staking = staking; // gas optimisation\n    address __owner = owner(); // gas optimisation\n    IMasterChef2.UserInfo memory userInfo = _staking.userInfo(pool, address(this));\n    _staking.withdraw(pool, userInfo.amount);\n    stakingToken.safeTransfer(__owner, stakingToken.balanceOf(address(this)));\n    rewardToken.safeTransfer(__owner, rewardToken.balanceOf(address(this)));\n  }\n\n  function emergencyWithdraw() external onlyOwner {\n    address __owner = owner(); // gas optimisation\n    staking.emergencyWithdraw(pool);\n    stakingToken.safeTransfer(__owner, stakingToken.balanceOf(address(this)));\n    rewardToken.safeTransfer(__owner, rewardToken.balanceOf(address(this)));\n  }\n\n  function run(\n    uint256 gasFee,\n    uint256 _deadline,\n    Swap memory swap0,\n    Swap memory swap1\n  ) external bill(gasFee, \"PancakeSwapMasterChef2LpRestake\") {\n    IMasterChef2 _staking = staking; // gas optimization\n    IUniswapV2Router02 _liquidityRouter = IUniswapV2Router02(liquidityRouter);\n    require(_staking.pendingCake(pool, address(this)) > 0, \"MasterChef2LpRestake::run: no earned\");\n\n    _staking.deposit(pool, 0); // get all reward\n    uint256 rewardAmount = rewardToken.balanceOf(address(this));\n    rewardToken.safeApprove(address(_liquidityRouter), rewardAmount);\n    _liquidityRouter.safeSwapExactTokensForTokens(rewardAmount / 2, swap0.outMin, swap0.path, address(this), _deadline);\n    _liquidityRouter.safeSwapExactTokensForTokens(\n      rewardAmount - rewardAmount / 2,\n      swap1.outMin,\n      swap1.path,\n      address(this),\n      _deadline\n    );\n\n    IUniswapV2Pair _stakingToken = IUniswapV2Pair(address(stakingToken));\n    _liquidityRouter.addAllLiquidity(_stakingToken.token0(), _stakingToken.token1(), address(this), _deadline);\n    uint256 stakingAmount = _stakingToken.balanceOf(address(this));\n    stakingToken.safeApprove(address(_staking), stakingAmount);\n    _staking.deposit(pool, stakingAmount);\n  }\n\n  function setStopLoss(\n    address[] calldata path,\n    uint256 amountOut,\n    uint256 amountOutMin\n  ) external onlyOwner {\n    stopLoss = StopLoss.Order(path, amountOut, amountOutMin);\n  }\n\n  function runStopLoss(uint256 gasFee, uint256 _deadline) external bill(gasFee, \"PancakeSwapMasterChef2LpStopLoss\") {\n    staking.withdraw(pool, staking.userInfo(pool, address(this)).amount);\n    (address token0, address token1, , ) = IUniswapV2Router02(liquidityRouter).removeAllLiquidity(\n      address(stakingToken),\n      address(this),\n      _deadline\n    );\n    address[] memory inTokens = new address[](2);\n    inTokens[0] = token0;\n    inTokens[1] = token1;\n\n    stopLoss.run(liquidityRouter, inTokens, _deadline);\n    address __owner = owner();\n    IERC20 exitToken = IERC20(stopLoss.path[stopLoss.path.length - 1]);\n    exitToken.safeTransfer(__owner, exitToken.balanceOf(address(this)));\n    if (rewardToken != exitToken) {\n      rewardToken.safeTransfer(__owner, rewardToken.balanceOf(address(this)));\n    }\n  }\n}\n"
    }
  },
  "settings": {
    "libraries": {
      "contracts/utils/DFH/proxy/ERC1167.sol": {
        "ERC1167": "0x10bBA4e8A2f6F85B75cd75ef773f5Daca5596C87"
      }
    },
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}
{
  "address": "0x5d5476DAdD317c1a43BD859aFb3A0a6660bAFD6b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_info",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "protocolFee",
          "type": "int256"
        }
      ],
      "name": "ProtocolFeeChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "__protocolFee",
          "type": "int256"
        }
      ],
      "name": "changeProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deadline",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "info",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidityRouter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pool",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_slippage",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_deadline",
          "type": "uint16"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gasFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "outMin",
              "type": "uint256"
            }
          ],
          "internalType": "struct MasterChef2LpRestake.Swap",
          "name": "swap0",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "outMin",
              "type": "uint256"
            }
          ],
          "internalType": "struct MasterChef2LpRestake.Swap",
          "name": "swap1",
          "type": "tuple"
        }
      ],
      "name": "run",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gasFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "runStopLoss",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        }
      ],
      "name": "setStopLoss",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippage",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract IMasterChef2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopLoss",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfdbb6af5e1a3a042e1c8d55c5362f523563d85b6b99c67079f143dc653ffc607",
  "receipt": {
    "to": null,
    "from": "0xFa02EDF9ebA53Ae811650e409A1da2E6103CDB54",
    "contractAddress": "0x5d5476DAdD317c1a43BD859aFb3A0a6660bAFD6b",
    "transactionIndex": 12,
    "gasUsed": "4512454",
    "logsBloom": "0x
    "blockHash": "0xd95cb01172386a1b20d3bdf8157a922d912f51a90cd3d9e2752d5b9615aa50b4",
    "transactionHash": "0xfdbb6af5e1a3a042e1c8d55c5362f523563d85b6b99c67079f143dc653ffc607",
    "logs": [],
    "blockNumber": 7534036,
    "cumulativeGasUsed": "8118140",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBa4F0699c3B08a93E6EC359d8d487aafDe320ed8"
  ],
  "numDeployments": 1,
  "solcInputHash": "6dfdae98cb24cd9dfc9adc07e0771650",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_info\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"protocolFee\",\"type\":\"int256\"}],\"name\":\"ProtocolFeeChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"__protocolFee\",\"type\":\"int256\"}],\"name\":\"changeProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"info\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pool\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_slippage\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_deadline\",\"type\":\"uint16\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"outMin\",\"type\":\"uint256\"}],\"internalType\":\"struct MasterChef2LpRestake.Swap\",\"name\":\"swap0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"outMin\",\"type\":\"uint256\"}],\"internalType\":\"struct MasterChef2LpRestake.Swap\",\"name\":\"swap1\",\"type\":\"tuple\"}],\"name\":\"run\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"runStopLoss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"setStopLoss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IMasterChef2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopLoss\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"changeProtocolFee(int256)\":{\"params\":{\"__protocolFee\":\"New protocol fee.\"}},\"protocolFee()\":{\"returns\":{\"_0\":\"Current protocol fee.\"}},\"transfer(address,address,uint256)\":{\"params\":{\"amount\":\"Transferred amount of tokens.\",\"recipient\":\"Token recipient address.\",\"token\":\"The address of the token to be transferred.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeProtocolFee(int256)\":{\"notice\":\"Change protocol fee.\"},\"info()\":{\"notice\":\"Returns address of Storage contract.\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"pause()\":{\"notice\":\"Pause contract.\"},\"paused()\":{\"notice\":\"Returns true if the contract is paused, and false otherwise.\"},\"transfer(address,address,uint256)\":{\"notice\":\"Transfer ERC20 token to recipient.\"},\"unpause()\":{\"notice\":\"Unpause contract.\"}},\"notice\":\"Use with LP token only.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MasterChef2LpRestake.automate.sol\":\"MasterChef2LpRestake\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/IMasterChef2.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IMasterChef2 {\\n  struct UserInfo {\\n    uint256 amount;\\n    uint256 rewardDebt;\\n  }\\n\\n  struct PoolInfo {\\n    uint256 allocPoint;\\n    uint256 lastRewardBlock;\\n    uint256 accCakePerShare;\\n    bool isRegular;\\n  }\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function CAKE() external view returns (address);\\n\\n  function poolInfo(uint256 pool) external view returns (PoolInfo memory);\\n\\n  function lpToken(uint256 pool) external view returns (address);\\n\\n  function userInfo(uint256 pool, address user) external view returns (UserInfo memory);\\n\\n  function pendingCake(uint256 pool, address user) external view returns (uint256);\\n\\n  function deposit(uint256 pool, uint256 amount) external;\\n\\n  function withdraw(uint256 pool, uint256 amount) external;\\n\\n  function emergencyWithdraw(uint256 pool) external;\\n}\\n\",\"keccak256\":\"0x51711b2fc2768eb3fa20289aedb1f04be720e9ee331f68a37ac35cc03299da12\",\"license\":\"BSD-3-Clause\"},\"contracts/MasterChef2LpRestake.automate.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./utils/DFH/Automate.sol\\\";\\nimport \\\"./utils/DFH/IStorage.sol\\\";\\nimport \\\"./utils/Uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"./utils/Uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"./utils/Uniswap/SafeUniswapV2Router.sol\\\";\\nimport \\\"./utils/Uniswap/StopLoss.sol\\\";\\nimport \\\"./IMasterChef2.sol\\\";\\n\\n/**\\n * @notice Use with LP token only.\\n */\\ncontract MasterChef2LpRestake is Automate {\\n  using SafeERC20 for IERC20;\\n  using SafeUniswapV2Router for IUniswapV2Router02;\\n  using StopLoss for StopLoss.Order;\\n\\n  struct Swap {\\n    address[] path;\\n    uint256 outMin;\\n  }\\n\\n  address public liquidityRouter;\\n\\n  IMasterChef2 public staking;\\n\\n  uint256 public pool;\\n\\n  uint16 public slippage;\\n\\n  uint16 public deadline;\\n\\n  IERC20 public stakingToken;\\n\\n  IERC20 public rewardToken;\\n\\n  StopLoss.Order public stopLoss;\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor(address _info) Automate(_info) {}\\n\\n  function init(\\n    address _staking,\\n    address _liquidityRouter,\\n    uint256 _pool,\\n    uint16 _slippage,\\n    uint16 _deadline\\n  ) external initializer {\\n    require(\\n      !_initialized || address(staking) == _staking,\\n      \\\"MasterChef2LpRestake::init: reinitialize staking address forbidden\\\"\\n    );\\n    staking = IMasterChef2(_staking);\\n    require(\\n      !_initialized || liquidityRouter == _liquidityRouter,\\n      \\\"MasterChef2LpRestake::init: reinitialize liquidity router address forbidden\\\"\\n    );\\n    liquidityRouter = _liquidityRouter;\\n    require(!_initialized || pool == _pool, \\\"MasterChef2LpRestake::init: reinitialize pool index forbidden\\\");\\n    pool = _pool;\\n    slippage = _slippage;\\n    deadline = _deadline;\\n\\n    if (!_initialized) {\\n      address lpToken = staking.lpToken(pool);\\n      stakingToken = IERC20(lpToken);\\n      rewardToken = IERC20(staking.CAKE());\\n    }\\n  }\\n\\n  function deposit() external onlyOwner {\\n    IERC20 _stakingToken = stakingToken; // gas optimisation\\n    uint256 balance = _stakingToken.balanceOf(address(this));\\n    _stakingToken.safeApprove(address(staking), balance);\\n    staking.deposit(pool, balance);\\n  }\\n\\n  function refund() external onlyOwner {\\n    IMasterChef2 _staking = staking; // gas optimisation\\n    address __owner = owner(); // gas optimisation\\n    IMasterChef2.UserInfo memory userInfo = _staking.userInfo(pool, address(this));\\n    _staking.withdraw(pool, userInfo.amount);\\n    stakingToken.safeTransfer(__owner, stakingToken.balanceOf(address(this)));\\n    rewardToken.safeTransfer(__owner, rewardToken.balanceOf(address(this)));\\n  }\\n\\n  function emergencyWithdraw() external onlyOwner {\\n    address __owner = owner(); // gas optimisation\\n    staking.emergencyWithdraw(pool);\\n    stakingToken.safeTransfer(__owner, stakingToken.balanceOf(address(this)));\\n    rewardToken.safeTransfer(__owner, rewardToken.balanceOf(address(this)));\\n  }\\n\\n  function run(\\n    uint256 gasFee,\\n    uint256 _deadline,\\n    Swap memory swap0,\\n    Swap memory swap1\\n  ) external bill(gasFee, \\\"PancakeSwapMasterChef2LpRestake\\\") {\\n    IMasterChef2 _staking = staking; // gas optimization\\n    IUniswapV2Router02 _liquidityRouter = IUniswapV2Router02(liquidityRouter);\\n    require(_staking.pendingCake(pool, address(this)) > 0, \\\"MasterChef2LpRestake::run: no earned\\\");\\n\\n    _staking.deposit(pool, 0); // get all reward\\n    uint256 rewardAmount = rewardToken.balanceOf(address(this));\\n    rewardToken.safeApprove(address(_liquidityRouter), rewardAmount);\\n    _liquidityRouter.safeSwapExactTokensForTokens(rewardAmount / 2, swap0.outMin, swap0.path, address(this), _deadline);\\n    _liquidityRouter.safeSwapExactTokensForTokens(\\n      rewardAmount - rewardAmount / 2,\\n      swap1.outMin,\\n      swap1.path,\\n      address(this),\\n      _deadline\\n    );\\n\\n    IUniswapV2Pair _stakingToken = IUniswapV2Pair(address(stakingToken));\\n    _liquidityRouter.addAllLiquidity(_stakingToken.token0(), _stakingToken.token1(), address(this), _deadline);\\n    uint256 stakingAmount = _stakingToken.balanceOf(address(this));\\n    stakingToken.safeApprove(address(_staking), stakingAmount);\\n    _staking.deposit(pool, stakingAmount);\\n  }\\n\\n  function setStopLoss(\\n    address[] calldata path,\\n    uint256 amountOut,\\n    uint256 amountOutMin\\n  ) external onlyOwner {\\n    stopLoss = StopLoss.Order(path, amountOut, amountOutMin);\\n  }\\n\\n  function runStopLoss(uint256 gasFee, uint256 _deadline) external bill(gasFee, \\\"PancakeSwapMasterChef2LpStopLoss\\\") {\\n    staking.withdraw(pool, staking.userInfo(pool, address(this)).amount);\\n    (address token0, address token1, , ) = IUniswapV2Router02(liquidityRouter).removeAllLiquidity(\\n      address(stakingToken),\\n      address(this),\\n      _deadline\\n    );\\n    address[] memory inTokens = new address[](2);\\n    inTokens[0] = token0;\\n    inTokens[1] = token1;\\n\\n    stopLoss.run(liquidityRouter, inTokens, _deadline);\\n    address __owner = owner();\\n    IERC20 exitToken = IERC20(stopLoss.path[stopLoss.path.length - 1]);\\n    exitToken.safeTransfer(__owner, exitToken.balanceOf(address(this)));\\n    if (rewardToken != exitToken) {\\n      rewardToken.safeTransfer(__owner, rewardToken.balanceOf(address(this)));\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x67b684e306f7f088d3bc89929223f90b2af997165e7afadc48f42b9b4ccea9d6\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/DFH/Automate.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./proxy/ERC1167.sol\\\";\\nimport \\\"./IStorage.sol\\\";\\nimport \\\"./IBalance.sol\\\";\\n\\n// solhint-disable avoid-tx-origin\\nabstract contract Automate {\\n  using ERC1167 for address;\\n\\n  /// @notice Storage contract address.\\n  address internal _info;\\n\\n  /// @notice Contract owner.\\n  address internal _owner;\\n\\n  /// @notice Is contract paused.\\n  bool internal _paused;\\n\\n  /// @notice Protocol fee in USD (-1 if value in global storage).\\n  int256 internal _protocolFee;\\n\\n  /// @notice Is contract already initialized.\\n  bool internal _initialized;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  event ProtocolFeeChanged(int256 protocolFee);\\n\\n  constructor(address __info) {\\n    _info = __info;\\n    _owner = tx.origin;\\n    _protocolFee = -1;\\n  }\\n\\n  /**\\n   * @notice Returns address of Storage contract.\\n   */\\n  function info() public view returns (address) {\\n    address impl = address(this).implementation();\\n    if (impl == address(this)) return _info;\\n\\n    return Automate(impl).info();\\n  }\\n\\n  /// @dev Modifier to protect an initializer function from being invoked twice.\\n  modifier initializer() {\\n    if (_owner == address(0)) {\\n      _owner = tx.origin;\\n      _protocolFee = -1;\\n    } else {\\n      require(_owner == msg.sender, \\\"Automate: caller is not the owner\\\");\\n    }\\n    _;\\n    _initialized = true;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(_owner == msg.sender, \\\"Automate: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external onlyOwner {\\n    require(address(this).implementation() == address(this), \\\"Automate: change the owner failed\\\");\\n\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the pauser.\\n   */\\n  modifier onlyPauser() {\\n    if (address(this).implementation() == address(this)) {\\n      address pauser = IStorage(info()).getAddress(keccak256(\\\"DFH:Pauser\\\"));\\n      require(msg.sender == _owner || msg.sender == pauser, \\\"Automate: caller is not the pauser\\\");\\n    } else {\\n      require(msg.sender == _owner, \\\"Automate: caller is not the pauser\\\");\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Returns true if the contract is paused, and false otherwise.\\n   */\\n  function paused() public view returns (bool) {\\n    address impl = address(this).implementation();\\n    if (impl == address(this)) return _paused;\\n\\n    return _paused || Automate(impl).paused();\\n  }\\n\\n  /**\\n   * @dev Throws if contract unpaused.\\n   */\\n  modifier whenPaused() {\\n    require(paused(), \\\"Automate: not paused\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Throws if contract paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused(), \\\"Automate: paused\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Pause contract.\\n   */\\n  function pause() external onlyPauser whenNotPaused {\\n    _paused = true;\\n  }\\n\\n  /**\\n   * @notice Unpause contract.\\n   */\\n  function unpause() external onlyPauser whenPaused {\\n    _paused = false;\\n  }\\n\\n  /**\\n   * @return Current protocol fee.\\n   */\\n  function protocolFee() public view returns (uint256) {\\n    address impl = address(this).implementation();\\n    if (impl != address(this) && _protocolFee < 0) {\\n      return Automate(impl).protocolFee();\\n    }\\n\\n    IStorage __info = IStorage(info());\\n    uint256 feeOnUSD = _protocolFee < 0 ? __info.getUint(keccak256(\\\"DFH:Fee:Automate\\\")) : uint256(_protocolFee);\\n    if (feeOnUSD == 0) return 0;\\n\\n    (, int256 price, , , ) = AggregatorV3Interface(__info.getAddress(keccak256(\\\"DFH:Fee:PriceFeed\\\"))).latestRoundData();\\n    require(price > 0, \\\"Automate: invalid price\\\");\\n\\n    return (feeOnUSD * 1e18) / uint256(price);\\n  }\\n\\n  /**\\n   * @notice Change protocol fee.\\n   * @param __protocolFee New protocol fee.\\n   */\\n  function changeProtocolFee(int256 __protocolFee) external {\\n    address impl = address(this).implementation();\\n    require(\\n      (impl == address(this) ? _owner : Automate(impl).owner()) == msg.sender,\\n      \\\"Automate::changeProtocolFee: caller is not the protocol owner\\\"\\n    );\\n\\n    _protocolFee = __protocolFee;\\n    emit ProtocolFeeChanged(__protocolFee);\\n  }\\n\\n  /**\\n   * @dev Claim fees from owner.\\n   * @param gasFee Claim gas fee.\\n   * @param operation Claim description.\\n   */\\n  function _bill(uint256 gasFee, string memory operation) internal whenNotPaused returns (uint256) {\\n    address account = owner(); // gas optimisation\\n    if (tx.origin == account) return 0; // free if called by the owner\\n\\n    IStorage __info = IStorage(info());\\n\\n    address balance = __info.getAddress(keccak256(\\\"DFH:Contract:Balance\\\"));\\n    require(balance != address(0), \\\"Automate::_bill: balance contract not found\\\");\\n\\n    return IBalance(balance).claim(account, gasFee, protocolFee(), operation);\\n  }\\n\\n  /**\\n   * @dev Claim fees from owner.\\n   * @param gasFee Claim gas fee.\\n   * @param operation Claim description.\\n   */\\n  modifier bill(uint256 gasFee, string memory operation) {\\n    _bill(gasFee, operation);\\n    _;\\n  }\\n\\n  /**\\n   * @notice Transfer ERC20 token to recipient.\\n   * @param token The address of the token to be transferred.\\n   * @param recipient Token recipient address.\\n   * @param amount Transferred amount of tokens.\\n   */\\n  function transfer(\\n    address token,\\n    address recipient,\\n    uint256 amount\\n  ) external onlyOwner {\\n    IERC20(token).transfer(recipient, amount);\\n  }\\n}\\n\",\"keccak256\":\"0xb0b26358673f6750ee6eef40b1a9668a3dc2965ffb1e1d777c3c8ca8cc2ce5a5\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/DFH/IBalance.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IBalance {\\n  function claim(\\n    address account,\\n    uint256 gasFee,\\n    uint256 protocolFee,\\n    string memory description\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xaa996ebfd96fa304ff8c51b240819815ea9cb1b27a250319c57cac7b597be6cc\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/DFH/IStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IStorage {\\n  function getBytes(bytes32 key) external view returns (bytes memory);\\n\\n  function getBool(bytes32 key) external view returns (bool);\\n\\n  function getUint(bytes32 key) external view returns (uint256);\\n\\n  function getInt(bytes32 key) external view returns (int256);\\n\\n  function getAddress(bytes32 key) external view returns (address);\\n\\n  function getString(bytes32 key) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xc3f6f2d80c27a1d5abbf6f6df55c96a315cdf7887b589c9ef5d45d036c56aa76\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/DFH/proxy/ERC1167.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable no-inline-assembly\\nlibrary ERC1167 {\\n  bytes public constant CLONE =\\n    hex\\\"363d3d373d3d3d363d73bebebebebebebebebebebebebebebebebebebebe5af43d82803e903d91602b57fd5bf3\\\";\\n\\n  /**\\n   * @notice Make new proxy contract.\\n   * @param impl Address prototype contract.\\n   * @return proxy Address new proxy contract.\\n   */\\n  function clone(address impl) external returns (address proxy) {\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(ptr, 0x14), shl(0x60, impl))\\n      mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      proxy := create(0, ptr, 0x37)\\n    }\\n    require(proxy != address(0), \\\"ERC1167: create failed\\\");\\n  }\\n\\n  /**\\n   * @notice Returns address of prototype contract for proxy.\\n   * @param proxy Address proxy contract.\\n   * @return impl Address prototype contract (current contract address if not proxy).\\n   */\\n  function implementation(address proxy) external view returns (address impl) {\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(proxy)\\n    }\\n\\n    impl = proxy;\\n    if (size <= 45 && size >= 41) {\\n      bool matches = true;\\n      uint256 i;\\n\\n      bytes memory code;\\n      assembly {\\n        code := mload(0x40)\\n        mstore(0x40, add(code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n        mstore(code, size)\\n        extcodecopy(proxy, add(code, 0x20), 0, size)\\n      }\\n      for (i = 0; matches && i < 9; i++) {\\n        matches = code[i] == CLONE[i];\\n      }\\n      for (i = 0; matches && i < 15; i++) {\\n        if (i == 4) {\\n          matches = code[code.length - i - 1] == bytes1(uint8(CLONE[45 - i - 1]) - uint8(45 - size));\\n        } else {\\n          matches = code[code.length - i - 1] == CLONE[45 - i - 1];\\n        }\\n      }\\n      if (code[9] != bytes1(0x73 - uint8(45 - size))) {\\n        matches = false;\\n      }\\n      uint256 forwardedToBuffer;\\n      if (matches) {\\n        assembly {\\n          forwardedToBuffer := mload(add(code, 30))\\n        }\\n        forwardedToBuffer &= (0x1 << (20 * 8)) - 1;\\n        impl = address(uint160(forwardedToBuffer >> ((45 - size) * 8)));\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x766f43e1832068a2a230f9bc19db0b190f638c4b0acb2dc689da07d43a45675f\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/Uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\ninterface IUniswapV2Pair is IERC20 {\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function price0CumulativeLast() external view returns (uint256);\\n\\n  function price1CumulativeLast() external view returns (uint256);\\n\\n  function kLast() external view returns (uint256);\\n\\n  function mint(address to) external returns (uint256 liquidity);\\n\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n  function swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external;\\n}\\n\",\"keccak256\":\"0x562becce443b899cba13f76266d689bda17a0a1d457af045762848aa552037ac\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/Uniswap/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IUniswapV2Router02 {\\n  function factory() external view returns (address);\\n\\n  function WETH() external view returns (address);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 amountADesired,\\n    uint256 amountBDesired,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (\\n      uint256 amountA,\\n      uint256 amountB,\\n      uint256 liquidity\\n    );\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint256 amountTokenDesired,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    payable\\n    returns (\\n      uint256 amountToken,\\n      uint256 amountETH,\\n      uint256 liquidity\\n    );\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function swapExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactTokens(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactETHForTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactETH(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactTokensForETH(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapETHForExactTokens(\\n    uint256 amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) external pure returns (uint256 amountB);\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountOut);\\n\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountIn);\\n\\n  function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n  function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountETH);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountETH);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n}\\n\",\"keccak256\":\"0xf12b9639d5053651c2416527a638fd3168276feb207265374d87574a9a312f75\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/Uniswap/SafeUniswapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./IUniswapV2Router02.sol\\\";\\nimport \\\"./IUniswapV2Pair.sol\\\";\\n\\nlibrary SafeUniswapV2Router {\\n  using SafeERC20 for IERC20;\\n\\n  function safeSwapExactTokensForTokens(\\n    IUniswapV2Router02 router,\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] memory path,\\n    address to,\\n    uint256 deadline\\n  ) internal returns (uint256[] memory amounts) {\\n    if (path[0] != path[path.length - 1])\\n      amounts = router.swapExactTokensForTokens(amountIn, amountOutMin, path, to, deadline);\\n  }\\n\\n  function addAllLiquidity(\\n    IUniswapV2Router02 router,\\n    address tokenA,\\n    address tokenB,\\n    address to,\\n    uint256 deadline\\n  )\\n    internal\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    uint256 amountA = IERC20(tokenA).balanceOf(address(this));\\n    uint256 amountB = IERC20(tokenB).balanceOf(address(this));\\n    IERC20(tokenA).safeApprove(address(router), amountA);\\n    IERC20(tokenB).safeApprove(address(router), amountB);\\n    return router.addLiquidity(tokenA, tokenB, amountA, amountB, 0, 0, to, deadline);\\n  }\\n\\n  function removeAllLiquidity(\\n    IUniswapV2Router02 router,\\n    address pair,\\n    address to,\\n    uint256 deadline\\n  )\\n    internal\\n    returns (\\n      address tokenA,\\n      address tokenB,\\n      uint256 amountA,\\n      uint256 amountB\\n    )\\n  {\\n    tokenA = IUniswapV2Pair(pair).token0();\\n    tokenB = IUniswapV2Pair(pair).token1();\\n    uint256 balance = IERC20(pair).balanceOf(address(this));\\n    IERC20(pair).safeApprove(address(router), balance);\\n    (amountA, amountB) = router.removeLiquidity(tokenA, tokenB, balance, 0, 0, to, deadline);\\n  }\\n}\\n\",\"keccak256\":\"0xaf2740c3a9913bda5dfb7ad4bd0abdf94ba52e9020fc2346f3dd28b497cbbe16\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/Uniswap/StopLoss.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./SafeUniswapV2Router.sol\\\";\\nimport \\\"./IUniswapV2Router02.sol\\\";\\n\\nlibrary StopLoss {\\n  using SafeERC20 for IERC20;\\n  using SafeUniswapV2Router for IUniswapV2Router02;\\n\\n  struct Order {\\n    address[] path;\\n    uint256 amountOut;\\n    uint256 amountOutMin;\\n  }\\n\\n  event StopLossOrderCompleted(uint256 amountOut);\\n\\n  function run(\\n    Order storage order,\\n    address liquidityRouter,\\n    address[] memory inTokens,\\n    uint256 _deadline\\n  ) internal {\\n    require(order.path.length > 1 && order.amountOut > 0, \\\"StopLoss::run: stop loss disabled\\\");\\n    require(inTokens.length <= 256, \\\"StopLoss::run: too many in tokens\\\");\\n    for (uint8 i = 0; i < inTokens.length; i++) {\\n      address token = inTokens[i];\\n      if (token == order.path[0]) continue;\\n      uint256 balance = IERC20(token).balanceOf(address(this));\\n      if (balance == 0) continue;\\n      address[] memory path = new address[](2);\\n      path[0] = token;\\n      path[1] = order.path[0];\\n      IERC20(token).safeApprove(liquidityRouter, balance);\\n      IUniswapV2Router02(liquidityRouter).safeSwapExactTokensForTokens(balance, 0, path, address(this), _deadline);\\n    }\\n\\n    address baseToken = order.path[0];\\n    uint256 baseBalance = IERC20(baseToken).balanceOf(address(this));\\n    uint256 amountOut;\\n    if (baseToken != order.path[order.path.length - 1]) {\\n      require(baseBalance > 0, \\\"StopLoss::run: insufficient balance of base token\\\");\\n      IERC20(baseToken).safeApprove(liquidityRouter, baseBalance);\\n      uint256[] memory amountsOut = IUniswapV2Router02(liquidityRouter).safeSwapExactTokensForTokens(\\n        baseBalance,\\n        order.amountOutMin,\\n        order.path,\\n        address(this),\\n        _deadline\\n      );\\n      amountOut = amountsOut[amountsOut.length - 1];\\n      require(amountOut <= order.amountOut, \\\"StopLoss::run: invalid output amount\\\");\\n    } else {\\n      amountOut = baseBalance;\\n      require(amountOut <= order.amountOut, \\\"StopLoss::run: invalid output amount\\\");\\n    }\\n    emit StopLossOrderCompleted(amountOut);\\n  }\\n}\\n\",\"keccak256\":\"0x35e92f1e66da9fcfffd67f7f29988801a1e40d36547ea28e7c6c09a56feacce3\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620050c1380380620050c1833981016040819052620000349162000069565b600080546001600160a01b039092166001600160a01b031992831617905560018054909116321790556000196002556200009b565b6000602082840312156200007c57600080fd5b81516001600160a01b03811681146200009457600080fd5b9392505050565b61501680620000ab6000396000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c806388591b27116100e3578063b838d9141161008c578063db2e21bc11610066578063db2e21bc1461037d578063f2fde38b14610385578063f7c618c11461039857600080fd5b8063b838d9141461034f578063beabacc814610362578063d0e30db01461037557600080fd5b80639327d80a116100bd5780639327d80a146103215780639742b5c314610334578063b0e21e8a1461034757600080fd5b806388591b27146102dd5780638c3d8faf146102f05780638da5cb5b1461030357600080fd5b80634cf088d9116101455780635c975abb1161011f5780635c975abb1461029557806372f702f3146102ad5780638456cb59146102d557600080fd5b80634cf088d91461024a578063527a15651461026a578063590e1ae31461028d57600080fd5b8063370158ea11610176578063370158ea1461022a5780633e032a3b146102325780633f4ba83a1461024057600080fd5b806316f0115b1461019d57806324702944146101b957806329dcb0cf14610203575b600080fd5b6101a660055481565b6040519081526020015b60405180910390f35b6003546101de90610100900473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101b0565b6006546102179062010000900461ffff1681565b60405161ffff90911681526020016101b0565b6101de6103b8565b6006546102179061ffff1681565b61024861051a565b005b6004546101de9073ffffffffffffffffffffffffffffffffffffffff1681565b600954600a54610278919082565b604080519283526020830191909152016101b0565b6102486108b1565b61029d610c71565b60405190151581526020016101b0565b6006546101de90640100000000900473ffffffffffffffffffffffffffffffffffffffff1681565b610248610df6565b6102486102eb366004614bbb565b6111a0565b6102486102fe3660046149b8565b6117a7565b60015473ffffffffffffffffffffffffffffffffffffffff166101de565b61024861032f366004614b75565b6118d1565b610248610342366004614af4565b611cda565b6101a6611f14565b61024861035d366004614956565b612321565b610248610370366004614915565b612964565b610248612ab9565b610248612cc5565b6102486103933660046148db565b612ed7565b6007546101de9073ffffffffffffffffffffffffffffffffffffffff1681565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482015260009081907310bBA4e8A2f6F85B75cd75ef773f5Daca5596C8790636b8807189060240160206040518083038186803b15801561042057600080fd5b505af4158015610434573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045891906148f8565b905073ffffffffffffffffffffffffffffffffffffffff811630141561049657505060005473ffffffffffffffffffffffffffffffffffffffff1690565b8073ffffffffffffffffffffffffffffffffffffffff1663370158ea6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104dc57600080fd5b505afa1580156104f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051491906148f8565b91505090565b6040517f6b8807180000000000000000000000000000000000000000000000000000000081523060048201819052907310bBA4e8A2f6F85B75cd75ef773f5Daca5596C8790636b8807189060240160206040518083038186803b15801561058057600080fd5b505af4158015610594573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b891906148f8565b73ffffffffffffffffffffffffffffffffffffffff1614156107725760006105de6103b8565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf175974395600482015273ffffffffffffffffffffffffffffffffffffffff91909116906321f8a7219060240160206040518083038186803b15801561066557600080fd5b505afa158015610679573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069d91906148f8565b60015490915073ffffffffffffffffffffffffffffffffffffffff163314806106db57503373ffffffffffffffffffffffffffffffffffffffff8216145b61076c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b50610819565b60015473ffffffffffffffffffffffffffffffffffffffff163314610819576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f65720000000000000000000000000000000000000000000000000000000000006064820152608401610763565b610821610c71565b610887576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4175746f6d6174653a206e6f74207061757365640000000000000000000000006044820152606401610763565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055565b60015473ffffffffffffffffffffffffffffffffffffffff163314610958576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610763565b60045473ffffffffffffffffffffffffffffffffffffffff16600061099260015473ffffffffffffffffffffffffffffffffffffffff1690565b6005546040517f93f1a40b000000000000000000000000000000000000000000000000000000008152600481019190915230602482015290915060009073ffffffffffffffffffffffffffffffffffffffff8416906393f1a40b90604401604080518083038186803b158015610a0757600080fd5b505afa158015610a1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3f9190614b0d565b60055481516040517f441a3e700000000000000000000000000000000000000000000000000000000081526004810192909252602482015290915073ffffffffffffffffffffffffffffffffffffffff84169063441a3e7090604401600060405180830381600087803b158015610ab557600080fd5b505af1158015610ac9573d6000803e3d6000fd5b50506006546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152610ba4935085925064010000000090910473ffffffffffffffffffffffffffffffffffffffff16906370a08231906024015b60206040518083038186803b158015610b4457600080fd5b505afa158015610b58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7c9190614b5c565b600654640100000000900473ffffffffffffffffffffffffffffffffffffffff169190613136565b6007546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152610c6c91849173ffffffffffffffffffffffffffffffffffffffff909116906370a08231906024015b60206040518083038186803b158015610c1457600080fd5b505afa158015610c28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4c9190614b5c565b60075473ffffffffffffffffffffffffffffffffffffffff169190613136565b505050565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482015260009081907310bBA4e8A2f6F85B75cd75ef773f5Daca5596C8790636b8807189060240160206040518083038186803b158015610cd957600080fd5b505af4158015610ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1191906148f8565b905073ffffffffffffffffffffffffffffffffffffffff8116301415610d5457505060015474010000000000000000000000000000000000000000900460ff1690565b60015474010000000000000000000000000000000000000000900460ff168061051457508073ffffffffffffffffffffffffffffffffffffffff16635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dbe57600080fd5b505afa158015610dd2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105149190614ad2565b6040517f6b8807180000000000000000000000000000000000000000000000000000000081523060048201819052907310bBA4e8A2f6F85B75cd75ef773f5Daca5596C8790636b8807189060240160206040518083038186803b158015610e5c57600080fd5b505af4158015610e70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9491906148f8565b73ffffffffffffffffffffffffffffffffffffffff161415611049576000610eba6103b8565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf175974395600482015273ffffffffffffffffffffffffffffffffffffffff91909116906321f8a7219060240160206040518083038186803b158015610f4157600080fd5b505afa158015610f55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7991906148f8565b60015490915073ffffffffffffffffffffffffffffffffffffffff16331480610fb757503373ffffffffffffffffffffffffffffffffffffffff8216145b611043576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f65720000000000000000000000000000000000000000000000000000000000006064820152608401610763565b506110f0565b60015473ffffffffffffffffffffffffffffffffffffffff1633146110f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f65720000000000000000000000000000000000000000000000000000000000006064820152608401610763565b6110f8610c71565b1561115f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4175746f6d6174653a20706175736564000000000000000000000000000000006044820152606401610763565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055565b836040518060400160405280601f81526020017f50616e63616b65537761704d617374657243686566324c7052657374616b65008152506111e1828261320a565b50600480546003546005546040517f1175a1dd0000000000000000000000000000000000000000000000000000000081529384015230602484015273ffffffffffffffffffffffffffffffffffffffff91821692610100909104909116906000908390631175a1dd9060440160206040518083038186803b15801561126557600080fd5b505afa158015611279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129d9190614b5c565b11611329576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4d617374657243686566324c7052657374616b653a3a72756e3a206e6f20656160448201527f726e6564000000000000000000000000000000000000000000000000000000006064820152608401610763565b6005546040517fe2bbb15800000000000000000000000000000000000000000000000000000000815260048101919091526000602482015273ffffffffffffffffffffffffffffffffffffffff83169063e2bbb15890604401600060405180830381600087803b15801561139c57600080fd5b505af11580156113b0573d6000803e3d6000fd5b50506007546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000935073ffffffffffffffffffffffffffffffffffffffff90911691506370a082319060240160206040518083038186803b15801561142057600080fd5b505afa158015611434573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114589190614b5c565b60075490915061147f9073ffffffffffffffffffffffffffffffffffffffff1683836134dc565b6114b561148d600283614e7f565b6020890151895173ffffffffffffffffffffffffffffffffffffffff8616929190308d61366d565b506114f66114c4600283614e7f565b6114ce9083614ef7565b6020880151885173ffffffffffffffffffffffffffffffffffffffff8616929190308d61366d565b506000600660049054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061163d8173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561156757600080fd5b505afa15801561157b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159f91906148f8565b8273ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156115e557600080fd5b505afa1580156115f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161d91906148f8565b73ffffffffffffffffffffffffffffffffffffffff86169190308d6137bd565b50506040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000915073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b1580156116a857600080fd5b505afa1580156116bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e09190614b5c565b60065490915061170f90640100000000900473ffffffffffffffffffffffffffffffffffffffff1686836134dc565b6005546040517fe2bbb15800000000000000000000000000000000000000000000000000000000815260048101919091526024810182905273ffffffffffffffffffffffffffffffffffffffff86169063e2bbb15890604401600060405180830381600087803b15801561178257600080fd5b505af1158015611796573d6000803e3d6000fd5b505050505050505050505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461184e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610763565b604051806060016040528085858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050509082525060208082018590526040909101839052815180516008926118b4928492910190614750565b506020820151600182015560409091015160029091015550505050565b816040518060400160405280602081526020017f50616e63616b65537761704d617374657243686566324c7053746f704c6f7373815250611912828261320a565b50600480546005546040517f93f1a40b00000000000000000000000000000000000000000000000000000000815292830181905230602484015273ffffffffffffffffffffffffffffffffffffffff9091169163441a3e70919083906393f1a40b90604401604080518083038186803b15801561198e57600080fd5b505afa1580156119a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c69190614b0d565b5160405160e084901b7fffffffff0000000000000000000000000000000000000000000000000000000016815260048101929092526024820152604401600060405180830381600087803b158015611a1d57600080fd5b505af1158015611a31573d6000803e3d6000fd5b505060065460035460009350839250611a739161010090910473ffffffffffffffffffffffffffffffffffffffff908116916401000000009004163088613a32565b5050604080516002808252606082018352939550919350600092906020830190803683370190505090508281600081518110611ab157611ab1614f89565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508181600181518110611aff57611aff614f89565b73ffffffffffffffffffffffffffffffffffffffff9283166020918202929092010152600354611b39916008916101009004168389613cda565b6000611b5a60015473ffffffffffffffffffffffffffffffffffffffff1690565b60088054919250600091611b7090600190614ef7565b81548110611b8057611b80614f89565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9091169150611c5190839083906370a082319060240160206040518083038186803b158015611bfb57600080fd5b505afa158015611c0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c339190614b5c565b73ffffffffffffffffffffffffffffffffffffffff84169190613136565b60075473ffffffffffffffffffffffffffffffffffffffff828116911614611ccf576007546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152611ccf91849173ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401610bfc565b505050505050505050565b6040517f6b8807180000000000000000000000000000000000000000000000000000000081523060048201526000907310bBA4e8A2f6F85B75cd75ef773f5Daca5596C8790636b8807189060240160206040518083038186803b158015611d4057600080fd5b505af4158015611d54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7891906148f8565b90503373ffffffffffffffffffffffffffffffffffffffff82163014611e1b578173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611dde57600080fd5b505afa158015611df2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1691906148f8565b611e35565b60015473ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff1614611ed8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603d60248201527f4175746f6d6174653a3a6368616e676550726f746f636f6c4665653a2063616c60448201527f6c6572206973206e6f74207468652070726f746f636f6c206f776e65720000006064820152608401610763565b60028290556040518281527f3c1d43943224e49d951ce8295a5c8332b517083b3f89bed50feae2cb39caebb59060200160405180910390a15050565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482015260009081907310bBA4e8A2f6F85B75cd75ef773f5Daca5596C8790636b8807189060240160206040518083038186803b158015611f7c57600080fd5b505af4158015611f90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb491906148f8565b905073ffffffffffffffffffffffffffffffffffffffff81163014801590611fde57506000600254125b15612061578073ffffffffffffffffffffffffffffffffffffffff1663b0e21e8a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561202957600080fd5b505afa15801561203d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105149190614b5c565b600061206b6103b8565b9050600080600254126120805760025461213d565b6040517fbd02d0f50000000000000000000000000000000000000000000000000000000081527fa93d95f96a5de25d7a41ddf1f5e8d45cfc929c4838163cf011dab4043a4a40d5600482015273ffffffffffffffffffffffffffffffffffffffff83169063bd02d0f59060240160206040518083038186803b15801561210557600080fd5b505afa158015612119573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213d9190614b5c565b90508061214e576000935050505090565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f65c90423fe7c880476633a7e36521740f87199d233dc56eb4ca6643eb76f605f600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906321f8a7219060240160206040518083038186803b1580156121d657600080fd5b505afa1580156121ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220e91906148f8565b73ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561225357600080fd5b505afa158015612267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228b9190614c60565b505050915050600081136122fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4175746f6d6174653a20696e76616c69642070726963650000000000000000006044820152606401610763565b8061230e83670de0b6b3a7640000614eba565b6123189190614e7f565b94505050505090565b60015473ffffffffffffffffffffffffffffffffffffffff1661239157600180547fffffffffffffffffffffffff000000000000000000000000000000000000000016321790557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600255612438565b60015473ffffffffffffffffffffffffffffffffffffffff163314612438576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610763565b60035460ff161580612464575060045473ffffffffffffffffffffffffffffffffffffffff8681169116145b612516576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f4d617374657243686566324c7052657374616b653a3a696e69743a207265696e60448201527f697469616c697a65207374616b696e67206164647265737320666f726269646460648201527f656e000000000000000000000000000000000000000000000000000000000000608482015260a401610763565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff871617905560035460ff161580612587575060035473ffffffffffffffffffffffffffffffffffffffff85811661010090920416145b612639576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604b60248201527f4d617374657243686566324c7052657374616b653a3a696e69743a207265696e60448201527f697469616c697a65206c697175696469747920726f757465722061646472657360648201527f7320666f7262696464656e000000000000000000000000000000000000000000608482015260a401610763565b6003805473ffffffffffffffffffffffffffffffffffffffff8616610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff8216811790925560ff9182169116171580612695575082600554145b612721576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603d60248201527f4d617374657243686566324c7052657374616b653a3a696e69743a207265696e60448201527f697469616c697a6520706f6f6c20696e64657820666f7262696464656e0000006064820152608401610763565b60058390556006805461ffff83811662010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000009092169085161717905560035460ff1661293257600480546005546040517f78ed5d1f0000000000000000000000000000000000000000000000000000000081529283015260009173ffffffffffffffffffffffffffffffffffffffff909116906378ed5d1f9060240160206040518083038186803b1580156127d857600080fd5b505afa1580156127ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061281091906148f8565b6006805473ffffffffffffffffffffffffffffffffffffffff808416640100000000027fffffffffffffffff0000000000000000000000000000000000000000ffffffff9092169190911790915560048054604080517f4ca6ef280000000000000000000000000000000000000000000000000000000081529051949550921692634ca6ef28928083019260209291829003018186803b1580156128b357600080fd5b505afa1580156128c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128eb91906148f8565b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055505b5050600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314612a0b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610763565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b158015612a7b57600080fd5b505af1158015612a8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ab39190614ad2565b50505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314612b60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610763565b6006546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015264010000000090910473ffffffffffffffffffffffffffffffffffffffff169060009082906370a082319060240160206040518083038186803b158015612bd557600080fd5b505afa158015612be9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c0d9190614b5c565b600454909150612c379073ffffffffffffffffffffffffffffffffffffffff8481169116836134dc565b600480546005546040517fe2bbb158000000000000000000000000000000000000000000000000000000008152928301526024820183905273ffffffffffffffffffffffffffffffffffffffff169063e2bbb15890604401600060405180830381600087803b158015612ca957600080fd5b505af1158015612cbd573d6000803e3d6000fd5b505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314612d6c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610763565b6000612d8d60015473ffffffffffffffffffffffffffffffffffffffff1690565b600480546005546040517f5312ea8e0000000000000000000000000000000000000000000000000000000081529283015291925073ffffffffffffffffffffffffffffffffffffffff90911690635312ea8e90602401600060405180830381600087803b158015612dfd57600080fd5b505af1158015612e11573d6000803e3d6000fd5b50506006546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152612e78935084925064010000000090910473ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401610b2c565b6007546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152612ed491839173ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401610bfc565b50565b60015473ffffffffffffffffffffffffffffffffffffffff163314612f7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610763565b6040517f6b8807180000000000000000000000000000000000000000000000000000000081523060048201819052907310bBA4e8A2f6F85B75cd75ef773f5Daca5596C8790636b8807189060240160206040518083038186803b158015612fe457600080fd5b505af4158015612ff8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301c91906148f8565b73ffffffffffffffffffffffffffffffffffffffff16146130bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a206368616e676520746865206f776e6572206661696c6560448201527f64000000000000000000000000000000000000000000000000000000000000006064820152608401610763565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610c6c9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152614458565b6000613214610c71565b1561327b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4175746f6d6174653a20706175736564000000000000000000000000000000006044820152606401610763565b600061329c60015473ffffffffffffffffffffffffffffffffffffffff1690565b90503273ffffffffffffffffffffffffffffffffffffffff821614156132c65760009150506134d6565b60006132d06103b8565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527fe78c16c6d839536d3155985aab4e9c6013c8c3d446054bcebc48612f359d81f5600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906321f8a7219060240160206040518083038186803b15801561335b57600080fd5b505afa15801561336f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061339391906148f8565b905073ffffffffffffffffffffffffffffffffffffffff8116613438576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f4175746f6d6174653a3a5f62696c6c3a2062616c616e636520636f6e7472616360448201527f74206e6f7420666f756e640000000000000000000000000000000000000000006064820152608401610763565b8073ffffffffffffffffffffffffffffffffffffffff1663e578a225848861345e611f14565b896040518563ffffffff1660e01b815260040161347e9493929190614d0a565b602060405180830381600087803b15801561349857600080fd5b505af11580156134ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134d09190614b5c565b93505050505b92915050565b80158061358b57506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561355157600080fd5b505afa158015613565573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135899190614b5c565b155b613617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610763565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610c6c9084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401613188565b6060836001855161367e9190614ef7565b8151811061368e5761368e614f89565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16846000815181106136bf576136bf614f89565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146137b3576040517f38ed173900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8816906338ed17399061373c9089908990899089908990600401614d58565b600060405180830381600087803b15801561375657600080fd5b505af115801561376a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526137b09190810190614a3a565b90505b9695505050505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009081908190819073ffffffffffffffffffffffffffffffffffffffff8916906370a082319060240160206040518083038186803b15801561382b57600080fd5b505afa15801561383f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138639190614b5c565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8916906370a082319060240160206040518083038186803b1580156138ce57600080fd5b505afa1580156138e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139069190614b5c565b905061392973ffffffffffffffffffffffffffffffffffffffff8a168b846134dc565b61394a73ffffffffffffffffffffffffffffffffffffffff89168b836134dc565b6040517fe8e3370000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a811660048301528981166024830152604482018490526064820183905260006084830181905260a483015288811660c483015260e482018890528b169063e8e337009061010401606060405180830381600087803b1580156139e757600080fd5b505af11580156139fb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a1f9190614c32565b9450945094505050955095509592505050565b6000806000808673ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015613a7e57600080fd5b505afa158015613a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ab691906148f8565b93508673ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015613afe57600080fd5b505afa158015613b12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b3691906148f8565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290935060009073ffffffffffffffffffffffffffffffffffffffff8916906370a082319060240160206040518083038186803b158015613ba157600080fd5b505afa158015613bb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bd99190614b5c565b9050613bfc73ffffffffffffffffffffffffffffffffffffffff89168a836134dc565b6040517fbaa2abde00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152858116602483015260448201839052600060648301819052608483015288811660a483015260c482018890528a169063baa2abde9060e4016040805180830381600087803b158015613c9057600080fd5b505af1158015613ca4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cc89190614b97565b959a9499509750939550919350505050565b83546001108015613cef575060008460010154115b613d7b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f53746f704c6f73733a3a72756e3a2073746f70206c6f73732064697361626c6560448201527f64000000000000000000000000000000000000000000000000000000000000006064820152608401610763565b61010082511115613e0e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f53746f704c6f73733a3a72756e3a20746f6f206d616e7920696e20746f6b656e60448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610763565b60005b82518160ff161015614063576000838260ff1681518110613e3457613e34614f89565b6020026020010151905085600001600081548110613e5457613e54614f89565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff82811691161415613e865750614051565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b158015613eee57600080fd5b505afa158015613f02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f269190614b5c565b905080613f34575050614051565b6040805160028082526060820183526000926020830190803683370190505090508281600081518110613f6957613f69614f89565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505087600001600081548110613fb957613fb9614f89565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600181518110613ff757613ff7614f89565b73ffffffffffffffffffffffffffffffffffffffff928316602091820292909201015261402790841688846134dc565b61404c73ffffffffffffffffffffffffffffffffffffffff881683600084308a61366d565b505050505b8061405b81614f3a565b915050613e11565b5060008460000160008154811061407c5761407c614f89565b60009182526020822001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116925082906370a082319060240160206040518083038186803b1580156140f057600080fd5b505afa158015614104573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141289190614b5c565b8654909150600090879061413e90600190614ef7565b8154811061414e5761414e614f89565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff8481169116146143865760008211614209576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f53746f704c6f73733a3a72756e3a20696e73756666696369656e742062616c6160448201527f6e6365206f66206261736520746f6b656e0000000000000000000000000000006064820152608401610763565b61422a73ffffffffffffffffffffffffffffffffffffffff841687846134dc565b60006142c28389600201548a60000180548060200260200160405190810160405280929190818152602001828054801561429a57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161426f575b50505073ffffffffffffffffffffffffffffffffffffffff8d1694939291503090508a61366d565b905080600182516142d39190614ef7565b815181106142e3576142e3614f89565b602002602001015191508760010154821115614380576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f53746f704c6f73733a3a72756e3a20696e76616c6964206f757470757420616d60448201527f6f756e74000000000000000000000000000000000000000000000000000000006064820152608401610763565b5061441c565b819050866001015481111561441c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f53746f704c6f73733a3a72756e3a20696e76616c6964206f757470757420616d60448201527f6f756e74000000000000000000000000000000000000000000000000000000006064820152608401610763565b6040518181527ff22ed879bd57fced893edba2366c8143c0d7c2e585eafd2521c2832159d557f19060200160405180910390a150505050505050565b60006144ba826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166145649092919063ffffffff16565b805190915015610c6c57808060200190518101906144d89190614ad2565b610c6c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610763565b6060614573848460008561457d565b90505b9392505050565b60608247101561460f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610763565b843b614677576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610763565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516146a09190614cee565b60006040518083038185875af1925050503d80600081146146dd576040519150601f19603f3d011682016040523d82523d6000602084013e6146e2565b606091505b50915091506146f28282866146fd565b979650505050505050565b6060831561470c575081614576565b82511561471c5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107639190614d45565b8280548282559060005260206000209081019282156147ca579160200282015b828111156147ca57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190614770565b506147d69291506147da565b5090565b5b808211156147d657600081556001016147db565b60006040828403121561480157600080fd5b614809614de3565b9050813567ffffffffffffffff81111561482257600080fd5b8201601f8101841361483357600080fd5b8035602061484861484383614e5b565b614e0c565b80838252828201915082850188848660051b880101111561486857600080fd5b600095505b8486101561489457803561488081614fe7565b83526001959095019491830191830161486d565b5085525093840135938301939093525092915050565b803561ffff811681146148bc57600080fd5b919050565b805169ffffffffffffffffffff811681146148bc57600080fd5b6000602082840312156148ed57600080fd5b813561457681614fe7565b60006020828403121561490a57600080fd5b815161457681614fe7565b60008060006060848603121561492a57600080fd5b833561493581614fe7565b9250602084013561494581614fe7565b929592945050506040919091013590565b600080600080600060a0868803121561496e57600080fd5b853561497981614fe7565b9450602086013561498981614fe7565b93506040860135925061499e606087016148aa565b91506149ac608087016148aa565b90509295509295909350565b600080600080606085870312156149ce57600080fd5b843567ffffffffffffffff808211156149e657600080fd5b818701915087601f8301126149fa57600080fd5b813581811115614a0957600080fd5b8860208260051b8501011115614a1e57600080fd5b6020928301999098509187013596604001359550909350505050565b60006020808385031215614a4d57600080fd5b825167ffffffffffffffff811115614a6457600080fd5b8301601f81018513614a7557600080fd5b8051614a8361484382614e5b565b80828252848201915084840188868560051b8701011115614aa357600080fd5b600094505b83851015614ac6578051835260019490940193918501918501614aa8565b50979650505050505050565b600060208284031215614ae457600080fd5b8151801515811461457657600080fd5b600060208284031215614b0657600080fd5b5035919050565b600060408284031215614b1f57600080fd5b6040516040810181811067ffffffffffffffff82111715614b4257614b42614fb8565b604052825181526020928301519281019290925250919050565b600060208284031215614b6e57600080fd5b5051919050565b60008060408385031215614b8857600080fd5b50508035926020909101359150565b60008060408385031215614baa57600080fd5b505080516020909101519092909150565b60008060008060808587031215614bd157600080fd5b8435935060208501359250604085013567ffffffffffffffff80821115614bf757600080fd5b614c03888389016147ef565b93506060870135915080821115614c1957600080fd5b50614c26878288016147ef565b91505092959194509250565b600080600060608486031215614c4757600080fd5b8351925060208401519150604084015190509250925092565b600080600080600060a08688031215614c7857600080fd5b614c81866148c1565b94506020860151935060408601519250606086015191506149ac608087016148c1565b60008151808452614cbc816020860160208601614f0e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251614d00818460208701614f0e565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff851681528360208201528260408201526080606082015260006137b36080830184614ca4565b6020815260006145766020830184614ca4565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015614db557845173ffffffffffffffffffffffffffffffffffffffff1683529383019391830191600101614d83565b505073ffffffffffffffffffffffffffffffffffffffff969096166060850152505050608001529392505050565b6040805190810167ffffffffffffffff81118282101715614e0657614e06614fb8565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715614e5357614e53614fb8565b604052919050565b600067ffffffffffffffff821115614e7557614e75614fb8565b5060051b60200190565b600082614eb5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614ef257614ef2614f5a565b500290565b600082821015614f0957614f09614f5a565b500390565b60005b83811015614f29578181015183820152602001614f11565b83811115612ab35750506000910152565b600060ff821660ff811415614f5157614f51614f5a565b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114612ed457600080fdfea164736f6c6343000806000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101985760003560e01c806388591b27116100e3578063b838d9141161008c578063db2e21bc11610066578063db2e21bc1461037d578063f2fde38b14610385578063f7c618c11461039857600080fd5b8063b838d9141461034f578063beabacc814610362578063d0e30db01461037557600080fd5b80639327d80a116100bd5780639327d80a146103215780639742b5c314610334578063b0e21e8a1461034757600080fd5b806388591b27146102dd5780638c3d8faf146102f05780638da5cb5b1461030357600080fd5b80634cf088d9116101455780635c975abb1161011f5780635c975abb1461029557806372f702f3146102ad5780638456cb59146102d557600080fd5b80634cf088d91461024a578063527a15651461026a578063590e1ae31461028d57600080fd5b8063370158ea11610176578063370158ea1461022a5780633e032a3b146102325780633f4ba83a1461024057600080fd5b806316f0115b1461019d57806324702944146101b957806329dcb0cf14610203575b600080fd5b6101a660055481565b6040519081526020015b60405180910390f35b6003546101de90610100900473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101b0565b6006546102179062010000900461ffff1681565b60405161ffff90911681526020016101b0565b6101de6103b8565b6006546102179061ffff1681565b61024861051a565b005b6004546101de9073ffffffffffffffffffffffffffffffffffffffff1681565b600954600a54610278919082565b604080519283526020830191909152016101b0565b6102486108b1565b61029d610c71565b60405190151581526020016101b0565b6006546101de90640100000000900473ffffffffffffffffffffffffffffffffffffffff1681565b610248610df6565b6102486102eb366004614bbb565b6111a0565b6102486102fe3660046149b8565b6117a7565b60015473ffffffffffffffffffffffffffffffffffffffff166101de565b61024861032f366004614b75565b6118d1565b610248610342366004614af4565b611cda565b6101a6611f14565b61024861035d366004614956565b612321565b610248610370366004614915565b612964565b610248612ab9565b610248612cc5565b6102486103933660046148db565b612ed7565b6007546101de9073ffffffffffffffffffffffffffffffffffffffff1681565b6040517f6b880718000000000000000000000000000000000000000000000000000000008152306004820152600090819073__$0fb85c1a108326fe5c0d8f2f5a241bc0e7$__90636b8807189060240160206040518083038186803b15801561042057600080fd5b505af4158015610434573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045891906148f8565b905073ffffffffffffffffffffffffffffffffffffffff811630141561049657505060005473ffffffffffffffffffffffffffffffffffffffff1690565b8073ffffffffffffffffffffffffffffffffffffffff1663370158ea6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104dc57600080fd5b505afa1580156104f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051491906148f8565b91505090565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482018190529073__$0fb85c1a108326fe5c0d8f2f5a241bc0e7$__90636b8807189060240160206040518083038186803b15801561058057600080fd5b505af4158015610594573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b891906148f8565b73ffffffffffffffffffffffffffffffffffffffff1614156107725760006105de6103b8565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf175974395600482015273ffffffffffffffffffffffffffffffffffffffff91909116906321f8a7219060240160206040518083038186803b15801561066557600080fd5b505afa158015610679573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069d91906148f8565b60015490915073ffffffffffffffffffffffffffffffffffffffff163314806106db57503373ffffffffffffffffffffffffffffffffffffffff8216145b61076c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b50610819565b60015473ffffffffffffffffffffffffffffffffffffffff163314610819576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f65720000000000000000000000000000000000000000000000000000000000006064820152608401610763565b610821610c71565b610887576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4175746f6d6174653a206e6f74207061757365640000000000000000000000006044820152606401610763565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055565b60015473ffffffffffffffffffffffffffffffffffffffff163314610958576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610763565b60045473ffffffffffffffffffffffffffffffffffffffff16600061099260015473ffffffffffffffffffffffffffffffffffffffff1690565b6005546040517f93f1a40b000000000000000000000000000000000000000000000000000000008152600481019190915230602482015290915060009073ffffffffffffffffffffffffffffffffffffffff8416906393f1a40b90604401604080518083038186803b158015610a0757600080fd5b505afa158015610a1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3f9190614b0d565b60055481516040517f441a3e700000000000000000000000000000000000000000000000000000000081526004810192909252602482015290915073ffffffffffffffffffffffffffffffffffffffff84169063441a3e7090604401600060405180830381600087803b158015610ab557600080fd5b505af1158015610ac9573d6000803e3d6000fd5b50506006546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152610ba4935085925064010000000090910473ffffffffffffffffffffffffffffffffffffffff16906370a08231906024015b60206040518083038186803b158015610b4457600080fd5b505afa158015610b58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7c9190614b5c565b600654640100000000900473ffffffffffffffffffffffffffffffffffffffff169190613136565b6007546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152610c6c91849173ffffffffffffffffffffffffffffffffffffffff909116906370a08231906024015b60206040518083038186803b158015610c1457600080fd5b505afa158015610c28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4c9190614b5c565b60075473ffffffffffffffffffffffffffffffffffffffff169190613136565b505050565b6040517f6b880718000000000000000000000000000000000000000000000000000000008152306004820152600090819073__$0fb85c1a108326fe5c0d8f2f5a241bc0e7$__90636b8807189060240160206040518083038186803b158015610cd957600080fd5b505af4158015610ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1191906148f8565b905073ffffffffffffffffffffffffffffffffffffffff8116301415610d5457505060015474010000000000000000000000000000000000000000900460ff1690565b60015474010000000000000000000000000000000000000000900460ff168061051457508073ffffffffffffffffffffffffffffffffffffffff16635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dbe57600080fd5b505afa158015610dd2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105149190614ad2565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482018190529073__$0fb85c1a108326fe5c0d8f2f5a241bc0e7$__90636b8807189060240160206040518083038186803b158015610e5c57600080fd5b505af4158015610e70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9491906148f8565b73ffffffffffffffffffffffffffffffffffffffff161415611049576000610eba6103b8565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf175974395600482015273ffffffffffffffffffffffffffffffffffffffff91909116906321f8a7219060240160206040518083038186803b158015610f4157600080fd5b505afa158015610f55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7991906148f8565b60015490915073ffffffffffffffffffffffffffffffffffffffff16331480610fb757503373ffffffffffffffffffffffffffffffffffffffff8216145b611043576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f65720000000000000000000000000000000000000000000000000000000000006064820152608401610763565b506110f0565b60015473ffffffffffffffffffffffffffffffffffffffff1633146110f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f65720000000000000000000000000000000000000000000000000000000000006064820152608401610763565b6110f8610c71565b1561115f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4175746f6d6174653a20706175736564000000000000000000000000000000006044820152606401610763565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055565b836040518060400160405280601f81526020017f50616e63616b65537761704d617374657243686566324c7052657374616b65008152506111e1828261320a565b50600480546003546005546040517f1175a1dd0000000000000000000000000000000000000000000000000000000081529384015230602484015273ffffffffffffffffffffffffffffffffffffffff91821692610100909104909116906000908390631175a1dd9060440160206040518083038186803b15801561126557600080fd5b505afa158015611279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129d9190614b5c565b11611329576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4d617374657243686566324c7052657374616b653a3a72756e3a206e6f20656160448201527f726e6564000000000000000000000000000000000000000000000000000000006064820152608401610763565b6005546040517fe2bbb15800000000000000000000000000000000000000000000000000000000815260048101919091526000602482015273ffffffffffffffffffffffffffffffffffffffff83169063e2bbb15890604401600060405180830381600087803b15801561139c57600080fd5b505af11580156113b0573d6000803e3d6000fd5b50506007546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000935073ffffffffffffffffffffffffffffffffffffffff90911691506370a082319060240160206040518083038186803b15801561142057600080fd5b505afa158015611434573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114589190614b5c565b60075490915061147f9073ffffffffffffffffffffffffffffffffffffffff1683836134dc565b6114b561148d600283614e7f565b6020890151895173ffffffffffffffffffffffffffffffffffffffff8616929190308d61366d565b506114f66114c4600283614e7f565b6114ce9083614ef7565b6020880151885173ffffffffffffffffffffffffffffffffffffffff8616929190308d61366d565b506000600660049054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061163d8173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561156757600080fd5b505afa15801561157b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159f91906148f8565b8273ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156115e557600080fd5b505afa1580156115f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161d91906148f8565b73ffffffffffffffffffffffffffffffffffffffff86169190308d6137bd565b50506040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000915073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b1580156116a857600080fd5b505afa1580156116bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e09190614b5c565b60065490915061170f90640100000000900473ffffffffffffffffffffffffffffffffffffffff1686836134dc565b6005546040517fe2bbb15800000000000000000000000000000000000000000000000000000000815260048101919091526024810182905273ffffffffffffffffffffffffffffffffffffffff86169063e2bbb15890604401600060405180830381600087803b15801561178257600080fd5b505af1158015611796573d6000803e3d6000fd5b505050505050505050505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461184e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610763565b604051806060016040528085858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050509082525060208082018590526040909101839052815180516008926118b4928492910190614750565b506020820151600182015560409091015160029091015550505050565b816040518060400160405280602081526020017f50616e63616b65537761704d617374657243686566324c7053746f704c6f7373815250611912828261320a565b50600480546005546040517f93f1a40b00000000000000000000000000000000000000000000000000000000815292830181905230602484015273ffffffffffffffffffffffffffffffffffffffff9091169163441a3e70919083906393f1a40b90604401604080518083038186803b15801561198e57600080fd5b505afa1580156119a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c69190614b0d565b5160405160e084901b7fffffffff0000000000000000000000000000000000000000000000000000000016815260048101929092526024820152604401600060405180830381600087803b158015611a1d57600080fd5b505af1158015611a31573d6000803e3d6000fd5b505060065460035460009350839250611a739161010090910473ffffffffffffffffffffffffffffffffffffffff908116916401000000009004163088613a32565b5050604080516002808252606082018352939550919350600092906020830190803683370190505090508281600081518110611ab157611ab1614f89565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508181600181518110611aff57611aff614f89565b73ffffffffffffffffffffffffffffffffffffffff9283166020918202929092010152600354611b39916008916101009004168389613cda565b6000611b5a60015473ffffffffffffffffffffffffffffffffffffffff1690565b60088054919250600091611b7090600190614ef7565b81548110611b8057611b80614f89565b6000918252602090912001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9091169150611c5190839083906370a082319060240160206040518083038186803b158015611bfb57600080fd5b505afa158015611c0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c339190614b5c565b73ffffffffffffffffffffffffffffffffffffffff84169190613136565b60075473ffffffffffffffffffffffffffffffffffffffff828116911614611ccf576007546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152611ccf91849173ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401610bfc565b505050505050505050565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482015260009073__$0fb85c1a108326fe5c0d8f2f5a241bc0e7$__90636b8807189060240160206040518083038186803b158015611d4057600080fd5b505af4158015611d54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7891906148f8565b90503373ffffffffffffffffffffffffffffffffffffffff82163014611e1b578173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611dde57600080fd5b505afa158015611df2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1691906148f8565b611e35565b60015473ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff1614611ed8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603d60248201527f4175746f6d6174653a3a6368616e676550726f746f636f6c4665653a2063616c60448201527f6c6572206973206e6f74207468652070726f746f636f6c206f776e65720000006064820152608401610763565b60028290556040518281527f3c1d43943224e49d951ce8295a5c8332b517083b3f89bed50feae2cb39caebb59060200160405180910390a15050565b6040517f6b880718000000000000000000000000000000000000000000000000000000008152306004820152600090819073__$0fb85c1a108326fe5c0d8f2f5a241bc0e7$__90636b8807189060240160206040518083038186803b158015611f7c57600080fd5b505af4158015611f90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb491906148f8565b905073ffffffffffffffffffffffffffffffffffffffff81163014801590611fde57506000600254125b15612061578073ffffffffffffffffffffffffffffffffffffffff1663b0e21e8a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561202957600080fd5b505afa15801561203d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105149190614b5c565b600061206b6103b8565b9050600080600254126120805760025461213d565b6040517fbd02d0f50000000000000000000000000000000000000000000000000000000081527fa93d95f96a5de25d7a41ddf1f5e8d45cfc929c4838163cf011dab4043a4a40d5600482015273ffffffffffffffffffffffffffffffffffffffff83169063bd02d0f59060240160206040518083038186803b15801561210557600080fd5b505afa158015612119573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213d9190614b5c565b90508061214e576000935050505090565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f65c90423fe7c880476633a7e36521740f87199d233dc56eb4ca6643eb76f605f600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906321f8a7219060240160206040518083038186803b1580156121d657600080fd5b505afa1580156121ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220e91906148f8565b73ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561225357600080fd5b505afa158015612267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228b9190614c60565b505050915050600081136122fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4175746f6d6174653a20696e76616c69642070726963650000000000000000006044820152606401610763565b8061230e83670de0b6b3a7640000614eba565b6123189190614e7f565b94505050505090565b60015473ffffffffffffffffffffffffffffffffffffffff1661239157600180547fffffffffffffffffffffffff000000000000000000000000000000000000000016321790557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600255612438565b60015473ffffffffffffffffffffffffffffffffffffffff163314612438576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610763565b60035460ff161580612464575060045473ffffffffffffffffffffffffffffffffffffffff8681169116145b612516576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f4d617374657243686566324c7052657374616b653a3a696e69743a207265696e60448201527f697469616c697a65207374616b696e67206164647265737320666f726269646460648201527f656e000000000000000000000000000000000000000000000000000000000000608482015260a401610763565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff871617905560035460ff161580612587575060035473ffffffffffffffffffffffffffffffffffffffff85811661010090920416145b612639576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604b60248201527f4d617374657243686566324c7052657374616b653a3a696e69743a207265696e60448201527f697469616c697a65206c697175696469747920726f757465722061646472657360648201527f7320666f7262696464656e000000000000000000000000000000000000000000608482015260a401610763565b6003805473ffffffffffffffffffffffffffffffffffffffff8616610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff8216811790925560ff9182169116171580612695575082600554145b612721576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603d60248201527f4d617374657243686566324c7052657374616b653a3a696e69743a207265696e60448201527f697469616c697a6520706f6f6c20696e64657820666f7262696464656e0000006064820152608401610763565b60058390556006805461ffff83811662010000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000009092169085161717905560035460ff1661293257600480546005546040517f78ed5d1f0000000000000000000000000000000000000000000000000000000081529283015260009173ffffffffffffffffffffffffffffffffffffffff909116906378ed5d1f9060240160206040518083038186803b1580156127d857600080fd5b505afa1580156127ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061281091906148f8565b6006805473ffffffffffffffffffffffffffffffffffffffff808416640100000000027fffffffffffffffff0000000000000000000000000000000000000000ffffffff9092169190911790915560048054604080517f4ca6ef280000000000000000000000000000000000000000000000000000000081529051949550921692634ca6ef28928083019260209291829003018186803b1580156128b357600080fd5b505afa1580156128c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128eb91906148f8565b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055505b5050600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314612a0b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610763565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b158015612a7b57600080fd5b505af1158015612a8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ab39190614ad2565b50505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314612b60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610763565b6006546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015264010000000090910473ffffffffffffffffffffffffffffffffffffffff169060009082906370a082319060240160206040518083038186803b158015612bd557600080fd5b505afa158015612be9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c0d9190614b5c565b600454909150612c379073ffffffffffffffffffffffffffffffffffffffff8481169116836134dc565b600480546005546040517fe2bbb158000000000000000000000000000000000000000000000000000000008152928301526024820183905273ffffffffffffffffffffffffffffffffffffffff169063e2bbb15890604401600060405180830381600087803b158015612ca957600080fd5b505af1158015612cbd573d6000803e3d6000fd5b505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314612d6c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610763565b6000612d8d60015473ffffffffffffffffffffffffffffffffffffffff1690565b600480546005546040517f5312ea8e0000000000000000000000000000000000000000000000000000000081529283015291925073ffffffffffffffffffffffffffffffffffffffff90911690635312ea8e90602401600060405180830381600087803b158015612dfd57600080fd5b505af1158015612e11573d6000803e3d6000fd5b50506006546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152612e78935084925064010000000090910473ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401610b2c565b6007546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152612ed491839173ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401610bfc565b50565b60015473ffffffffffffffffffffffffffffffffffffffff163314612f7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610763565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482018190529073__$0fb85c1a108326fe5c0d8f2f5a241bc0e7$__90636b8807189060240160206040518083038186803b158015612fe457600080fd5b505af4158015612ff8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301c91906148f8565b73ffffffffffffffffffffffffffffffffffffffff16146130bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a206368616e676520746865206f776e6572206661696c6560448201527f64000000000000000000000000000000000000000000000000000000000000006064820152608401610763565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610c6c9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152614458565b6000613214610c71565b1561327b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4175746f6d6174653a20706175736564000000000000000000000000000000006044820152606401610763565b600061329c60015473ffffffffffffffffffffffffffffffffffffffff1690565b90503273ffffffffffffffffffffffffffffffffffffffff821614156132c65760009150506134d6565b60006132d06103b8565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527fe78c16c6d839536d3155985aab4e9c6013c8c3d446054bcebc48612f359d81f5600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906321f8a7219060240160206040518083038186803b15801561335b57600080fd5b505afa15801561336f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061339391906148f8565b905073ffffffffffffffffffffffffffffffffffffffff8116613438576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f4175746f6d6174653a3a5f62696c6c3a2062616c616e636520636f6e7472616360448201527f74206e6f7420666f756e640000000000000000000000000000000000000000006064820152608401610763565b8073ffffffffffffffffffffffffffffffffffffffff1663e578a225848861345e611f14565b896040518563ffffffff1660e01b815260040161347e9493929190614d0a565b602060405180830381600087803b15801561349857600080fd5b505af11580156134ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134d09190614b5c565b93505050505b92915050565b80158061358b57506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561355157600080fd5b505afa158015613565573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135899190614b5c565b155b613617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610763565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610c6c9084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401613188565b6060836001855161367e9190614ef7565b8151811061368e5761368e614f89565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16846000815181106136bf576136bf614f89565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146137b3576040517f38ed173900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8816906338ed17399061373c9089908990899089908990600401614d58565b600060405180830381600087803b15801561375657600080fd5b505af115801561376a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526137b09190810190614a3a565b90505b9695505050505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009081908190819073ffffffffffffffffffffffffffffffffffffffff8916906370a082319060240160206040518083038186803b15801561382b57600080fd5b505afa15801561383f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138639190614b5c565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8916906370a082319060240160206040518083038186803b1580156138ce57600080fd5b505afa1580156138e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139069190614b5c565b905061392973ffffffffffffffffffffffffffffffffffffffff8a168b846134dc565b61394a73ffffffffffffffffffffffffffffffffffffffff89168b836134dc565b6040517fe8e3370000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a811660048301528981166024830152604482018490526064820183905260006084830181905260a483015288811660c483015260e482018890528b169063e8e337009061010401606060405180830381600087803b1580156139e757600080fd5b505af11580156139fb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a1f9190614c32565b9450945094505050955095509592505050565b6000806000808673ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015613a7e57600080fd5b505afa158015613a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ab691906148f8565b93508673ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015613afe57600080fd5b505afa158015613b12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b3691906148f8565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290935060009073ffffffffffffffffffffffffffffffffffffffff8916906370a082319060240160206040518083038186803b158015613ba157600080fd5b505afa158015613bb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bd99190614b5c565b9050613bfc73ffffffffffffffffffffffffffffffffffffffff89168a836134dc565b6040517fbaa2abde00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152858116602483015260448201839052600060648301819052608483015288811660a483015260c482018890528a169063baa2abde9060e4016040805180830381600087803b158015613c9057600080fd5b505af1158015613ca4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cc89190614b97565b959a9499509750939550919350505050565b83546001108015613cef575060008460010154115b613d7b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f53746f704c6f73733a3a72756e3a2073746f70206c6f73732064697361626c6560448201527f64000000000000000000000000000000000000000000000000000000000000006064820152608401610763565b61010082511115613e0e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f53746f704c6f73733a3a72756e3a20746f6f206d616e7920696e20746f6b656e60448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610763565b60005b82518160ff161015614063576000838260ff1681518110613e3457613e34614f89565b6020026020010151905085600001600081548110613e5457613e54614f89565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff82811691161415613e865750614051565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b158015613eee57600080fd5b505afa158015613f02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f269190614b5c565b905080613f34575050614051565b6040805160028082526060820183526000926020830190803683370190505090508281600081518110613f6957613f69614f89565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505087600001600081548110613fb957613fb9614f89565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600181518110613ff757613ff7614f89565b73ffffffffffffffffffffffffffffffffffffffff928316602091820292909201015261402790841688846134dc565b61404c73ffffffffffffffffffffffffffffffffffffffff881683600084308a61366d565b505050505b8061405b81614f3a565b915050613e11565b5060008460000160008154811061407c5761407c614f89565b60009182526020822001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116925082906370a082319060240160206040518083038186803b1580156140f057600080fd5b505afa158015614104573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141289190614b5c565b8654909150600090879061413e90600190614ef7565b8154811061414e5761414e614f89565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff8481169116146143865760008211614209576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f53746f704c6f73733a3a72756e3a20696e73756666696369656e742062616c6160448201527f6e6365206f66206261736520746f6b656e0000000000000000000000000000006064820152608401610763565b61422a73ffffffffffffffffffffffffffffffffffffffff841687846134dc565b60006142c28389600201548a60000180548060200260200160405190810160405280929190818152602001828054801561429a57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161426f575b50505073ffffffffffffffffffffffffffffffffffffffff8d1694939291503090508a61366d565b905080600182516142d39190614ef7565b815181106142e3576142e3614f89565b602002602001015191508760010154821115614380576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f53746f704c6f73733a3a72756e3a20696e76616c6964206f757470757420616d60448201527f6f756e74000000000000000000000000000000000000000000000000000000006064820152608401610763565b5061441c565b819050866001015481111561441c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f53746f704c6f73733a3a72756e3a20696e76616c6964206f757470757420616d60448201527f6f756e74000000000000000000000000000000000000000000000000000000006064820152608401610763565b6040518181527ff22ed879bd57fced893edba2366c8143c0d7c2e585eafd2521c2832159d557f19060200160405180910390a150505050505050565b60006144ba826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166145649092919063ffffffff16565b805190915015610c6c57808060200190518101906144d89190614ad2565b610c6c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610763565b6060614573848460008561457d565b90505b9392505050565b60608247101561460f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610763565b843b614677576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610763565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516146a09190614cee565b60006040518083038185875af1925050503d80600081146146dd576040519150601f19603f3d011682016040523d82523d6000602084013e6146e2565b606091505b50915091506146f28282866146fd565b979650505050505050565b6060831561470c575081614576565b82511561471c5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107639190614d45565b8280548282559060005260206000209081019282156147ca579160200282015b828111156147ca57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190614770565b506147d69291506147da565b5090565b5b808211156147d657600081556001016147db565b60006040828403121561480157600080fd5b614809614de3565b9050813567ffffffffffffffff81111561482257600080fd5b8201601f8101841361483357600080fd5b8035602061484861484383614e5b565b614e0c565b80838252828201915082850188848660051b880101111561486857600080fd5b600095505b8486101561489457803561488081614fe7565b83526001959095019491830191830161486d565b5085525093840135938301939093525092915050565b803561ffff811681146148bc57600080fd5b919050565b805169ffffffffffffffffffff811681146148bc57600080fd5b6000602082840312156148ed57600080fd5b813561457681614fe7565b60006020828403121561490a57600080fd5b815161457681614fe7565b60008060006060848603121561492a57600080fd5b833561493581614fe7565b9250602084013561494581614fe7565b929592945050506040919091013590565b600080600080600060a0868803121561496e57600080fd5b853561497981614fe7565b9450602086013561498981614fe7565b93506040860135925061499e606087016148aa565b91506149ac608087016148aa565b90509295509295909350565b600080600080606085870312156149ce57600080fd5b843567ffffffffffffffff808211156149e657600080fd5b818701915087601f8301126149fa57600080fd5b813581811115614a0957600080fd5b8860208260051b8501011115614a1e57600080fd5b6020928301999098509187013596604001359550909350505050565b60006020808385031215614a4d57600080fd5b825167ffffffffffffffff811115614a6457600080fd5b8301601f81018513614a7557600080fd5b8051614a8361484382614e5b565b80828252848201915084840188868560051b8701011115614aa357600080fd5b600094505b83851015614ac6578051835260019490940193918501918501614aa8565b50979650505050505050565b600060208284031215614ae457600080fd5b8151801515811461457657600080fd5b600060208284031215614b0657600080fd5b5035919050565b600060408284031215614b1f57600080fd5b6040516040810181811067ffffffffffffffff82111715614b4257614b42614fb8565b604052825181526020928301519281019290925250919050565b600060208284031215614b6e57600080fd5b5051919050565b60008060408385031215614b8857600080fd5b50508035926020909101359150565b60008060408385031215614baa57600080fd5b505080516020909101519092909150565b60008060008060808587031215614bd157600080fd5b8435935060208501359250604085013567ffffffffffffffff80821115614bf757600080fd5b614c03888389016147ef565b93506060870135915080821115614c1957600080fd5b50614c26878288016147ef565b91505092959194509250565b600080600060608486031215614c4757600080fd5b8351925060208401519150604084015190509250925092565b600080600080600060a08688031215614c7857600080fd5b614c81866148c1565b94506020860151935060408601519250606086015191506149ac608087016148c1565b60008151808452614cbc816020860160208601614f0e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251614d00818460208701614f0e565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff851681528360208201528260408201526080606082015260006137b36080830184614ca4565b6020815260006145766020830184614ca4565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015614db557845173ffffffffffffffffffffffffffffffffffffffff1683529383019391830191600101614d83565b505073ffffffffffffffffffffffffffffffffffffffff969096166060850152505050608001529392505050565b6040805190810167ffffffffffffffff81118282101715614e0657614e06614fb8565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715614e5357614e53614fb8565b604052919050565b600067ffffffffffffffff821115614e7557614e75614fb8565b5060051b60200190565b600082614eb5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614ef257614ef2614f5a565b500290565b600082821015614f0957614f09614f5a565b500390565b60005b83811015614f29578181015183820152602001614f11565b83811115612ab35750506000910152565b600060ff821660ff811415614f5157614f51614f5a565b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114612ed457600080fdfea164736f6c6343000806000a",
  "libraries": {
    "ERC1167": "0x10bBA4e8A2f6F85B75cd75ef773f5Daca5596C87"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "changeProtocolFee(int256)": {
        "params": {
          "__protocolFee": "New protocol fee."
        }
      },
      "protocolFee()": {
        "returns": {
          "_0": "Current protocol fee."
        }
      },
      "transfer(address,address,uint256)": {
        "params": {
          "amount": "Transferred amount of tokens.",
          "recipient": "Token recipient address.",
          "token": "The address of the token to be transferred."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeProtocolFee(int256)": {
        "notice": "Change protocol fee."
      },
      "info()": {
        "notice": "Returns address of Storage contract."
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "pause()": {
        "notice": "Pause contract."
      },
      "paused()": {
        "notice": "Returns true if the contract is paused, and false otherwise."
      },
      "transfer(address,address,uint256)": {
        "notice": "Transfer ERC20 token to recipient."
      },
      "unpause()": {
        "notice": "Unpause contract."
      }
    },
    "notice": "Use with LP token only.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3822,
        "contract": "contracts/MasterChef2LpRestake.automate.sol:MasterChef2LpRestake",
        "label": "_info",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3825,
        "contract": "contracts/MasterChef2LpRestake.automate.sol:MasterChef2LpRestake",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3828,
        "contract": "contracts/MasterChef2LpRestake.automate.sol:MasterChef2LpRestake",
        "label": "_paused",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 3831,
        "contract": "contracts/MasterChef2LpRestake.automate.sol:MasterChef2LpRestake",
        "label": "_protocolFee",
        "offset": 0,
        "slot": "2",
        "type": "t_int256"
      },
      {
        "astId": 3834,
        "contract": "contracts/MasterChef2LpRestake.automate.sol:MasterChef2LpRestake",
        "label": "_initialized",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 993,
        "contract": "contracts/MasterChef2LpRestake.automate.sol:MasterChef2LpRestake",
        "label": "liquidityRouter",
        "offset": 1,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 996,
        "contract": "contracts/MasterChef2LpRestake.automate.sol:MasterChef2LpRestake",
        "label": "staking",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IMasterChef2)913"
      },
      {
        "astId": 998,
        "contract": "contracts/MasterChef2LpRestake.automate.sol:MasterChef2LpRestake",
        "label": "pool",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1000,
        "contract": "contracts/MasterChef2LpRestake.automate.sol:MasterChef2LpRestake",
        "label": "slippage",
        "offset": 0,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 1002,
        "contract": "contracts/MasterChef2LpRestake.automate.sol:MasterChef2LpRestake",
        "label": "deadline",
        "offset": 2,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 1005,
        "contract": "contracts/MasterChef2LpRestake.automate.sol:MasterChef2LpRestake",
        "label": "stakingToken",
        "offset": 4,
        "slot": "6",
        "type": "t_contract(IERC20)227"
      },
      {
        "astId": 1008,
        "contract": "contracts/MasterChef2LpRestake.automate.sol:MasterChef2LpRestake",
        "label": "rewardToken",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20)227"
      },
      {
        "astId": 1011,
        "contract": "contracts/MasterChef2LpRestake.automate.sol:MasterChef2LpRestake",
        "label": "stopLoss",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Order)5412_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)227": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMasterChef2)913": {
        "encoding": "inplace",
        "label": "contract IMasterChef2",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_struct(Order)5412_storage": {
        "encoding": "inplace",
        "label": "struct StopLoss.Order",
        "members": [
          {
            "astId": 5407,
            "contract": "contracts/MasterChef2LpRestake.automate.sol:MasterChef2LpRestake",
            "label": "path",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 5409,
            "contract": "contracts/MasterChef2LpRestake.automate.sol:MasterChef2LpRestake",
            "label": "amountOut",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5411,
            "contract": "contracts/MasterChef2LpRestake.automate.sol:MasterChef2LpRestake",
            "label": "amountOutMin",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
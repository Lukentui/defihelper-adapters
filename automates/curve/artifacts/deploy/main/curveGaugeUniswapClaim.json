{
  "address": "0x7e9860743F5D97828A71Fe2c7FA0d3dabebf19Ec",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_info",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "protocolFee",
          "type": "int256"
        }
      ],
      "name": "ProtocolFeeChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "__protocolFee",
          "type": "int256"
        }
      ],
      "name": "changeProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deadline",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "info",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidityRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapToken",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_slippage",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_deadline",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gasFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapOutMin",
          "type": "uint256"
        }
      ],
      "name": "run",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippage",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract IGauge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6c48dccb695496c7237d570b91a97056132b855f65281a0ad8aca3ee8e9600bb",
  "receipt": {
    "to": null,
    "from": "0xBB73463b88b0Cb9681f176d6D43a12C2FeA2c237",
    "contractAddress": "0x7e9860743F5D97828A71Fe2c7FA0d3dabebf19Ec",
    "transactionIndex": 90,
    "gasUsed": "3294114",
    "logsBloom": "0x
    "blockHash": "0x0b2396fac3836d428904312a6a7c251e9bf6f254de0dfd2bca8e2ed28b372103",
    "transactionHash": "0x6c48dccb695496c7237d570b91a97056132b855f65281a0ad8aca3ee8e9600bb",
    "logs": [],
    "blockNumber": 15045072,
    "cumulativeGasUsed": "9161873",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5AE235502Bf1de231AfD75364670d50e3C3694A6"
  ],
  "numDeployments": 1,
  "solcInputHash": "92132abc5c5425ca08a811be8b03f9c0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_info\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"protocolFee\",\"type\":\"int256\"}],\"name\":\"ProtocolFeeChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"__protocolFee\",\"type\":\"int256\"}],\"name\":\"changeProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadline\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"info\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_slippage\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_deadline\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapOutMin\",\"type\":\"uint256\"}],\"name\":\"run\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IGauge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"changeProtocolFee(int256)\":{\"params\":{\"__protocolFee\":\"New protocol fee.\"}},\"protocolFee()\":{\"returns\":{\"_0\":\"Current protocol fee.\"}},\"transfer(address,address,uint256)\":{\"params\":{\"amount\":\"Transferred amount of tokens.\",\"recipient\":\"Token recipient address.\",\"token\":\"The address of the token to be transferred.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeProtocolFee(int256)\":{\"notice\":\"Change protocol fee.\"},\"info()\":{\"notice\":\"Returns address of Storage contract.\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"pause()\":{\"notice\":\"Pause contract.\"},\"paused()\":{\"notice\":\"Returns true if the contract is paused, and false otherwise.\"},\"transfer(address,address,uint256)\":{\"notice\":\"Transfer ERC20 token to recipient.\"},\"unpause()\":{\"notice\":\"Unpause contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GaugeUniswapClaim.automate.sol\":\"GaugeUniswapClaim\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/GaugeUniswapClaim.automate.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./utils/DFH/Automate.sol\\\";\\nimport \\\"./utils/Curve/IRegistry.sol\\\";\\nimport \\\"./utils/Curve/IGauge.sol\\\";\\nimport \\\"./utils/Curve/IMinter.sol\\\";\\nimport \\\"./utils/Curve/IPlainPool.sol\\\";\\nimport \\\"./utils/Curve/IMetaPool.sol\\\";\\nimport \\\"./utils/Uniswap/IUniswapV2Router02.sol\\\";\\nimport {ERC20Tools} from \\\"./utils/ERC20Tools.sol\\\";\\n\\n// solhint-disable not-rely-on-time\\ncontract GaugeUniswapClaim is Automate {\\n  using ERC20Tools for IERC20;\\n\\n  IGauge public staking;\\n\\n  address public liquidityRouter;\\n\\n  address public swapToken;\\n\\n  uint16 public slippage;\\n\\n  uint16 public deadline;\\n\\n  address public recipient;\\n\\n  IERC20 internal _lpToken;\\n\\n  address internal _pool;\\n\\n  uint8 internal _swapTokenN;\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor(address _info) Automate(_info) {}\\n\\n  function init(\\n    address _staking,\\n    address _liquidityRouter,\\n    address _swapToken,\\n    uint16 _slippage,\\n    uint16 _deadline,\\n    address _recipient\\n  ) external initializer {\\n    require(\\n      !_initialized || address(staking) == _staking,\\n      \\\"GaugeUniswapRestake::init: reinitialize staking address forbidden\\\"\\n    );\\n    staking = IGauge(_staking);\\n    require(\\n      !_initialized || liquidityRouter == _liquidityRouter,\\n      \\\"GaugeUniswapRestake::init: reinitialize liquidity router address forbidden\\\"\\n    );\\n    liquidityRouter = _liquidityRouter;\\n    swapToken = _swapToken;\\n    slippage = _slippage;\\n    deadline = _deadline;\\n    recipient = _recipient;\\n\\n    if (!_initialized) {\\n      IRegistry registry = IRegistry(_registry());\\n      _lpToken = IERC20(staking.lp_token());\\n      _pool = registry.get_pool_from_lp_token(address(_lpToken));\\n      address[8] memory coins = registry.get_coins(_pool);\\n      uint256 nCoinsPool = registry.get_n_coins(_pool);\\n\\n      for (; _swapTokenN <= nCoinsPool; _swapTokenN++) {\\n        require(_swapTokenN < nCoinsPool, \\\"GaugeUniswapRestake::init: invalid swap token address\\\");\\n        if (coins[_swapTokenN] == _swapToken) break;\\n      }\\n    }\\n  }\\n\\n  function _registry() internal view returns (address) {\\n    return IStorage(info()).getAddress(keccak256(\\\"Curve:Contract:Registry\\\"));\\n  }\\n\\n  function deposit() external onlyOwner {\\n    IERC20 lpToken = _lpToken; // gas optimisation\\n    uint256 balance = lpToken.balanceOf(address(this));\\n    lpToken.safeApprove(address(staking), balance);\\n    staking.deposit(balance);\\n  }\\n\\n  function refund() external onlyOwner {\\n    address __owner = owner(); // gas optimisation\\n\\n    IGauge _staking = staking; // gas optimisation\\n    uint256 stakingBalance = _staking.balanceOf(address(this));\\n    if (stakingBalance > 0) {\\n      _staking.withdraw(stakingBalance);\\n    }\\n    uint256 lpBalance = _lpToken.balanceOf(address(this));\\n    if (lpBalance > 0) {\\n      _lpToken.transfer(__owner, lpBalance);\\n    }\\n\\n    IMinter _minter = IMinter(staking.minter());\\n    _minter.mint(address(_staking));\\n\\n    IERC20 rewardToken = IERC20(_staking.crv_token());\\n    uint256 rewardBalance = rewardToken.balanceOf(address(this));\\n    if (rewardBalance > 0) {\\n      rewardToken.transfer(__owner, rewardBalance);\\n    }\\n  }\\n\\n  function run(\\n    uint256 gasFee,\\n    uint256 _deadline,\\n    uint256 swapOutMin\\n  ) external bill(gasFee, \\\"CurveGaugeUniswapClaim\\\") {\\n    IGauge _staking = staking; // gas optimization\\n    IERC20 _swapToken = IERC20(swapToken);\\n\\n    IMinter _minter = IMinter(_staking.minter());\\n    _minter.mint(address(_staking));\\n    address rewardToken = _staking.crv_token();\\n    uint256 rewardAmount = IERC20(rewardToken).balanceOf(address(this));\\n\\n    address[] memory _path = new address[](2);\\n    _path[0] = rewardToken;\\n    _path[1] = address(_swapToken);\\n    IERC20(rewardToken).safeApprove(liquidityRouter, rewardAmount);\\n    IUniswapV2Router02(liquidityRouter).swapExactTokensForTokens(\\n      rewardAmount,\\n      swapOutMin,\\n      _path,\\n      address(this),\\n      _deadline\\n    );\\n\\n    _swapToken.transfer(recipient, _swapToken.balanceOf(address(this)));\\n  }\\n}\\n\",\"keccak256\":\"0x25a67e912e0eafeab36831fd383e3db120dedb6ea649a3642080568de8910a5f\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/Curve/IGauge.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IGauge {\\n  function minter() external view returns (address);\\n\\n  function crv_token() external view returns (address);\\n\\n  function lp_token() external view returns (address);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function deposit(uint256 amount) external;\\n\\n  function deposit(uint256 amount, address recipient) external;\\n\\n  function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xc1ea3ca660ada35e566bd2516c4c8feec4df39d3fdf57e48be73e321fecc9fa9\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/Curve/IMetaPool.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IMetaPool {\\n  function calc_token_amount(uint256[2] memory amounts, bool isDeposit) external view returns (uint256);\\n\\n  function add_liquidity(uint256[2] memory amounts, uint256 minMint) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xdfaece589a5103cc7318bcad550c5a94c2f96e42a3bfcf101b2ee5d44553399a\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/Curve/IMinter.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IMinter {\\n  function minted(address wallet, address gauge) external view returns (uint256);\\n\\n  function mint(address gauge) external;\\n}\\n\",\"keccak256\":\"0x2ee0212e34008af7a45a3c19bfe788f86244bf439452400f45c873f4e18435d0\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/Curve/IPlainPool.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IPlainPool {\\n  function calc_token_amount(uint256[3] memory amounts, bool isDeposit) external view returns (uint256);\\n\\n  function add_liquidity(uint256[3] memory amounts, uint256 minMint) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x59665644c4bd62a6c1fcddaf0b0de070682a66cfc53aa22b110f797d8a450c31\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/Curve/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IRegistry {\\n  function get_n_coins(address pool) external view returns (uint256);\\n\\n  function get_coins(address pool) external view returns (address[8] memory);\\n\\n  function get_pool_from_lp_token(address) external view returns (address);\\n}\\n\",\"keccak256\":\"0x60f6e6c505239f0b694e9e7be9a5dff413f022ac064356cf4271189ad0484613\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/DFH/Automate.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./proxy/ERC1167.sol\\\";\\nimport \\\"./IStorage.sol\\\";\\nimport \\\"./IBalance.sol\\\";\\n\\n// solhint-disable avoid-tx-origin\\nabstract contract Automate {\\n  using ERC1167 for address;\\n\\n  /// @notice Storage contract address.\\n  address internal _info;\\n\\n  /// @notice Contract owner.\\n  address internal _owner;\\n\\n  /// @notice Is contract paused.\\n  bool internal _paused;\\n\\n  /// @notice Protocol fee in USD (-1 if value in global storage).\\n  int256 internal _protocolFee;\\n\\n  /// @notice Is contract already initialized.\\n  bool internal _initialized;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  event ProtocolFeeChanged(int256 protocolFee);\\n\\n  constructor(address __info) {\\n    _info = __info;\\n    _owner = tx.origin;\\n    _protocolFee = -1;\\n  }\\n\\n  /**\\n   * @notice Returns address of Storage contract.\\n   */\\n  function info() public view returns (address) {\\n    address impl = address(this).implementation();\\n    if (impl == address(this)) return _info;\\n\\n    return Automate(impl).info();\\n  }\\n\\n  /// @dev Modifier to protect an initializer function from being invoked twice.\\n  modifier initializer() {\\n    if (_owner == address(0)) {\\n      _owner = tx.origin;\\n      _protocolFee = -1;\\n    } else {\\n      require(_owner == msg.sender, \\\"Automate: caller is not the owner\\\");\\n    }\\n    _;\\n    _initialized = true;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(_owner == msg.sender, \\\"Automate: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external onlyOwner {\\n    require(address(this).implementation() == address(this), \\\"Automate: change the owner failed\\\");\\n\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the pauser.\\n   */\\n  modifier onlyPauser() {\\n    if (address(this).implementation() == address(this)) {\\n      address pauser = IStorage(info()).getAddress(keccak256(\\\"DFH:Pauser\\\"));\\n      require(msg.sender == _owner || msg.sender == pauser, \\\"Automate: caller is not the pauser\\\");\\n    } else {\\n      require(msg.sender == _owner, \\\"Automate: caller is not the pauser\\\");\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice Returns true if the contract is paused, and false otherwise.\\n   */\\n  function paused() public view returns (bool) {\\n    address impl = address(this).implementation();\\n    if (impl == address(this)) return _paused;\\n\\n    return _paused || Automate(impl).paused();\\n  }\\n\\n  /**\\n   * @dev Throws if contract unpaused.\\n   */\\n  modifier whenPaused() {\\n    require(paused(), \\\"Automate: not paused\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Throws if contract paused.\\n   */\\n  modifier whenNotPaused() {\\n    require(!paused(), \\\"Automate: paused\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Pause contract.\\n   */\\n  function pause() external onlyPauser whenNotPaused {\\n    _paused = true;\\n  }\\n\\n  /**\\n   * @notice Unpause contract.\\n   */\\n  function unpause() external onlyPauser whenPaused {\\n    _paused = false;\\n  }\\n\\n  /**\\n   * @return Current protocol fee.\\n   */\\n  function protocolFee() public view returns (uint256) {\\n    address impl = address(this).implementation();\\n    if (impl != address(this) && _protocolFee < 0) {\\n      return Automate(impl).protocolFee();\\n    }\\n\\n    IStorage __info = IStorage(info());\\n    uint256 feeOnUSD = _protocolFee < 0 ? __info.getUint(keccak256(\\\"DFH:Fee:Automate\\\")) : uint256(_protocolFee);\\n    if (feeOnUSD == 0) return 0;\\n\\n    (, int256 price, , , ) = AggregatorV3Interface(__info.getAddress(keccak256(\\\"DFH:Fee:PriceFeed\\\"))).latestRoundData();\\n    require(price > 0, \\\"Automate: invalid price\\\");\\n\\n    return (feeOnUSD * 1e18) / uint256(price);\\n  }\\n\\n  /**\\n   * @notice Change protocol fee.\\n   * @param __protocolFee New protocol fee.\\n   */\\n  function changeProtocolFee(int256 __protocolFee) external {\\n    address impl = address(this).implementation();\\n    require(\\n      (impl == address(this) ? _owner : Automate(impl).owner()) == msg.sender,\\n      \\\"Automate::changeProtocolFee: caller is not the protocol owner\\\"\\n    );\\n\\n    _protocolFee = __protocolFee;\\n    emit ProtocolFeeChanged(__protocolFee);\\n  }\\n\\n  /**\\n   * @dev Claim fees from owner.\\n   * @param gasFee Claim gas fee.\\n   * @param operation Claim description.\\n   */\\n  function _bill(uint256 gasFee, string memory operation) internal whenNotPaused returns (uint256) {\\n    address account = owner(); // gas optimisation\\n    if (tx.origin == account) return 0; // free if called by the owner\\n\\n    IStorage __info = IStorage(info());\\n\\n    address balance = __info.getAddress(keccak256(\\\"DFH:Contract:Balance\\\"));\\n    require(balance != address(0), \\\"Automate::_bill: balance contract not found\\\");\\n\\n    return IBalance(balance).claim(account, gasFee, protocolFee(), operation);\\n  }\\n\\n  /**\\n   * @dev Claim fees from owner.\\n   * @param gasFee Claim gas fee.\\n   * @param operation Claim description.\\n   */\\n  modifier bill(uint256 gasFee, string memory operation) {\\n    _bill(gasFee, operation);\\n    _;\\n  }\\n\\n  /**\\n   * @notice Transfer ERC20 token to recipient.\\n   * @param token The address of the token to be transferred.\\n   * @param recipient Token recipient address.\\n   * @param amount Transferred amount of tokens.\\n   */\\n  function transfer(\\n    address token,\\n    address recipient,\\n    uint256 amount\\n  ) external onlyOwner {\\n    IERC20(token).transfer(recipient, amount);\\n  }\\n}\\n\",\"keccak256\":\"0xb0b26358673f6750ee6eef40b1a9668a3dc2965ffb1e1d777c3c8ca8cc2ce5a5\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/DFH/IBalance.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IBalance {\\n  function claim(\\n    address account,\\n    uint256 gasFee,\\n    uint256 protocolFee,\\n    string memory description\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xaa996ebfd96fa304ff8c51b240819815ea9cb1b27a250319c57cac7b597be6cc\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/DFH/IStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IStorage {\\n  function getBytes(bytes32 key) external view returns (bytes memory);\\n\\n  function getBool(bytes32 key) external view returns (bool);\\n\\n  function getUint(bytes32 key) external view returns (uint256);\\n\\n  function getInt(bytes32 key) external view returns (int256);\\n\\n  function getAddress(bytes32 key) external view returns (address);\\n\\n  function getString(bytes32 key) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xc3f6f2d80c27a1d5abbf6f6df55c96a315cdf7887b589c9ef5d45d036c56aa76\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/DFH/proxy/ERC1167.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable no-inline-assembly\\nlibrary ERC1167 {\\n  bytes public constant CLONE =\\n    hex\\\"363d3d373d3d3d363d73bebebebebebebebebebebebebebebebebebebebe5af43d82803e903d91602b57fd5bf3\\\";\\n\\n  /**\\n   * @notice Make new proxy contract.\\n   * @param impl Address prototype contract.\\n   * @return proxy Address new proxy contract.\\n   */\\n  function clone(address impl) external returns (address proxy) {\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(ptr, 0x14), shl(0x60, impl))\\n      mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      proxy := create(0, ptr, 0x37)\\n    }\\n    require(proxy != address(0), \\\"ERC1167: create failed\\\");\\n  }\\n\\n  /**\\n   * @notice Returns address of prototype contract for proxy.\\n   * @param proxy Address proxy contract.\\n   * @return impl Address prototype contract (current contract address if not proxy).\\n   */\\n  function implementation(address proxy) external view returns (address impl) {\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(proxy)\\n    }\\n\\n    impl = proxy;\\n    if (size <= 45 && size >= 41) {\\n      bool matches = true;\\n      uint256 i;\\n\\n      bytes memory code;\\n      assembly {\\n        code := mload(0x40)\\n        mstore(0x40, add(code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n        mstore(code, size)\\n        extcodecopy(proxy, add(code, 0x20), 0, size)\\n      }\\n      for (i = 0; matches && i < 9; i++) {\\n        matches = code[i] == CLONE[i];\\n      }\\n      for (i = 0; matches && i < 15; i++) {\\n        if (i == 4) {\\n          matches = code[code.length - i - 1] == bytes1(uint8(CLONE[45 - i - 1]) - uint8(45 - size));\\n        } else {\\n          matches = code[code.length - i - 1] == CLONE[45 - i - 1];\\n        }\\n      }\\n      if (code[9] != bytes1(0x73 - uint8(45 - size))) {\\n        matches = false;\\n      }\\n      uint256 forwardedToBuffer;\\n      if (matches) {\\n        assembly {\\n          forwardedToBuffer := mload(add(code, 30))\\n        }\\n        forwardedToBuffer &= (0x1 << (20 * 8)) - 1;\\n        impl = address(uint160(forwardedToBuffer >> ((45 - size) * 8)));\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x766f43e1832068a2a230f9bc19db0b190f638c4b0acb2dc689da07d43a45675f\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/ERC20Tools.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary ERC20Tools {\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 allowance = token.allowance(address(this), spender);\\n    if (allowance != 0 && allowance < value) {\\n      token.approve(spender, 0);\\n    }\\n    if (allowance != value) {\\n      token.approve(spender, value);\\n    }\\n  }\\n\\n  function safeApproveAll(IERC20 token, address spender) internal {\\n    safeApprove(token, spender, 2**256 - 1);\\n  }\\n}\\n\",\"keccak256\":\"0x099bc27ecc2cbc3474fca81003c55eac408130fb911f21364d9f3dec9afc0620\",\"license\":\"BSD-3-Clause\"},\"contracts/utils/Uniswap/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IUniswapV2Router02 {\\n  function factory() external view returns (address);\\n\\n  function WETH() external view returns (address);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 amountADesired,\\n    uint256 amountBDesired,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (\\n      uint256 amountA,\\n      uint256 amountB,\\n      uint256 liquidity\\n    );\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint256 amountTokenDesired,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    payable\\n    returns (\\n      uint256 amountToken,\\n      uint256 amountETH,\\n      uint256 liquidity\\n    );\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint256 liquidity,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountA, uint256 amountB);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n  function swapExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactTokens(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactETHForTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactETH(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactTokensForETH(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapETHForExactTokens(\\n    uint256 amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function quote(\\n    uint256 amountA,\\n    uint256 reserveA,\\n    uint256 reserveB\\n  ) external pure returns (uint256 amountB);\\n\\n  function getAmountOut(\\n    uint256 amountIn,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountOut);\\n\\n  function getAmountIn(\\n    uint256 amountOut,\\n    uint256 reserveIn,\\n    uint256 reserveOut\\n  ) external pure returns (uint256 amountIn);\\n\\n  function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n  function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountETH);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountETH);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n}\\n\",\"keccak256\":\"0xf12b9639d5053651c2416527a638fd3168276feb207265374d87574a9a312f75\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003a8e38038062003a8e833981016040819052620000349162000069565b600080546001600160a01b039092166001600160a01b031992831617905560018054909116321790556000196002556200009b565b6000602082840312156200007c57600080fd5b81516001600160a01b03811681146200009457600080fd5b9392505050565b6139e380620000ab6000396000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c806366d003ac116100cd578063beabacc811610081578063d81b305611610066578063d81b3056146102f5578063dc73e49c14610308578063f2fde38b1461032857600080fd5b8063beabacc8146102da578063d0e30db0146102ed57600080fd5b80638da5cb5b116100b25780638da5cb5b146102935780639742b5c3146102b1578063b0e21e8a146102c457600080fd5b806366d003ac1461026b5780638456cb591461028b57600080fd5b80633e032a3b116101245780634cf088d9116101095780634cf088d914610226578063590e1ae31461024b5780635c975abb1461025357600080fd5b80633e032a3b146101f85780633f4ba83a1461021e57600080fd5b8063247029441461015657806324b912e5146101a057806329dcb0cf146101b5578063370158ea146101f0575b600080fd5b6004546101769073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6101b36101ae366004613697565b61033b565b005b6005546101dd90760100000000000000000000000000000000000000000000900461ffff1681565b60405161ffff9091168152602001610197565b6101766108cb565b6005546101dd9074010000000000000000000000000000000000000000900461ffff1681565b6101b3610a2d565b60035461017690610100900473ffffffffffffffffffffffffffffffffffffffff1681565b6101b3610dc4565b61025b61141e565b6040519015158152602001610197565b6006546101769073ffffffffffffffffffffffffffffffffffffffff1681565b6101b36115a3565b60015473ffffffffffffffffffffffffffffffffffffffff16610176565b6101b36102bf366004613665565b61194d565b6102cc611b87565b604051908152602001610197565b6101b36102e83660046134c3565b611f94565b6101b36120e9565b6101b3610303366004613445565b6122f1565b6005546101769073ffffffffffffffffffffffffffffffffffffffff1681565b6101b3610336366004613404565b612bb6565b826040518060400160405280601681526020017f43757276654761756765556e6973776170436c61696d0000000000000000000081525061037c8282612e15565b50600354600554604080517f07546172000000000000000000000000000000000000000000000000000000008152905161010090930473ffffffffffffffffffffffffffffffffffffffff908116939216916000918491630754617291600480820192602092909190829003018186803b1580156103f957600080fd5b505afa15801561040d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104319190613428565b6040517f6a62784200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015291925090821690636a62784290602401600060405180830381600087803b15801561049e57600080fd5b505af11580156104b2573d6000803e3d6000fd5b5050505060008373ffffffffffffffffffffffffffffffffffffffff166376d8b1176040518163ffffffff1660e01b815260040160206040518083038186803b1580156104fe57600080fd5b505afa158015610512573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105369190613428565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b1580156105a157600080fd5b505afa1580156105b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d9919061367e565b6040805160028082526060820183529293506000929091602083019080368337019050509050828160008151811061061357610613613953565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050848160018151811061066157610661613953565b73ffffffffffffffffffffffffffffffffffffffff9283166020918202929092010152600454610696918581169116846130e7565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed1739838b84308f6040518663ffffffff1660e01b81526004016106f99594939291906137b2565b600060405180830381600087803b15801561071357600080fd5b505af1158015610727573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261076d9190810190613596565b506006546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8781169263a9059cbb9291169083906370a082319060240160206040518083038186803b1580156107e257600080fd5b505afa1580156107f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081a919061367e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b15801561088557600080fd5b505af1158015610899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bd9190613643565b505050505050505050505050565b6040517f6b8807180000000000000000000000000000000000000000000000000000000081523060048201526000908190737ecFCbdeb6f195030B9Bf2ECc402f6d5433d116D90636b8807189060240160206040518083038186803b15801561093357600080fd5b505af4158015610947573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096b9190613428565b905073ffffffffffffffffffffffffffffffffffffffff81163014156109a957505060005473ffffffffffffffffffffffffffffffffffffffff1690565b8073ffffffffffffffffffffffffffffffffffffffff1663370158ea6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109ef57600080fd5b505afa158015610a03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a279190613428565b91505090565b6040517f6b880718000000000000000000000000000000000000000000000000000000008152306004820181905290737ecFCbdeb6f195030B9Bf2ECc402f6d5433d116D90636b8807189060240160206040518083038186803b158015610a9357600080fd5b505af4158015610aa7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acb9190613428565b73ffffffffffffffffffffffffffffffffffffffff161415610c85576000610af16108cb565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf175974395600482015273ffffffffffffffffffffffffffffffffffffffff91909116906321f8a7219060240160206040518083038186803b158015610b7857600080fd5b505afa158015610b8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb09190613428565b60015490915073ffffffffffffffffffffffffffffffffffffffff16331480610bee57503373ffffffffffffffffffffffffffffffffffffffff8216145b610c7f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b50610d2c565b60015473ffffffffffffffffffffffffffffffffffffffff163314610d2c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f65720000000000000000000000000000000000000000000000000000000000006064820152608401610c76565b610d3461141e565b610d9a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4175746f6d6174653a206e6f74207061757365640000000000000000000000006044820152606401610c76565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055565b60015473ffffffffffffffffffffffffffffffffffffffff163314610e6b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610c76565b6000610e8c60015473ffffffffffffffffffffffffffffffffffffffff1690565b6003546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152919250610100900473ffffffffffffffffffffffffffffffffffffffff169060009082906370a082319060240160206040518083038186803b158015610f0057600080fd5b505afa158015610f14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f38919061367e565b90508015610fc1576040517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff831690632e1a7d4d90602401600060405180830381600087803b158015610fa857600080fd5b505af1158015610fbc573d6000803e3d6000fd5b505050505b6007546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561102b57600080fd5b505afa15801561103f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611063919061367e565b90508015611119576007546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b1580156110df57600080fd5b505af11580156110f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111179190613643565b505b6000600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663075461726040518163ffffffff1660e01b815260040160206040518083038186803b15801561118357600080fd5b505afa158015611197573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111bb9190613428565b6040517f6a62784200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015291925090821690636a62784290602401600060405180830381600087803b15801561122857600080fd5b505af115801561123c573d6000803e3d6000fd5b5050505060008473ffffffffffffffffffffffffffffffffffffffff166376d8b1176040518163ffffffff1660e01b815260040160206040518083038186803b15801561128857600080fd5b505afa15801561129c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c09190613428565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b15801561132b57600080fd5b505afa15801561133f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611363919061367e565b90508015611415576040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301526024820183905283169063a9059cbb90604401602060405180830381600087803b1580156113db57600080fd5b505af11580156113ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114139190613643565b505b50505050505050565b6040517f6b8807180000000000000000000000000000000000000000000000000000000081523060048201526000908190737ecFCbdeb6f195030B9Bf2ECc402f6d5433d116D90636b8807189060240160206040518083038186803b15801561148657600080fd5b505af415801561149a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114be9190613428565b905073ffffffffffffffffffffffffffffffffffffffff811630141561150157505060015474010000000000000000000000000000000000000000900460ff1690565b60015474010000000000000000000000000000000000000000900460ff1680610a2757508073ffffffffffffffffffffffffffffffffffffffff16635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561156b57600080fd5b505afa15801561157f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a279190613643565b6040517f6b880718000000000000000000000000000000000000000000000000000000008152306004820181905290737ecFCbdeb6f195030B9Bf2ECc402f6d5433d116D90636b8807189060240160206040518083038186803b15801561160957600080fd5b505af415801561161d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116419190613428565b73ffffffffffffffffffffffffffffffffffffffff1614156117f65760006116676108cb565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf175974395600482015273ffffffffffffffffffffffffffffffffffffffff91909116906321f8a7219060240160206040518083038186803b1580156116ee57600080fd5b505afa158015611702573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117269190613428565b60015490915073ffffffffffffffffffffffffffffffffffffffff1633148061176457503373ffffffffffffffffffffffffffffffffffffffff8216145b6117f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f65720000000000000000000000000000000000000000000000000000000000006064820152608401610c76565b5061189d565b60015473ffffffffffffffffffffffffffffffffffffffff16331461189d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f65720000000000000000000000000000000000000000000000000000000000006064820152608401610c76565b6118a561141e565b1561190c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4175746f6d6174653a20706175736564000000000000000000000000000000006044820152606401610c76565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055565b6040517f6b880718000000000000000000000000000000000000000000000000000000008152306004820152600090737ecFCbdeb6f195030B9Bf2ECc402f6d5433d116D90636b8807189060240160206040518083038186803b1580156119b357600080fd5b505af41580156119c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119eb9190613428565b90503373ffffffffffffffffffffffffffffffffffffffff82163014611a8e578173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a5157600080fd5b505afa158015611a65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a899190613428565b611aa8565b60015473ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff1614611b4b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603d60248201527f4175746f6d6174653a3a6368616e676550726f746f636f6c4665653a2063616c60448201527f6c6572206973206e6f74207468652070726f746f636f6c206f776e65720000006064820152608401610c76565b60028290556040518281527f3c1d43943224e49d951ce8295a5c8332b517083b3f89bed50feae2cb39caebb59060200160405180910390a15050565b6040517f6b8807180000000000000000000000000000000000000000000000000000000081523060048201526000908190737ecFCbdeb6f195030B9Bf2ECc402f6d5433d116D90636b8807189060240160206040518083038186803b158015611bef57600080fd5b505af4158015611c03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c279190613428565b905073ffffffffffffffffffffffffffffffffffffffff81163014801590611c5157506000600254125b15611cd4578073ffffffffffffffffffffffffffffffffffffffff1663b0e21e8a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c9c57600080fd5b505afa158015611cb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a27919061367e565b6000611cde6108cb565b905060008060025412611cf357600254611db0565b6040517fbd02d0f50000000000000000000000000000000000000000000000000000000081527fa93d95f96a5de25d7a41ddf1f5e8d45cfc929c4838163cf011dab4043a4a40d5600482015273ffffffffffffffffffffffffffffffffffffffff83169063bd02d0f59060240160206040518083038186803b158015611d7857600080fd5b505afa158015611d8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db0919061367e565b905080611dc1576000935050505090565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f65c90423fe7c880476633a7e36521740f87199d233dc56eb4ca6643eb76f605f600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906321f8a7219060240160206040518083038186803b158015611e4957600080fd5b505afa158015611e5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e819190613428565b73ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015611ec657600080fd5b505afa158015611eda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611efe91906136c3565b50505091505060008113611f6e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4175746f6d6174653a20696e76616c69642070726963650000000000000000006044820152606401610c76565b80611f8183670de0b6b3a76400006138c7565b611f8b919061388c565b94505050505090565b60015473ffffffffffffffffffffffffffffffffffffffff16331461203b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610c76565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b1580156120ab57600080fd5b505af11580156120bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e39190613643565b50505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314612190576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610c76565b6007546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9091169060009082906370a082319060240160206040518083038186803b1580156121fe57600080fd5b505afa158015612212573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612236919061367e565b6003549091506122659073ffffffffffffffffffffffffffffffffffffffff84811691610100900416836130e7565b6003546040517fb6b55f250000000000000000000000000000000000000000000000000000000081526004810183905261010090910473ffffffffffffffffffffffffffffffffffffffff169063b6b55f2590602401600060405180830381600087803b1580156122d557600080fd5b505af11580156122e9573d6000803e3d6000fd5b505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff1661236157600180547fffffffffffffffffffffffff000000000000000000000000000000000000000016321790557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600255612408565b60015473ffffffffffffffffffffffffffffffffffffffff163314612408576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610c76565b60035460ff161580612439575060035473ffffffffffffffffffffffffffffffffffffffff87811661010090920416145b6124eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f4761756765556e697377617052657374616b653a3a696e69743a207265696e6960448201527f7469616c697a65207374616b696e67206164647265737320666f72626964646560648201527f6e00000000000000000000000000000000000000000000000000000000000000608482015260a401610c76565b6003805473ffffffffffffffffffffffffffffffffffffffff8816610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff8216811790925560ff9182169116171580612560575060045473ffffffffffffffffffffffffffffffffffffffff8681169116145b612612576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604a60248201527f4761756765556e697377617052657374616b653a3a696e69743a207265696e6960448201527f7469616c697a65206c697175696469747920726f75746572206164647265737360648201527f20666f7262696464656e00000000000000000000000000000000000000000000608482015260a401610c76565b6004805473ffffffffffffffffffffffffffffffffffffffff8088167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556005805461ffff868116760100000000000000000000000000000000000000000000027fffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffff91891674010000000000000000000000000000000000000000027fffffffffffffffffffff000000000000000000000000000000000000000000009093168a8716179290921716179055600680549284169290911691909117905560035460ff16612b83576000612709613305565b9050600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382c630666040518163ffffffff1660e01b815260040160206040518083038186803b15801561277357600080fd5b505afa158015612787573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ab9190613428565b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9283169081179091556040517fbdf475c300000000000000000000000000000000000000000000000000000000815260048101919091529082169063bdf475c39060240160206040518083038186803b15801561284257600080fd5b505afa158015612856573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061287a9190613428565b600880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9283169081179091556040517f9ac90d3d0000000000000000000000000000000000000000000000000000000081526004810191909152600091831690639ac90d3d906024016101006040518083038186803b15801561291457600080fd5b505afa158015612928573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061294c9190613504565b6008546040517f940494f100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201529192506000919084169063940494f19060240160206040518083038186803b1580156129bd57600080fd5b505afa1580156129d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f5919061367e565b90505b60085474010000000000000000000000000000000000000000900460ff168110612b7f5760085474010000000000000000000000000000000000000000900460ff168111612ac8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f4761756765556e697377617052657374616b653a3a696e69743a20696e76616c60448201527f6964207377617020746f6b656e206164647265737300000000000000000000006064820152608401610c76565b6008805473ffffffffffffffffffffffffffffffffffffffff891691849174010000000000000000000000000000000000000000900460ff16908110612b1057612b10613953565b602002015173ffffffffffffffffffffffffffffffffffffffff161415612b3657612b7f565b6008805474010000000000000000000000000000000000000000900460ff16906014612b6183613904565b91906101000a81548160ff021916908360ff160217905550506129f8565b5050505b5050600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905550505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314612c5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610c76565b6040517f6b880718000000000000000000000000000000000000000000000000000000008152306004820181905290737ecFCbdeb6f195030B9Bf2ECc402f6d5433d116D90636b8807189060240160206040518083038186803b158015612cc357600080fd5b505af4158015612cd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cfb9190613428565b73ffffffffffffffffffffffffffffffffffffffff1614612d9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a206368616e676520746865206f776e6572206661696c6560448201527f64000000000000000000000000000000000000000000000000000000000000006064820152608401610c76565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000612e1f61141e565b15612e86576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4175746f6d6174653a20706175736564000000000000000000000000000000006044820152606401610c76565b6000612ea760015473ffffffffffffffffffffffffffffffffffffffff1690565b90503273ffffffffffffffffffffffffffffffffffffffff82161415612ed15760009150506130e1565b6000612edb6108cb565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527fe78c16c6d839536d3155985aab4e9c6013c8c3d446054bcebc48612f359d81f5600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906321f8a7219060240160206040518083038186803b158015612f6657600080fd5b505afa158015612f7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f9e9190613428565b905073ffffffffffffffffffffffffffffffffffffffff8116613043576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f4175746f6d6174653a3a5f62696c6c3a2062616c616e636520636f6e7472616360448201527f74206e6f7420666f756e640000000000000000000000000000000000000000006064820152608401610c76565b8073ffffffffffffffffffffffffffffffffffffffff1663e578a2258488613069611b87565b896040518563ffffffff1660e01b81526004016130899493929190613713565b602060405180830381600087803b1580156130a357600080fd5b505af11580156130b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130db919061367e565b93505050505b92915050565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff83811660248301526000919085169063dd62ed3e9060440160206040518083038186803b15801561315857600080fd5b505afa15801561316c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613190919061367e565b905080158015906131a057508181105b1561324f576040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526000602483015285169063095ea7b390604401602060405180830381600087803b15801561321557600080fd5b505af1158015613229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061324d9190613643565b505b8181146120e3576040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820184905285169063095ea7b390604401602060405180830381600087803b1580156132c657600080fd5b505af11580156132da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132fe9190613643565b5050505050565b600061330f6108cb565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527fe3afe40301d08e5458680c2ac903d4fddf0931e5e1a5c6d9e21328d89e8d8e7c600482015273ffffffffffffffffffffffffffffffffffffffff91909116906321f8a7219060240160206040518083038186803b15801561339657600080fd5b505afa1580156133aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133ce9190613428565b905090565b803561ffff811681146133e557600080fd5b919050565b805169ffffffffffffffffffff811681146133e557600080fd5b60006020828403121561341657600080fd5b8135613421816139b1565b9392505050565b60006020828403121561343a57600080fd5b8151613421816139b1565b60008060008060008060c0878903121561345e57600080fd5b8635613469816139b1565b95506020870135613479816139b1565b94506040870135613489816139b1565b9350613497606088016133d3565b92506134a5608088016133d3565b915060a08701356134b5816139b1565b809150509295509295509295565b6000806000606084860312156134d857600080fd5b83356134e3816139b1565b925060208401356134f3816139b1565b929592945050506040919091013590565b600061010080838503121561351857600080fd5b83601f84011261352757600080fd5b60405181810181811067ffffffffffffffff8211171561354957613549613982565b604052808483810187101561355d57600080fd5b600093505b600884101561358b578051613576816139b1565b82526001939093019260209182019101613562565b509095945050505050565b600060208083850312156135a957600080fd5b825167ffffffffffffffff808211156135c157600080fd5b818501915085601f8301126135d557600080fd5b8151818111156135e7576135e7613982565b8060051b91506135f884830161383d565b8181528481019084860184860187018a101561361357600080fd5b600095505b83861015613636578051835260019590950194918601918601613618565b5098975050505050505050565b60006020828403121561365557600080fd5b8151801515811461342157600080fd5b60006020828403121561367757600080fd5b5035919050565b60006020828403121561369057600080fd5b5051919050565b6000806000606084860312156136ac57600080fd5b505081359360208301359350604090920135919050565b600080600080600060a086880312156136db57600080fd5b6136e4866133ea565b9450602086015193506040860151925060608601519150613707608087016133ea565b90509295509295909350565b73ffffffffffffffffffffffffffffffffffffffff8516815260006020858184015284604084015260806060840152835180608085015260005b818110156137695785810183015185820160a00152820161374d565b8181111561377b57600060a083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160a0019695505050505050565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b8181101561380f57845173ffffffffffffffffffffffffffffffffffffffff16835293830193918301916001016137dd565b505073ffffffffffffffffffffffffffffffffffffffff969096166060850152505050608001529392505050565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561388457613884613982565b604052919050565b6000826138c2577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156138ff576138ff613924565b500290565b600060ff821660ff81141561391b5761391b613924565b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146139d357600080fd5b5056fea164736f6c6343000806000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101515760003560e01c806366d003ac116100cd578063beabacc811610081578063d81b305611610066578063d81b3056146102f5578063dc73e49c14610308578063f2fde38b1461032857600080fd5b8063beabacc8146102da578063d0e30db0146102ed57600080fd5b80638da5cb5b116100b25780638da5cb5b146102935780639742b5c3146102b1578063b0e21e8a146102c457600080fd5b806366d003ac1461026b5780638456cb591461028b57600080fd5b80633e032a3b116101245780634cf088d9116101095780634cf088d914610226578063590e1ae31461024b5780635c975abb1461025357600080fd5b80633e032a3b146101f85780633f4ba83a1461021e57600080fd5b8063247029441461015657806324b912e5146101a057806329dcb0cf146101b5578063370158ea146101f0575b600080fd5b6004546101769073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6101b36101ae366004613697565b61033b565b005b6005546101dd90760100000000000000000000000000000000000000000000900461ffff1681565b60405161ffff9091168152602001610197565b6101766108cb565b6005546101dd9074010000000000000000000000000000000000000000900461ffff1681565b6101b3610a2d565b60035461017690610100900473ffffffffffffffffffffffffffffffffffffffff1681565b6101b3610dc4565b61025b61141e565b6040519015158152602001610197565b6006546101769073ffffffffffffffffffffffffffffffffffffffff1681565b6101b36115a3565b60015473ffffffffffffffffffffffffffffffffffffffff16610176565b6101b36102bf366004613665565b61194d565b6102cc611b87565b604051908152602001610197565b6101b36102e83660046134c3565b611f94565b6101b36120e9565b6101b3610303366004613445565b6122f1565b6005546101769073ffffffffffffffffffffffffffffffffffffffff1681565b6101b3610336366004613404565b612bb6565b826040518060400160405280601681526020017f43757276654761756765556e6973776170436c61696d0000000000000000000081525061037c8282612e15565b50600354600554604080517f07546172000000000000000000000000000000000000000000000000000000008152905161010090930473ffffffffffffffffffffffffffffffffffffffff908116939216916000918491630754617291600480820192602092909190829003018186803b1580156103f957600080fd5b505afa15801561040d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104319190613428565b6040517f6a62784200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015291925090821690636a62784290602401600060405180830381600087803b15801561049e57600080fd5b505af11580156104b2573d6000803e3d6000fd5b5050505060008373ffffffffffffffffffffffffffffffffffffffff166376d8b1176040518163ffffffff1660e01b815260040160206040518083038186803b1580156104fe57600080fd5b505afa158015610512573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105369190613428565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b1580156105a157600080fd5b505afa1580156105b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d9919061367e565b6040805160028082526060820183529293506000929091602083019080368337019050509050828160008151811061061357610613613953565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050848160018151811061066157610661613953565b73ffffffffffffffffffffffffffffffffffffffff9283166020918202929092010152600454610696918581169116846130e7565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed1739838b84308f6040518663ffffffff1660e01b81526004016106f99594939291906137b2565b600060405180830381600087803b15801561071357600080fd5b505af1158015610727573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261076d9190810190613596565b506006546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8781169263a9059cbb9291169083906370a082319060240160206040518083038186803b1580156107e257600080fd5b505afa1580156107f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081a919061367e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b15801561088557600080fd5b505af1158015610899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bd9190613643565b505050505050505050505050565b6040517f6b880718000000000000000000000000000000000000000000000000000000008152306004820152600090819073__$0fb85c1a108326fe5c0d8f2f5a241bc0e7$__90636b8807189060240160206040518083038186803b15801561093357600080fd5b505af4158015610947573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096b9190613428565b905073ffffffffffffffffffffffffffffffffffffffff81163014156109a957505060005473ffffffffffffffffffffffffffffffffffffffff1690565b8073ffffffffffffffffffffffffffffffffffffffff1663370158ea6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109ef57600080fd5b505afa158015610a03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a279190613428565b91505090565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482018190529073__$0fb85c1a108326fe5c0d8f2f5a241bc0e7$__90636b8807189060240160206040518083038186803b158015610a9357600080fd5b505af4158015610aa7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acb9190613428565b73ffffffffffffffffffffffffffffffffffffffff161415610c85576000610af16108cb565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf175974395600482015273ffffffffffffffffffffffffffffffffffffffff91909116906321f8a7219060240160206040518083038186803b158015610b7857600080fd5b505afa158015610b8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb09190613428565b60015490915073ffffffffffffffffffffffffffffffffffffffff16331480610bee57503373ffffffffffffffffffffffffffffffffffffffff8216145b610c7f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f657200000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b50610d2c565b60015473ffffffffffffffffffffffffffffffffffffffff163314610d2c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f65720000000000000000000000000000000000000000000000000000000000006064820152608401610c76565b610d3461141e565b610d9a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4175746f6d6174653a206e6f74207061757365640000000000000000000000006044820152606401610c76565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055565b60015473ffffffffffffffffffffffffffffffffffffffff163314610e6b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610c76565b6000610e8c60015473ffffffffffffffffffffffffffffffffffffffff1690565b6003546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152919250610100900473ffffffffffffffffffffffffffffffffffffffff169060009082906370a082319060240160206040518083038186803b158015610f0057600080fd5b505afa158015610f14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f38919061367e565b90508015610fc1576040517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff831690632e1a7d4d90602401600060405180830381600087803b158015610fa857600080fd5b505af1158015610fbc573d6000803e3d6000fd5b505050505b6007546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561102b57600080fd5b505afa15801561103f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611063919061367e565b90508015611119576007546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b1580156110df57600080fd5b505af11580156110f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111179190613643565b505b6000600360019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663075461726040518163ffffffff1660e01b815260040160206040518083038186803b15801561118357600080fd5b505afa158015611197573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111bb9190613428565b6040517f6a62784200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015291925090821690636a62784290602401600060405180830381600087803b15801561122857600080fd5b505af115801561123c573d6000803e3d6000fd5b5050505060008473ffffffffffffffffffffffffffffffffffffffff166376d8b1176040518163ffffffff1660e01b815260040160206040518083038186803b15801561128857600080fd5b505afa15801561129c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c09190613428565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b15801561132b57600080fd5b505afa15801561133f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611363919061367e565b90508015611415576040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301526024820183905283169063a9059cbb90604401602060405180830381600087803b1580156113db57600080fd5b505af11580156113ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114139190613643565b505b50505050505050565b6040517f6b880718000000000000000000000000000000000000000000000000000000008152306004820152600090819073__$0fb85c1a108326fe5c0d8f2f5a241bc0e7$__90636b8807189060240160206040518083038186803b15801561148657600080fd5b505af415801561149a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114be9190613428565b905073ffffffffffffffffffffffffffffffffffffffff811630141561150157505060015474010000000000000000000000000000000000000000900460ff1690565b60015474010000000000000000000000000000000000000000900460ff1680610a2757508073ffffffffffffffffffffffffffffffffffffffff16635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561156b57600080fd5b505afa15801561157f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a279190613643565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482018190529073__$0fb85c1a108326fe5c0d8f2f5a241bc0e7$__90636b8807189060240160206040518083038186803b15801561160957600080fd5b505af415801561161d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116419190613428565b73ffffffffffffffffffffffffffffffffffffffff1614156117f65760006116676108cb565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527f689d13d8ed8ef1027633ba26e7121121cf427434450a529548f19bf175974395600482015273ffffffffffffffffffffffffffffffffffffffff91909116906321f8a7219060240160206040518083038186803b1580156116ee57600080fd5b505afa158015611702573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117269190613428565b60015490915073ffffffffffffffffffffffffffffffffffffffff1633148061176457503373ffffffffffffffffffffffffffffffffffffffff8216145b6117f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f65720000000000000000000000000000000000000000000000000000000000006064820152608401610c76565b5061189d565b60015473ffffffffffffffffffffffffffffffffffffffff16331461189d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4175746f6d6174653a2063616c6c6572206973206e6f7420746865207061757360448201527f65720000000000000000000000000000000000000000000000000000000000006064820152608401610c76565b6118a561141e565b1561190c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4175746f6d6174653a20706175736564000000000000000000000000000000006044820152606401610c76565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055565b6040517f6b88071800000000000000000000000000000000000000000000000000000000815230600482015260009073__$0fb85c1a108326fe5c0d8f2f5a241bc0e7$__90636b8807189060240160206040518083038186803b1580156119b357600080fd5b505af41580156119c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119eb9190613428565b90503373ffffffffffffffffffffffffffffffffffffffff82163014611a8e578173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a5157600080fd5b505afa158015611a65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a899190613428565b611aa8565b60015473ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff1614611b4b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603d60248201527f4175746f6d6174653a3a6368616e676550726f746f636f6c4665653a2063616c60448201527f6c6572206973206e6f74207468652070726f746f636f6c206f776e65720000006064820152608401610c76565b60028290556040518281527f3c1d43943224e49d951ce8295a5c8332b517083b3f89bed50feae2cb39caebb59060200160405180910390a15050565b6040517f6b880718000000000000000000000000000000000000000000000000000000008152306004820152600090819073__$0fb85c1a108326fe5c0d8f2f5a241bc0e7$$0fb85c1a108326fe5c0d8f2f5a241bc0e7$__90636b8807189060240160206040518083038186803b158015612cc357600080fd5b505af4158015612cd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cfb9190613428565b73ffffffffffffffffffffffffffffffffffffffff1614612d9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4175746f6d6174653a206368616e676520746865206f776e6572206661696c6560448201527f64000000000000000000000000000000000000000000000000000000000000006064820152608401610c76565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000612e1f61141e565b15612e86576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4175746f6d6174653a20706175736564000000000000000000000000000000006044820152606401610c76565b6000612ea760015473ffffffffffffffffffffffffffffffffffffffff1690565b90503273ffffffffffffffffffffffffffffffffffffffff82161415612ed15760009150506130e1565b6000612edb6108cb565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527fe78c16c6d839536d3155985aab4e9c6013c8c3d446054bcebc48612f359d81f5600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906321f8a7219060240160206040518083038186803b158015612f6657600080fd5b505afa158015612f7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f9e9190613428565b905073ffffffffffffffffffffffffffffffffffffffff8116613043576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f4175746f6d6174653a3a5f62696c6c3a2062616c616e636520636f6e7472616360448201527f74206e6f7420666f756e640000000000000000000000000000000000000000006064820152608401610c76565b8073ffffffffffffffffffffffffffffffffffffffff1663e578a2258488613069611b87565b896040518563ffffffff1660e01b81526004016130899493929190613713565b602060405180830381600087803b1580156130a357600080fd5b505af11580156130b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130db919061367e565b93505050505b92915050565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff83811660248301526000919085169063dd62ed3e9060440160206040518083038186803b15801561315857600080fd5b505afa15801561316c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613190919061367e565b905080158015906131a057508181105b1561324f576040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526000602483015285169063095ea7b390604401602060405180830381600087803b15801561321557600080fd5b505af1158015613229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061324d9190613643565b505b8181146120e3576040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820184905285169063095ea7b390604401602060405180830381600087803b1580156132c657600080fd5b505af11580156132da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132fe9190613643565b5050505050565b600061330f6108cb565b6040517f21f8a7210000000000000000000000000000000000000000000000000000000081527fe3afe40301d08e5458680c2ac903d4fddf0931e5e1a5c6d9e21328d89e8d8e7c600482015273ffffffffffffffffffffffffffffffffffffffff91909116906321f8a7219060240160206040518083038186803b15801561339657600080fd5b505afa1580156133aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133ce9190613428565b905090565b803561ffff811681146133e557600080fd5b919050565b805169ffffffffffffffffffff811681146133e557600080fd5b60006020828403121561341657600080fd5b8135613421816139b1565b9392505050565b60006020828403121561343a57600080fd5b8151613421816139b1565b60008060008060008060c0878903121561345e57600080fd5b8635613469816139b1565b95506020870135613479816139b1565b94506040870135613489816139b1565b9350613497606088016133d3565b92506134a5608088016133d3565b915060a08701356134b5816139b1565b809150509295509295509295565b6000806000606084860312156134d857600080fd5b83356134e3816139b1565b925060208401356134f3816139b1565b929592945050506040919091013590565b600061010080838503121561351857600080fd5b83601f84011261352757600080fd5b60405181810181811067ffffffffffffffff8211171561354957613549613982565b604052808483810187101561355d57600080fd5b600093505b600884101561358b578051613576816139b1565b82526001939093019260209182019101613562565b509095945050505050565b600060208083850312156135a957600080fd5b825167ffffffffffffffff808211156135c157600080fd5b818501915085601f8301126135d557600080fd5b8151818111156135e7576135e7613982565b8060051b91506135f884830161383d565b8181528481019084860184860187018a101561361357600080fd5b600095505b83861015613636578051835260019590950194918601918601613618565b5098975050505050505050565b60006020828403121561365557600080fd5b8151801515811461342157600080fd5b60006020828403121561367757600080fd5b5035919050565b60006020828403121561369057600080fd5b5051919050565b6000806000606084860312156136ac57600080fd5b505081359360208301359350604090920135919050565b600080600080600060a086880312156136db57600080fd5b6136e4866133ea565b9450602086015193506040860151925060608601519150613707608087016133ea565b90509295509295909350565b73ffffffffffffffffffffffffffffffffffffffff8516815260006020858184015284604084015260806060840152835180608085015260005b818110156137695785810183015185820160a00152820161374d565b8181111561377b57600060a083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160a0019695505050505050565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b8181101561380f57845173ffffffffffffffffffffffffffffffffffffffff16835293830193918301916001016137dd565b505073ffffffffffffffffffffffffffffffffffffffff969096166060850152505050608001529392505050565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561388457613884613982565b604052919050565b6000826138c2577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156138ff576138ff613924565b500290565b600060ff821660ff81141561391b5761391b613924565b60010192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146139d357600080fd5b5056fea164736f6c6343000806000a",
  "libraries": {
    "ERC1167": "0x7ecFCbdeb6f195030B9Bf2ECc402f6d5433d116D"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "changeProtocolFee(int256)": {
        "params": {
          "__protocolFee": "New protocol fee."
        }
      },
      "protocolFee()": {
        "returns": {
          "_0": "Current protocol fee."
        }
      },
      "transfer(address,address,uint256)": {
        "params": {
          "amount": "Transferred amount of tokens.",
          "recipient": "Token recipient address.",
          "token": "The address of the token to be transferred."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeProtocolFee(int256)": {
        "notice": "Change protocol fee."
      },
      "info()": {
        "notice": "Returns address of Storage contract."
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "pause()": {
        "notice": "Pause contract."
      },
      "paused()": {
        "notice": "Returns true if the contract is paused, and false otherwise."
      },
      "transfer(address,address,uint256)": {
        "notice": "Transfer ERC20 token to recipient."
      },
      "unpause()": {
        "notice": "Unpause contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1398,
        "contract": "contracts/GaugeUniswapClaim.automate.sol:GaugeUniswapClaim",
        "label": "_info",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1401,
        "contract": "contracts/GaugeUniswapClaim.automate.sol:GaugeUniswapClaim",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1404,
        "contract": "contracts/GaugeUniswapClaim.automate.sol:GaugeUniswapClaim",
        "label": "_paused",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 1407,
        "contract": "contracts/GaugeUniswapClaim.automate.sol:GaugeUniswapClaim",
        "label": "_protocolFee",
        "offset": 0,
        "slot": "2",
        "type": "t_int256"
      },
      {
        "astId": 1410,
        "contract": "contracts/GaugeUniswapClaim.automate.sol:GaugeUniswapClaim",
        "label": "_initialized",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 144,
        "contract": "contracts/GaugeUniswapClaim.automate.sol:GaugeUniswapClaim",
        "label": "staking",
        "offset": 1,
        "slot": "3",
        "type": "t_contract(IGauge)1292"
      },
      {
        "astId": 146,
        "contract": "contracts/GaugeUniswapClaim.automate.sol:GaugeUniswapClaim",
        "label": "liquidityRouter",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 148,
        "contract": "contracts/GaugeUniswapClaim.automate.sol:GaugeUniswapClaim",
        "label": "swapToken",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 150,
        "contract": "contracts/GaugeUniswapClaim.automate.sol:GaugeUniswapClaim",
        "label": "slippage",
        "offset": 20,
        "slot": "5",
        "type": "t_uint16"
      },
      {
        "astId": 152,
        "contract": "contracts/GaugeUniswapClaim.automate.sol:GaugeUniswapClaim",
        "label": "deadline",
        "offset": 22,
        "slot": "5",
        "type": "t_uint16"
      },
      {
        "astId": 154,
        "contract": "contracts/GaugeUniswapClaim.automate.sol:GaugeUniswapClaim",
        "label": "recipient",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 157,
        "contract": "contracts/GaugeUniswapClaim.automate.sol:GaugeUniswapClaim",
        "label": "_lpToken",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20)123"
      },
      {
        "astId": 159,
        "contract": "contracts/GaugeUniswapClaim.automate.sol:GaugeUniswapClaim",
        "label": "_pool",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 161,
        "contract": "contracts/GaugeUniswapClaim.automate.sol:GaugeUniswapClaim",
        "label": "_swapTokenN",
        "offset": 20,
        "slot": "8",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)123": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IGauge)1292": {
        "encoding": "inplace",
        "label": "contract IGauge",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
{
  "language": "Solidity",
  "sources": {
    "contracts/CroesusLpRestake.automate.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./utils/DFH/Automate.sol\";\nimport \"./utils/DFH/IStorage.sol\";\nimport \"./utils/Uniswap/IUniswapV2Router02.sol\";\nimport \"./utils/Uniswap/IUniswapV2Pair.sol\";\nimport {ERC20Tools} from \"./utils/ERC20Tools.sol\";\nimport \"./ICroesus.sol\";\n\n/**\n * @notice Use with LP token only.\n */\ncontract CroesusLpRestake is Automate {\n  using ERC20Tools for IERC20;\n\n  struct Swap {\n    address[] path;\n    uint256 outMin;\n  }\n\n  ICroesus public staking;\n\n  address public liquidityRouter;\n\n  uint256 public pool;\n\n  uint16 public slippage;\n\n  uint16 public deadline;\n\n  IERC20 public stakingToken;\n\n  IERC20 public rewardToken;\n\n  // solhint-disable-next-line no-empty-blocks\n  constructor(address _info) Automate(_info) {}\n\n  function init(\n    address _staking,\n    address _liquidityRouter,\n    uint256 _pool,\n    uint16 _slippage,\n    uint16 _deadline\n  ) external initializer {\n    require(\n      !_initialized || address(staking) == _staking,\n      \"CroesusLpRestake::init: reinitialize staking address forbidden\"\n    );\n    staking = ICroesus(_staking);\n    require(\n      !_initialized || liquidityRouter == _liquidityRouter,\n      \"CroesusLpRestake::init: reinitialize liquidity router address forbidden\"\n    );\n    liquidityRouter = _liquidityRouter;\n    require(!_initialized || pool == _pool, \"CroesusLpRestake::init: reinitialize pool index forbidden\");\n    pool = _pool;\n    slippage = _slippage;\n    deadline = _deadline;\n\n    if (!_initialized) {\n      ICroesus.PoolInfo memory poolInfo = staking.poolInfo(pool);\n      stakingToken = IERC20(poolInfo.lpToken);\n      rewardToken = IERC20(staking.lyd());\n    }\n  }\n\n  function deposit() external onlyOwner {\n    IERC20 _stakingToken = stakingToken; // gas optimisation\n    uint256 balance = _stakingToken.balanceOf(address(this));\n    _stakingToken.safeApprove(address(staking), balance);\n    staking.deposit(pool, balance);\n  }\n\n  function refund() external onlyOwner {\n    ICroesus _staking = staking; // gas optimisation\n    address __owner = owner(); // gas optimisation\n    ICroesus.UserInfo memory userInfo = _staking.userInfo(pool, address(this));\n    _staking.withdraw(pool, userInfo.amount);\n    stakingToken.transfer(__owner, stakingToken.balanceOf(address(this)));\n    rewardToken.transfer(__owner, rewardToken.balanceOf(address(this)));\n  }\n\n  function emergencyWithdraw() external onlyOwner {\n    address __owner = owner(); // gas optimisation\n    staking.emergencyWithdraw(pool);\n    stakingToken.transfer(__owner, stakingToken.balanceOf(address(this)));\n    rewardToken.transfer(__owner, rewardToken.balanceOf(address(this)));\n  }\n\n  function _swap(\n    address[] memory path,\n    uint256[2] memory amount,\n    uint256 _deadline\n  ) internal {\n    if (path[0] == path[path.length - 1]) return;\n\n    IUniswapV2Router02(liquidityRouter).swapExactTokensForTokens(amount[0], amount[1], path, address(this), _deadline);\n  }\n\n  function _addLiquidity(\n    address token0,\n    address token1,\n    uint256 _deadline\n  ) internal {\n    address _liquidityRouter = liquidityRouter; // gas optimisation\n    uint256 amountIn0 = IERC20(token0).balanceOf(address(this));\n    uint256 amountIn1 = IERC20(token1).balanceOf(address(this));\n    IERC20(token0).safeApprove(_liquidityRouter, amountIn0);\n    IERC20(token1).safeApprove(_liquidityRouter, amountIn1);\n    IUniswapV2Router02(_liquidityRouter).addLiquidity(\n      token0,\n      token1,\n      amountIn0,\n      amountIn1,\n      0,\n      0,\n      address(this),\n      _deadline\n    );\n  }\n\n  function run(\n    uint256 gasFee,\n    uint256 _deadline,\n    Swap memory swap0,\n    Swap memory swap1\n  ) external bill(gasFee, \"LydiaCroesusLpRestake\") {\n    ICroesus _staking = staking; // gas optimization\n    require(_staking.pendingLyd(pool, address(this)) > 0, \"CroesusLpRestake::run: no earned\");\n\n    _staking.deposit(pool, 0); // get all reward\n    uint256 rewardAmount = rewardToken.balanceOf(address(this));\n    rewardToken.safeApprove(liquidityRouter, rewardAmount);\n    _swap(swap0.path, [rewardAmount / 2, swap0.outMin], _deadline);\n    _swap(swap1.path, [rewardAmount - rewardAmount / 2, swap1.outMin], _deadline);\n\n    IUniswapV2Pair _stakingToken = IUniswapV2Pair(address(stakingToken));\n    _addLiquidity(_stakingToken.token0(), _stakingToken.token1(), _deadline);\n    uint256 stakingAmount = _stakingToken.balanceOf(address(this));\n    stakingToken.safeApprove(address(_staking), stakingAmount);\n    _staking.deposit(pool, stakingAmount);\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/utils/DFH/Automate.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./proxy/ERC1167.sol\";\nimport \"./IStorage.sol\";\nimport \"./IBalance.sol\";\n\n// solhint-disable avoid-tx-origin\nabstract contract Automate {\n  using ERC1167 for address;\n\n  /// @notice Storage contract address.\n  address internal _info;\n\n  /// @notice Contract owner.\n  address internal _owner;\n\n  /// @notice Is contract paused.\n  bool internal _paused;\n\n  /// @notice Protocol fee in USD (-1 if value in global storage).\n  int256 internal _protocolFee;\n\n  /// @notice Is contract already initialized.\n  bool internal _initialized;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  event ProtocolFeeChanged(int256 protocolFee);\n\n  constructor(address __info) {\n    _info = __info;\n    _owner = tx.origin;\n    _protocolFee = -1;\n  }\n\n  /**\n   * @notice Returns address of Storage contract.\n   */\n  function info() public view returns (address) {\n    address impl = address(this).implementation();\n    if (impl == address(this)) return _info;\n\n    return Automate(impl).info();\n  }\n\n  /// @dev Modifier to protect an initializer function from being invoked twice.\n  modifier initializer() {\n    if (_owner == address(0)) {\n      _owner = tx.origin;\n      _protocolFee = -1;\n    } else {\n      require(_owner == msg.sender, \"Automate: caller is not the owner\");\n    }\n    _;\n    _initialized = true;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(_owner == msg.sender, \"Automate: caller is not the owner\");\n    _;\n  }\n\n  /**\n   * @notice Returns the address of the current owner.\n   */\n  function owner() public view returns (address) {\n    return _owner;\n  }\n\n  /**\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n   * Can only be called by the current owner.\n   */\n  function transferOwnership(address newOwner) external onlyOwner {\n    require(address(this).implementation() == address(this), \"Automate: change the owner failed\");\n\n    address oldOwner = _owner;\n    _owner = newOwner;\n    emit OwnershipTransferred(oldOwner, newOwner);\n  }\n\n  /**\n   * @dev Throws if called by any account other than the pauser.\n   */\n  modifier onlyPauser() {\n    if (address(this).implementation() == address(this)) {\n      address pauser = IStorage(info()).getAddress(keccak256(\"DFH:Pauser\"));\n      require(msg.sender == _owner || msg.sender == pauser, \"Automate: caller is not the pauser\");\n    } else {\n      require(msg.sender == _owner, \"Automate: caller is not the pauser\");\n    }\n    _;\n  }\n\n  /**\n   * @notice Returns true if the contract is paused, and false otherwise.\n   */\n  function paused() public view returns (bool) {\n    address impl = address(this).implementation();\n    if (impl == address(this)) return _paused;\n\n    return _paused || Automate(impl).paused();\n  }\n\n  /**\n   * @dev Throws if contract unpaused.\n   */\n  modifier whenPaused() {\n    require(paused(), \"Automate: not paused\");\n    _;\n  }\n\n  /**\n   * @dev Throws if contract paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused(), \"Automate: paused\");\n    _;\n  }\n\n  /**\n   * @notice Pause contract.\n   */\n  function pause() external onlyPauser whenNotPaused {\n    _paused = true;\n  }\n\n  /**\n   * @notice Unpause contract.\n   */\n  function unpause() external onlyPauser whenPaused {\n    _paused = false;\n  }\n\n  /**\n   * @return Current protocol fee.\n   */\n  function protocolFee() public view returns (uint256) {\n    address impl = address(this).implementation();\n    if (impl != address(this) && _protocolFee < 0) {\n      return Automate(impl).protocolFee();\n    }\n\n    IStorage __info = IStorage(info());\n    uint256 feeOnUSD = _protocolFee < 0 ? __info.getUint(keccak256(\"DFH:Fee:Automate\")) : uint256(_protocolFee);\n    if (feeOnUSD == 0) return 0;\n\n    (, int256 price, , , ) = AggregatorV3Interface(__info.getAddress(keccak256(\"DFH:Fee:PriceFeed\"))).latestRoundData();\n    require(price > 0, \"Automate: invalid price\");\n\n    return (feeOnUSD * 1e18) / uint256(price);\n  }\n\n  /**\n   * @notice Change protocol fee.\n   * @param __protocolFee New protocol fee.\n   */\n  function changeProtocolFee(int256 __protocolFee) external {\n    address impl = address(this).implementation();\n    require(\n      (impl == address(this) ? _owner : Automate(impl).owner()) == msg.sender,\n      \"Automate::changeProtocolFee: caller is not the protocol owner\"\n    );\n\n    _protocolFee = __protocolFee;\n    emit ProtocolFeeChanged(__protocolFee);\n  }\n\n  /**\n   * @dev Claim fees from owner.\n   * @param gasFee Claim gas fee.\n   * @param operation Claim description.\n   */\n  function _bill(uint256 gasFee, string memory operation) internal whenNotPaused returns (uint256) {\n    address account = owner(); // gas optimisation\n    if (tx.origin == account) return 0; // free if called by the owner\n\n    IStorage __info = IStorage(info());\n\n    address balance = __info.getAddress(keccak256(\"DFH:Contract:Balance\"));\n    require(balance != address(0), \"Automate::_bill: balance contract not found\");\n\n    return IBalance(balance).claim(account, gasFee, protocolFee(), operation);\n  }\n\n  /**\n   * @dev Claim fees from owner.\n   * @param gasFee Claim gas fee.\n   * @param operation Claim description.\n   */\n  modifier bill(uint256 gasFee, string memory operation) {\n    _bill(gasFee, operation);\n    _;\n  }\n\n  /**\n   * @notice Transfer ERC20 token to recipient.\n   * @param token The address of the token to be transferred.\n   * @param recipient Token recipient address.\n   * @param amount Transferred amount of tokens.\n   */\n  function transfer(\n    address token,\n    address recipient,\n    uint256 amount\n  ) external onlyOwner {\n    IERC20(token).transfer(recipient, amount);\n  }\n}\n"
    },
    "contracts/utils/DFH/IStorage.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\ninterface IStorage {\n  function getBytes(bytes32 key) external view returns (bytes memory);\n\n  function getBool(bytes32 key) external view returns (bool);\n\n  function getUint(bytes32 key) external view returns (uint256);\n\n  function getInt(bytes32 key) external view returns (int256);\n\n  function getAddress(bytes32 key) external view returns (address);\n\n  function getString(bytes32 key) external view returns (string memory);\n}\n"
    },
    "contracts/utils/Uniswap/IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\n// solhint-disable func-name-mixedcase\ninterface IUniswapV2Router02 {\n  function factory() external view returns (address);\n\n  function WETH() external view returns (address);\n\n  function addLiquidity(\n    address tokenA,\n    address tokenB,\n    uint256 amountADesired,\n    uint256 amountBDesired,\n    uint256 amountAMin,\n    uint256 amountBMin,\n    address to,\n    uint256 deadline\n  )\n    external\n    returns (\n      uint256 amountA,\n      uint256 amountB,\n      uint256 liquidity\n    );\n\n  function addLiquidityETH(\n    address token,\n    uint256 amountTokenDesired,\n    uint256 amountTokenMin,\n    uint256 amountETHMin,\n    address to,\n    uint256 deadline\n  )\n    external\n    payable\n    returns (\n      uint256 amountToken,\n      uint256 amountETH,\n      uint256 liquidity\n    );\n\n  function removeLiquidity(\n    address tokenA,\n    address tokenB,\n    uint256 liquidity,\n    uint256 amountAMin,\n    uint256 amountBMin,\n    address to,\n    uint256 deadline\n  ) external returns (uint256 amountA, uint256 amountB);\n\n  function removeLiquidityETH(\n    address token,\n    uint256 liquidity,\n    uint256 amountTokenMin,\n    uint256 amountETHMin,\n    address to,\n    uint256 deadline\n  ) external returns (uint256 amountToken, uint256 amountETH);\n\n  function removeLiquidityWithPermit(\n    address tokenA,\n    address tokenB,\n    uint256 liquidity,\n    uint256 amountAMin,\n    uint256 amountBMin,\n    address to,\n    uint256 deadline,\n    bool approveMax,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external returns (uint256 amountA, uint256 amountB);\n\n  function removeLiquidityETHWithPermit(\n    address token,\n    uint256 liquidity,\n    uint256 amountTokenMin,\n    uint256 amountETHMin,\n    address to,\n    uint256 deadline,\n    bool approveMax,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external returns (uint256 amountToken, uint256 amountETH);\n\n  function swapExactTokensForTokens(\n    uint256 amountIn,\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external returns (uint256[] memory amounts);\n\n  function swapTokensForExactTokens(\n    uint256 amountOut,\n    uint256 amountInMax,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external returns (uint256[] memory amounts);\n\n  function swapExactETHForTokens(\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external payable returns (uint256[] memory amounts);\n\n  function swapTokensForExactETH(\n    uint256 amountOut,\n    uint256 amountInMax,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external returns (uint256[] memory amounts);\n\n  function swapExactTokensForETH(\n    uint256 amountIn,\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external returns (uint256[] memory amounts);\n\n  function swapETHForExactTokens(\n    uint256 amountOut,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external payable returns (uint256[] memory amounts);\n\n  function quote(\n    uint256 amountA,\n    uint256 reserveA,\n    uint256 reserveB\n  ) external pure returns (uint256 amountB);\n\n  function getAmountOut(\n    uint256 amountIn,\n    uint256 reserveIn,\n    uint256 reserveOut\n  ) external pure returns (uint256 amountOut);\n\n  function getAmountIn(\n    uint256 amountOut,\n    uint256 reserveIn,\n    uint256 reserveOut\n  ) external pure returns (uint256 amountIn);\n\n  function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n  function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\n    address token,\n    uint256 liquidity,\n    uint256 amountTokenMin,\n    uint256 amountETHMin,\n    address to,\n    uint256 deadline\n  ) external returns (uint256 amountETH);\n\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n    address token,\n    uint256 liquidity,\n    uint256 amountTokenMin,\n    uint256 amountETHMin,\n    address to,\n    uint256 deadline,\n    bool approveMax,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external returns (uint256 amountETH);\n\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n    uint256 amountIn,\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external;\n\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external payable;\n\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\n    uint256 amountIn,\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external;\n}\n"
    },
    "contracts/utils/Uniswap/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n// solhint-disable func-name-mixedcase\ninterface IUniswapV2Pair is IERC20 {\n  function nonces(address owner) external view returns (uint256);\n\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n  function token0() external view returns (address);\n\n  function token1() external view returns (address);\n\n  function getReserves()\n    external\n    view\n    returns (\n      uint112 reserve0,\n      uint112 reserve1,\n      uint32 blockTimestampLast\n    );\n\n  function price0CumulativeLast() external view returns (uint256);\n\n  function price1CumulativeLast() external view returns (uint256);\n\n  function kLast() external view returns (uint256);\n\n  function mint(address to) external returns (uint256 liquidity);\n\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n  function swap(\n    uint256 amount0Out,\n    uint256 amount1Out,\n    address to,\n    bytes calldata data\n  ) external;\n}\n"
    },
    "contracts/utils/ERC20Tools.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nlibrary ERC20Tools {\n  function safeApprove(\n    IERC20 token,\n    address spender,\n    uint256 value\n  ) internal {\n    uint256 allowance = token.allowance(address(this), spender);\n    if (allowance != 0 && allowance < value) {\n      token.approve(spender, 0);\n    }\n    if (allowance != value) {\n      token.approve(spender, value);\n    }\n  }\n\n  function safeApproveAll(IERC20 token, address spender) internal {\n    safeApprove(token, spender, 2**256 - 1);\n  }\n}\n"
    },
    "contracts/ICroesus.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\ninterface ICroesus {\n  struct UserInfo {\n    uint256 amount;\n    uint256 rewardDebt;\n  }\n\n  struct PoolInfo {\n    address lpToken;\n    uint256 allocPoint;\n    uint256 lastRewardTimestamp;\n    uint256 accLydPerShare;\n  }\n\n  function lyd() external view returns (address);\n\n  function poolInfo(uint256 pool) external view returns (PoolInfo memory);\n\n  function userInfo(uint256 pool, address user) external view returns (UserInfo memory);\n\n  function pendingLyd(uint256 pool, address user) external view returns (uint256);\n\n  function deposit(uint256 pool, uint256 amount) external;\n\n  function enterStaking(uint256 amount) external;\n\n  function withdraw(uint256 pool, uint256 amount) external;\n\n  function leaveStaking(uint256 amount) external;\n\n  function emergencyWithdraw(uint256 pool) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n\n  function decimals()\n    external\n    view\n    returns (\n      uint8\n    );\n\n  function description()\n    external\n    view\n    returns (\n      string memory\n    );\n\n  function version()\n    external\n    view\n    returns (\n      uint256\n    );\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(\n    uint80 _roundId\n  )\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n}\n"
    },
    "contracts/utils/DFH/proxy/ERC1167.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\n// solhint-disable no-inline-assembly\nlibrary ERC1167 {\n  bytes public constant CLONE =\n    hex\"363d3d373d3d3d363d73bebebebebebebebebebebebebebebebebebebebe5af43d82803e903d91602b57fd5bf3\";\n\n  /**\n   * @notice Make new proxy contract.\n   * @param impl Address prototype contract.\n   * @return proxy Address new proxy contract.\n   */\n  function clone(address impl) external returns (address proxy) {\n    assembly {\n      let ptr := mload(0x40)\n      mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n      mstore(add(ptr, 0x14), shl(0x60, impl))\n      mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n      proxy := create(0, ptr, 0x37)\n    }\n    require(proxy != address(0), \"ERC1167: create failed\");\n  }\n\n  /**\n   * @notice Returns address of prototype contract for proxy.\n   * @param proxy Address proxy contract.\n   * @return impl Address prototype contract (current contract address if not proxy).\n   */\n  function implementation(address proxy) external view returns (address impl) {\n    uint256 size;\n    assembly {\n      size := extcodesize(proxy)\n    }\n\n    impl = proxy;\n    if (size <= 45 && size >= 41) {\n      bool matches = true;\n      uint256 i;\n\n      bytes memory code;\n      assembly {\n        code := mload(0x40)\n        mstore(0x40, add(code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n        mstore(code, size)\n        extcodecopy(proxy, add(code, 0x20), 0, size)\n      }\n      for (i = 0; matches && i < 9; i++) {\n        matches = code[i] == CLONE[i];\n      }\n      for (i = 0; matches && i < 15; i++) {\n        if (i == 4) {\n          matches = code[code.length - i - 1] == bytes1(uint8(CLONE[45 - i - 1]) - uint8(45 - size));\n        } else {\n          matches = code[code.length - i - 1] == CLONE[45 - i - 1];\n        }\n      }\n      if (code[9] != bytes1(0x73 - uint8(45 - size))) {\n        matches = false;\n      }\n      uint256 forwardedToBuffer;\n      if (matches) {\n        assembly {\n          forwardedToBuffer := mload(add(code, 30))\n        }\n        forwardedToBuffer &= (0x1 << (20 * 8)) - 1;\n        impl = address(uint160(forwardedToBuffer >> ((45 - size) * 8)));\n      }\n    }\n  }\n}\n"
    },
    "contracts/utils/DFH/IBalance.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\ninterface IBalance {\n  function claim(\n    address account,\n    uint256 gasFee,\n    uint256 protocolFee,\n    string memory description\n  ) external returns (uint256);\n}\n"
    },
    "contracts/CroesusSingleRestake.automate.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./utils/DFH/Automate.sol\";\nimport \"./utils/DFH/IStorage.sol\";\nimport \"./utils/Uniswap/IUniswapV2Router02.sol\";\nimport \"./utils/Uniswap/IUniswapV2Pair.sol\";\nimport {ERC20Tools} from \"./utils/ERC20Tools.sol\";\nimport \"./ICroesus.sol\";\n\n/**\n * @notice Use with simple token only.\n */\ncontract CroesusSingleRestake is Automate {\n  using ERC20Tools for IERC20;\n\n  struct Swap {\n    address[] path;\n    uint256 outMin;\n  }\n\n  ICroesus public staking;\n\n  address public liquidityRouter;\n\n  uint256 public pool;\n\n  uint16 public slippage;\n\n  uint16 public deadline;\n\n  IERC20 public stakingToken;\n\n  IERC20 public rewardToken;\n\n  // solhint-disable-next-line no-empty-blocks\n  constructor(address _info) Automate(_info) {}\n\n  function init(\n    address _staking,\n    address _liquidityRouter,\n    uint256 _pool,\n    uint16 _slippage,\n    uint16 _deadline\n  ) external initializer {\n    require(\n      !_initialized || address(staking) == _staking,\n      \"CroesusSingleRestake::init: reinitialize staking address forbidden\"\n    );\n    staking = ICroesus(_staking);\n    require(\n      !_initialized || liquidityRouter == _liquidityRouter,\n      \"CroesusSingleRestake::init: reinitialize liquidity router address forbidden\"\n    );\n    liquidityRouter = _liquidityRouter;\n    require(!_initialized || pool == _pool, \"CroesusSingleRestake::init: reinitialize pool index forbidden\");\n    pool = _pool;\n    slippage = _slippage;\n    deadline = _deadline;\n\n    if (!_initialized) {\n      ICroesus.PoolInfo memory poolInfo = staking.poolInfo(pool);\n      stakingToken = IERC20(poolInfo.lpToken);\n      rewardToken = IERC20(staking.lyd());\n    }\n  }\n\n  function deposit() external onlyOwner {\n    IERC20 _stakingToken = stakingToken; // gas optimisation\n    uint256 balance = _stakingToken.balanceOf(address(this));\n    _stakingToken.safeApprove(address(staking), balance);\n    if (pool == 0) {\n      staking.enterStaking(balance);\n    } else {\n      staking.deposit(pool, balance);\n    }\n  }\n\n  function refund() external onlyOwner {\n    ICroesus _staking = staking; // gas optimisation\n    address __owner = owner(); // gas optimisation\n    ICroesus.UserInfo memory userInfo = _staking.userInfo(pool, address(this));\n    if (pool == 0) {\n      _staking.leaveStaking(userInfo.amount);\n    } else {\n      _staking.withdraw(pool, userInfo.amount);\n    }\n    stakingToken.transfer(__owner, stakingToken.balanceOf(address(this)));\n    rewardToken.transfer(__owner, rewardToken.balanceOf(address(this)));\n  }\n\n  function emergencyWithdraw() external onlyOwner {\n    address __owner = owner(); // gas optimisation\n    staking.emergencyWithdraw(pool);\n    stakingToken.transfer(__owner, stakingToken.balanceOf(address(this)));\n    rewardToken.transfer(__owner, rewardToken.balanceOf(address(this)));\n  }\n\n  function _swap(\n    address[] memory path,\n    uint256[2] memory amount,\n    uint256 _deadline\n  ) internal {\n    if (path[0] == path[path.length - 1]) return;\n\n    IUniswapV2Router02(liquidityRouter).swapExactTokensForTokens(amount[0], amount[1], path, address(this), _deadline);\n  }\n\n  function run(\n    uint256 gasFee,\n    uint256 _deadline,\n    Swap memory swap\n  ) external bill(gasFee, \"LydiaFinanceCroesusSingleRestake\") {\n    ICroesus _staking = staking; // gas optimization\n    IERC20 _stakingToken = stakingToken;\n    require(_staking.pendingLyd(pool, address(this)) > 0, \"CroesusSingleRestake::run: no earned\");\n\n    if (pool == 0) {\n      _staking.enterStaking(0); // get all reward\n    } else {\n      _staking.deposit(pool, 0); // get all reward\n    }\n    uint256 rewardAmount = rewardToken.balanceOf(address(this));\n    rewardToken.safeApprove(liquidityRouter, rewardAmount);\n    _swap(swap.path, [rewardAmount, swap.outMin], _deadline);\n\n    uint256 stakingAmount = _stakingToken.balanceOf(address(this));\n    _stakingToken.safeApprove(address(_staking), stakingAmount);\n    if (pool == 0) {\n      _staking.enterStaking(stakingAmount);\n    } else {\n      _staking.deposit(pool, stakingAmount);\n    }\n  }\n}\n"
    }
  },
  "settings": {
    "libraries": {
      "contracts/utils/DFH/proxy/ERC1167.sol": {
        "ERC1167": "0xbbaDa894933398c1Fca03bdd8B872bb444A483f2"
      }
    },
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}